{
  "address": "0x2a1A6d94b9a898ed6Fa9E53e1685aaBAA50053fB",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "quantity",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "pricePerItem",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum BidType",
          "name": "bidType",
          "type": "uint8"
        }
      ],
      "name": "BidAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        }
      ],
      "name": "CollectionBidCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "quantity",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "pricePerItem",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "expirationTime",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        }
      ],
      "name": "CollectionBidCreatedOrUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ItemCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "quantity",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "pricePerItem",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "expirationTime",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        }
      ],
      "name": "ItemListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "quantity",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "pricePerItem",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        }
      ],
      "name": "ItemSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "quantity",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "pricePerItem",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "expirationTime",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        }
      ],
      "name": "ItemUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum TreasureMarketplaceTestnet.TokenApprovalStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        }
      ],
      "name": "TokenApprovalStatusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenBidCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "quantity",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "pricePerItem",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "expirationTime",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        }
      ],
      "name": "TokenBidCreatedOrUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "UpdateCollectionOwnerFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "UpdateFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        }
      ],
      "name": "UpdateFeeRecipient",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "UpdateFeeWithCollectionOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_priceTrackerAddress",
          "type": "address"
        }
      ],
      "name": "UpdateSalesTracker",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_COLLECTION_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TREASURE_MARKETPLACE_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "nftAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "bidder",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "quantity",
              "type": "uint64"
            },
            {
              "internalType": "uint128",
              "name": "pricePerItem",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            }
          ],
          "internalType": "struct AcceptBidParams",
          "name": "_acceptBidParams",
          "type": "tuple"
        }
      ],
      "name": "acceptCollectionBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "nftAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "bidder",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "quantity",
              "type": "uint64"
            },
            {
              "internalType": "uint128",
              "name": "pricePerItem",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            }
          ],
          "internalType": "struct AcceptBidParams",
          "name": "_acceptBidParams",
          "type": "tuple"
        }
      ],
      "name": "acceptTokenBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "areBidsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "nftAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "quantity",
              "type": "uint64"
            },
            {
              "internalType": "uint128",
              "name": "maxPricePerItem",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "usingEth",
              "type": "bool"
            }
          ],
          "internalType": "struct BuyItemParams[]",
          "name": "_buyItemParams",
          "type": "tuple[]"
        }
      ],
      "name": "buyItems",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum BidType",
              "name": "bidType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "nftAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct CancelBidParams[]",
          "name": "_cancelBidParams",
          "type": "tuple[]"
        }
      ],
      "name": "cancelManyBids",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collectionBids",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "quantity",
          "type": "uint64"
        },
        {
          "internalType": "uint128",
          "name": "pricePerItem",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "expirationTime",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "paymentTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collectionToCollectionOwnerFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fee",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collectionToPaymentToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_quantity",
          "type": "uint64"
        },
        {
          "internalType": "uint128",
          "name": "_pricePerItem",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "_expirationTime",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        }
      ],
      "name": "createListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_quantity",
          "type": "uint64"
        },
        {
          "internalType": "uint128",
          "name": "_pricePerItem",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "_expirationTime",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        }
      ],
      "name": "createOrUpdateCollectionBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_quantity",
          "type": "uint64"
        },
        {
          "internalType": "uint128",
          "name": "_pricePerItem",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "_expirationTime",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        }
      ],
      "name": "createOrUpdateListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "nftAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "quantity",
              "type": "uint64"
            },
            {
              "internalType": "uint128",
              "name": "pricePerItem",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            }
          ],
          "internalType": "struct TreasureMarketplaceTestnet.CreateOrUpdateListingParams[]",
          "name": "_createOrUpdateListingParams",
          "type": "tuple[]"
        }
      ],
      "name": "createOrUpdateListings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_quantity",
          "type": "uint64"
        },
        {
          "internalType": "uint128",
          "name": "_pricePerItem",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "_expirationTime",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        }
      ],
      "name": "createOrUpdateTokenBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeReceipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeWithCollectionOwner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        }
      ],
      "name": "getPaymentTokenForCollection",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_initialFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_initialFeeRecipient",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_initialPaymentToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "listings",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "quantity",
          "type": "uint64"
        },
        {
          "internalType": "uint128",
          "name": "pricePerItem",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "expirationTime",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "paymentTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentToken",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceTrackerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collectionAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "fee",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "internalType": "struct TreasureMarketplaceTestnet.CollectionOwnerFee",
          "name": "_collectionOwnerFee",
          "type": "tuple"
        }
      ],
      "name": "setCollectionOwnerFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newFeeWithCollectionOwner",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        }
      ],
      "name": "setPaymentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceTrackerAddress",
          "type": "address"
        }
      ],
      "name": "setPriceTracker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "enum TreasureMarketplaceTestnet.TokenApprovalStatus",
          "name": "_status",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        }
      ],
      "name": "setTokenApprovalStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wethAddress",
          "type": "address"
        }
      ],
      "name": "setWeth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleAreBidsActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenApprovals",
      "outputs": [
        {
          "internalType": "enum TreasureMarketplaceTestnet.TokenApprovalStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenBids",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "quantity",
          "type": "uint64"
        },
        {
          "internalType": "uint128",
          "name": "pricePerItem",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "expirationTime",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "paymentTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_newQuantity",
          "type": "uint64"
        },
        {
          "internalType": "uint128",
          "name": "_newPricePerItem",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "_newExpirationTime",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        }
      ],
      "name": "updateListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbc8ea144f85784153cfdd4675a867ce54c07a7ae78207b3f7a158cd73674e007",
  "receipt": {
    "to": null,
    "from": "0xd9F1E68fD5b9749ABc8C87241DDDA171baa0d791",
    "contractAddress": "0x2a1A6d94b9a898ed6Fa9E53e1685aaBAA50053fB",
    "transactionIndex": 1,
    "gasUsed": "5517318",
    "logsBloom": "0x
    "blockHash": "0x5371991b62a0a94c1b82ad55c7cbe60c05d511b6561de5c9dc1604eaf42a4f93",
    "transactionHash": "0xbc8ea144f85784153cfdd4675a867ce54c07a7ae78207b3f7a158cd73674e007",
    "logs": [],
    "blockNumber": 164,
    "cumulativeGasUsed": "5517318",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "eb4a2eab709f7c85c297e9e29b5fa54d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"quantity\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"pricePerItem\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum BidType\",\"name\":\"bidType\",\"type\":\"uint8\"}],\"name\":\"BidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"name\":\"CollectionBidCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"quantity\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"pricePerItem\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"CollectionBidCreatedOrUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ItemCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"quantity\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"pricePerItem\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"ItemListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"quantity\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"pricePerItem\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"ItemSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"quantity\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"pricePerItem\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"ItemUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum TreasureMarketplaceTestnet.TokenApprovalStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"TokenApprovalStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenBidCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"quantity\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"pricePerItem\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"TokenBidCreatedOrUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"UpdateCollectionOwnerFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"UpdateFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"UpdateFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"UpdateFeeWithCollectionOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_priceTrackerAddress\",\"type\":\"address\"}],\"name\":\"UpdateSalesTracker\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_COLLECTION_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TREASURE_MARKETPLACE_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"quantity\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"pricePerItem\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"internalType\":\"struct AcceptBidParams\",\"name\":\"_acceptBidParams\",\"type\":\"tuple\"}],\"name\":\"acceptCollectionBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"quantity\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"pricePerItem\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"internalType\":\"struct AcceptBidParams\",\"name\":\"_acceptBidParams\",\"type\":\"tuple\"}],\"name\":\"acceptTokenBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areBidsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"quantity\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"maxPricePerItem\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"usingEth\",\"type\":\"bool\"}],\"internalType\":\"struct BuyItemParams[]\",\"name\":\"_buyItemParams\",\"type\":\"tuple[]\"}],\"name\":\"buyItems\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum BidType\",\"name\":\"bidType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct CancelBidParams[]\",\"name\":\"_cancelBidParams\",\"type\":\"tuple[]\"}],\"name\":\"cancelManyBids\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collectionBids\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"quantity\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"pricePerItem\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"paymentTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collectionToCollectionOwnerFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fee\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collectionToPaymentToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_quantity\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"_pricePerItem\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"_expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"}],\"name\":\"createListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_quantity\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"_pricePerItem\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"_expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"}],\"name\":\"createOrUpdateCollectionBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_quantity\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"_pricePerItem\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"_expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"}],\"name\":\"createOrUpdateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"quantity\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"pricePerItem\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"internalType\":\"struct TreasureMarketplaceTestnet.CreateOrUpdateListingParams[]\",\"name\":\"_createOrUpdateListingParams\",\"type\":\"tuple[]\"}],\"name\":\"createOrUpdateListings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_quantity\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"_pricePerItem\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"_expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"}],\"name\":\"createOrUpdateTokenBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWithCollectionOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"name\":\"getPaymentTokenForCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_initialFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_initialPaymentToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"quantity\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"pricePerItem\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"paymentTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceTrackerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fee\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct TreasureMarketplaceTestnet.CollectionOwnerFee\",\"name\":\"_collectionOwnerFee\",\"type\":\"tuple\"}],\"name\":\"setCollectionOwnerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newFeeWithCollectionOwner\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"}],\"name\":\"setPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceTrackerAddress\",\"type\":\"address\"}],\"name\":\"setPriceTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"enum TreasureMarketplaceTestnet.TokenApprovalStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"}],\"name\":\"setTokenApprovalStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"}],\"name\":\"setWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleAreBidsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenApprovals\",\"outputs\":[{\"internalType\":\"enum TreasureMarketplaceTestnet.TokenApprovalStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBids\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"quantity\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"pricePerItem\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"paymentTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_newQuantity\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"_newPricePerItem\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"_newExpirationTime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract does not store any tokens at any time, it's only collects details \\\"the sale\\\" and approvals         from both parties and preforms non-custodial transaction by transfering NFT from owner to buying and payment         token from buying to NFT owner.\",\"events\":{\"ItemCanceled(address,address,uint256)\":{\"params\":{\"nftAddress\":\"which token contract holds the formerly offered token\",\"seller\":\"former offeror of the item\",\"tokenId\":\"the identifier for the formerly offered token\"}},\"ItemListed(address,address,uint256,uint64,uint128,uint64,address)\":{\"params\":{\"expirationTime\":\"UNIX timestamp after when this listing expires\",\"nftAddress\":\"which token contract holds the offered token\",\"paymentToken\":\"the token used to list this item\",\"pricePerItem\":\"the price (in units of the paymentToken) for each token offered\",\"quantity\":\"how many of this token identifier are offered (or 1 for a ERC-721 token)\",\"seller\":\"the offeror of the item\",\"tokenId\":\"the identifier for the offered token\"}},\"ItemSold(address,address,address,uint256,uint64,uint128,address)\":{\"params\":{\"buyer\":\"the buyer of the item\",\"nftAddress\":\"which token contract holds the sold token\",\"paymentToken\":\"the payment token that was used to pay for this item\",\"pricePerItem\":\"the price (in units of the paymentToken) for each token sold\",\"quantity\":\"how many of this token identifier where sold (or 1 for a ERC-721 token)\",\"seller\":\"the offeror of the item\",\"tokenId\":\"the identifier for the sold token\"}},\"ItemUpdated(address,address,uint256,uint64,uint128,uint64,address)\":{\"params\":{\"expirationTime\":\"UNIX timestamp after when this listing expires\",\"nftAddress\":\"which token contract holds the offered token\",\"paymentToken\":\"the token used to list this item\",\"pricePerItem\":\"the price (in units of the paymentToken) for each token offered\",\"quantity\":\"how many of this token identifier are offered (or 1 for a ERC-721 token)\",\"seller\":\"the offeror of the item\",\"tokenId\":\"the identifier for the offered token\"}},\"TokenApprovalStatusUpdated(address,uint8,address)\":{\"params\":{\"nft\":\"which token contract was updated\",\"paymentToken\":\"the token that will be used for payments for this collection\",\"status\":\"the new status\"}},\"UpdateCollectionOwnerFee(address,address,uint256)\":{\"params\":{\"_collection\":\"The collection\",\"_fee\":\"The fee amount (in units of basis points)\",\"_recipient\":\"The recipient of the fees. If the address is 0, the collection fees for this collection have been removed.\"}},\"UpdateFee(uint256)\":{\"params\":{\"fee\":\"new fee amount (in units of basis points)\"}},\"UpdateFeeRecipient(address)\":{\"params\":{\"feeRecipient\":\"the new recipient to get fees\"}},\"UpdateFeeWithCollectionOwner(uint256)\":{\"params\":{\"fee\":\"new fee amount (in units of basis points)\"}},\"UpdateSalesTracker(address)\":{\"params\":{\"_priceTrackerAddress\":\"the new address to call for sales price tracking\"}}},\"kind\":\"dev\",\"methods\":{\"cancelListing(address,uint256)\":{\"params\":{\"_nftAddress\":\"which token contract holds the offered token\",\"_tokenId\":\"the identifier for the offered token\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createListing(address,uint256,uint64,uint128,uint64,address)\":{\"params\":{\"_expirationTime\":\"UNIX timestamp after when this listing expires\",\"_nftAddress\":\"which token contract holds the offered token\",\"_pricePerItem\":\"the price (in units of the paymentToken) for each token offered\",\"_quantity\":\"how many of this token identifier are offered (or 1 for a ERC-721 token)\",\"_tokenId\":\"the identifier for the offered token\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(uint256,address,address)\":{\"details\":\"The initializer modifier ensures this is only called once, the owner should confirm this was properly         performed before publishing this contract address.\",\"params\":{\"_initialFee\":\"fee to be paid on each sale, in basis points\",\"_initialFeeRecipient\":\"wallet to collets fees\",\"_initialPaymentToken\":\"address of the token that is used for settlement\"}},\"pause()\":{\"details\":\"This is callable only by the owner. Canceling listings is not paused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setCollectionOwnerFee(address,(uint32,address))\":{\"details\":\"This is callable only by the owner\",\"params\":{\"_collectionAddress\":\"The collection in question. This must be whitelisted.\",\"_collectionOwnerFee\":\"The fee and recipient for the collection. If the 0 address is passed as the recipient, collection specific fees will not be collected.\"}},\"setFee(uint256,uint256)\":{\"details\":\"This is callable only by the owner. Both fees may not exceed MAX_FEE\",\"params\":{\"_newFee\":\"the updated fee amount is basis points\"}},\"setFeeRecipient(address)\":{\"details\":\"This is callable only by the owner.\",\"params\":{\"_newFeeRecipient\":\"the wallet to receive fees\"}},\"setPriceTracker(address)\":{\"details\":\"This is callable only by the owner.\",\"params\":{\"_priceTrackerAddress\":\"the wallet to receive fees\"}},\"setTokenApprovalStatus(address,uint8,address)\":{\"details\":\"This is callable only by the owner.\",\"params\":{\"_nft\":\"address of the NFT to be approved\",\"_status\":\"the kind of NFT approved, or NOT_APPROVED to remove approval\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"This is callable only by the owner.\"},\"updateListing(address,uint256,uint64,uint128,uint64,address)\":{\"params\":{\"_newExpirationTime\":\"UNIX timestamp after when this listing expires\",\"_newPricePerItem\":\"the price (in units of the paymentToken) for each token offered\",\"_newQuantity\":\"how many of this token identifier are offered (or 1 for a ERC-721 token)\",\"_nftAddress\":\"which token contract holds the offered token\",\"_tokenId\":\"the identifier for the offered token\"}}},\"title\":\"Treasure NFT marketplace\",\"version\":1},\"userdoc\":{\"events\":{\"ItemCanceled(address,address,uint256)\":{\"notice\":\"An item is no longer listed for sale\"},\"ItemListed(address,address,uint256,uint64,uint128,uint64,address)\":{\"notice\":\"An item was listed for sale\"},\"ItemSold(address,address,address,uint256,uint64,uint128,address)\":{\"notice\":\"A listed item was sold\"},\"ItemUpdated(address,address,uint256,uint64,uint128,uint64,address)\":{\"notice\":\"An item listing was updated\"},\"TokenApprovalStatusUpdated(address,uint8,address)\":{\"notice\":\"The approval status for a token was updated\"},\"UpdateCollectionOwnerFee(address,address,uint256)\":{\"notice\":\"A collection's fees have changed\"},\"UpdateFee(uint256)\":{\"notice\":\"The fee portion was updated\"},\"UpdateFeeRecipient(address)\":{\"notice\":\"The fee recipient was updated\"},\"UpdateFeeWithCollectionOwner(uint256)\":{\"notice\":\"The fee portion was updated for collections that have a collection owner.\"},\"UpdateSalesTracker(address)\":{\"notice\":\"The sales tracker contract was update\"}},\"kind\":\"user\",\"methods\":{\"BASIS_POINTS()\":{\"notice\":\"the denominator for portion calculation, i.e. how many basis points are in 100%\"},\"MAX_COLLECTION_FEE()\":{\"notice\":\"the maximum fee which the collection owner may set\"},\"MAX_FEE()\":{\"notice\":\"the maximum fee which the owner may set (in units of basis points)\"},\"MIN_PRICE()\":{\"notice\":\"the minimum price for which any item can be sold\"},\"TREASURE_MARKETPLACE_ADMIN_ROLE()\":{\"notice\":\"TREASURE_MARKETPLACE_ADMIN_ROLE role hash\"},\"areBidsActive()\":{\"notice\":\"Indicates if bid related functions are active.\"},\"buyItems((address,uint256,address,uint64,uint128,address,bool)[])\":{\"notice\":\"Buy multiple listed items. You must authorize this marketplace with your payment token to completed the buy or purchase with eth if it is a weth collection.\"},\"cancelListing(address,uint256)\":{\"notice\":\"Remove an item listing\"},\"collectionBids(address,address)\":{\"notice\":\"mapping for collection level bids (721 only): nftAddress => offeror\"},\"collectionToCollectionOwnerFee(address)\":{\"notice\":\"Maps the collection address to the fees which the collection owner collects. Some collections may not have a seperate fee, such as those owned by the Treasure DAO.\"},\"collectionToPaymentToken(address)\":{\"notice\":\"Maps the collection address to the payment token that will be used for purchasing. If the address is the zero address, it will use the default paymentToken.\"},\"createListing(address,uint256,uint64,uint128,uint64,address)\":{\"notice\":\"Creates an item listing. You must authorize this marketplace with your item's token contract to list.\"},\"createOrUpdateListings((address,uint256,uint64,uint128,uint64,address)[])\":{\"notice\":\"Create or update multiple listings.\"},\"createOrUpdateTokenBid(address,uint256,uint64,uint128,uint64,address)\":{\"notice\":\"Creates a bid for a particular token.\"},\"fee()\":{\"notice\":\"fee portion (in basis points) for each sale, (e.g. a value of 100 is 100/10000 = 1%). This is the fee if no collection owner fee is set.\"},\"feeReceipient()\":{\"notice\":\"address that receives fees\"},\"feeWithCollectionOwner()\":{\"notice\":\"fee portion (in basis points) for each sale. This is used if a separate fee has been set for the collection owner.\"},\"initialize(uint256,address,address)\":{\"notice\":\"Perform initial contract setup\"},\"listings(address,uint256,address)\":{\"notice\":\"mapping for listings, maps: nftAddress => tokenId => offeror\"},\"pause()\":{\"notice\":\"Pauses the marketplace, creatisgn and executing listings is paused\"},\"paymentToken()\":{\"notice\":\"the default token that is used for marketplace sales and fee payments. Can be overridden by collectionToTokenAddress.\"},\"priceTrackerAddress()\":{\"notice\":\"Address of the contract that tracks sales and prices of collections.\"},\"setCollectionOwnerFee(address,(uint32,address))\":{\"notice\":\"Updates the fee amount which is collected during sales fro a specific collection\"},\"setFee(uint256,uint256)\":{\"notice\":\"Updates the fee amount which is collected during sales, for both collections with and without owner specific fees.\"},\"setFeeRecipient(address)\":{\"notice\":\"Updates the fee recipient which receives fees during sales\"},\"setPriceTracker(address)\":{\"notice\":\"Updates the fee recipient which receives fees during sales\"},\"setTokenApprovalStatus(address,uint8,address)\":{\"notice\":\"Sets a token as an approved kind of NFT or as ineligible for trading\"},\"tokenApprovals(address)\":{\"notice\":\"NFTs which the owner has approved to be sold on the marketplace, maps: nftAddress => status\"},\"tokenBids(address,uint256,address)\":{\"notice\":\"mapping for token bids (721/1155): nftAddress => tokneId => offeror\"},\"unpause()\":{\"notice\":\"Unpauses the marketplace, all functionality is restored\"},\"updateListing(address,uint256,uint64,uint128,uint64,address)\":{\"notice\":\"Updates an item listing\"},\"weth()\":{\"notice\":\"The address for weth.\"}},\"notice\":\"This contract allows you to buy and sell NFTs from token contracts that are approved by the contract owner.         Please note that this contract is upgradeable. In the event of a compromised ProxyAdmin contract owner,         collectable tokens and payments may be at risk. To prevent this, the ProxyAdmin is owned by a multi-sig         governed by the TreasureDAO council.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TreasureMarketplaceTestnet.sol\":\"TreasureMarketplaceTestnet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ffe9655abbb3741fcb84ad10e2f628d5dbec46b3f84a69ceec4752e807e2757\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\",\"keccak256\":\"0x121966b3220d263a6669dcf59c1254bd48ed237adf4d8a595add70a7927eada1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0004699ba89fa356eb0d58d815b42dcf52eccd2765e95256631b838bce2556bc\",\"license\":\"MIT\"},\"contracts/TreasureMarketplaceTestnet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/ITreasureNFTPriceTracker.sol\\\";\\n\\n/// @title  Treasure NFT marketplace\\n/// @notice This contract allows you to buy and sell NFTs from token contracts that are approved by the contract owner.\\n///         Please note that this contract is upgradeable. In the event of a compromised ProxyAdmin contract owner,\\n///         collectable tokens and payments may be at risk. To prevent this, the ProxyAdmin is owned by a multi-sig\\n///         governed by the TreasureDAO council.\\n/// @dev    This contract does not store any tokens at any time, it's only collects details \\\"the sale\\\" and approvals\\n///         from both parties and preforms non-custodial transaction by transfering NFT from owner to buying and payment\\n///         token from buying to NFT owner.\\ncontract TreasureMarketplaceTestnet is AccessControlEnumerableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    struct ListingOrBid {\\n        /// @dev number of tokens for sale or requested (1 if ERC-721 token is active for sale) (for bids, quantity for ERC-721 can be greater than 1)\\n        uint64 quantity;\\n        /// @dev price per token sold, i.e. extended sale price equals this times quantity purchased. For bids, price offered per item.\\n        uint128 pricePerItem;\\n        /// @dev timestamp after which the listing/bid is invalid\\n        uint64 expirationTime;\\n        /// @dev the payment token for this listing/bid.\\n        address paymentTokenAddress;\\n    }\\n\\n    struct CollectionOwnerFee {\\n        /// @dev the fee, out of 10,000, that this collection owner will be given for each sale\\n        uint32 fee;\\n        /// @dev the recipient of the collection specific fee\\n        address recipient;\\n    }\\n\\n    enum TokenApprovalStatus {NOT_APPROVED, ERC_721_APPROVED, ERC_1155_APPROVED}\\n\\n    /// @notice TREASURE_MARKETPLACE_ADMIN_ROLE role hash\\n    bytes32 public constant TREASURE_MARKETPLACE_ADMIN_ROLE = keccak256(\\\"TREASURE_MARKETPLACE_ADMIN_ROLE\\\");\\n\\n    /// @notice ERC165 interface signatures\\n    bytes4 private constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\n    bytes4 private constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    /// @notice the denominator for portion calculation, i.e. how many basis points are in 100%\\n    uint256 public constant BASIS_POINTS = 10000;\\n\\n    /// @notice the maximum fee which the owner may set (in units of basis points)\\n    uint256 public constant MAX_FEE = 1500;\\n\\n    /// @notice the maximum fee which the collection owner may set\\n    uint256 public constant MAX_COLLECTION_FEE = 2000;\\n\\n    /// @notice the minimum price for which any item can be sold\\n    uint256 public constant MIN_PRICE = 1e9;\\n\\n    /// @notice the default token that is used for marketplace sales and fee payments. Can be overridden by collectionToTokenAddress.\\n    IERC20Upgradeable public paymentToken;\\n\\n    /// @notice fee portion (in basis points) for each sale, (e.g. a value of 100 is 100/10000 = 1%). This is the fee if no collection owner fee is set.\\n    uint256 public fee;\\n\\n    /// @notice address that receives fees\\n    address public feeReceipient;\\n\\n    /// @notice mapping for listings, maps: nftAddress => tokenId => offeror\\n    mapping(address => mapping(uint256 => mapping(address => ListingOrBid))) public listings;\\n\\n    /// @notice NFTs which the owner has approved to be sold on the marketplace, maps: nftAddress => status\\n    mapping(address => TokenApprovalStatus) public tokenApprovals;\\n\\n    /// @notice fee portion (in basis points) for each sale. This is used if a separate fee has been set for the collection owner.\\n    uint256 public feeWithCollectionOwner;\\n\\n    /// @notice Maps the collection address to the fees which the collection owner collects. Some collections may not have a seperate fee, such as those owned by the Treasure DAO.\\n    mapping(address => CollectionOwnerFee) public collectionToCollectionOwnerFee;\\n\\n    /// @notice Maps the collection address to the payment token that will be used for purchasing. If the address is the zero address, it will use the default paymentToken.\\n    mapping(address => address) public collectionToPaymentToken;\\n\\n    /// @notice The address for weth.\\n    IERC20Upgradeable public weth;\\n\\n    /// @notice mapping for token bids (721/1155): nftAddress => tokneId => offeror\\n    mapping(address => mapping(uint256 => mapping(address => ListingOrBid))) public tokenBids;\\n\\n    /// @notice mapping for collection level bids (721 only): nftAddress => offeror\\n    mapping(address => mapping(address => ListingOrBid)) public collectionBids;\\n\\n    /// @notice Indicates if bid related functions are active.\\n    bool public areBidsActive;\\n\\n    /// @notice Address of the contract that tracks sales and prices of collections.\\n    address public priceTrackerAddress;\\n\\n    /// @notice The fee portion was updated\\n    /// @param  fee new fee amount (in units of basis points)\\n    event UpdateFee(uint256 fee);\\n\\n    /// @notice The fee portion was updated for collections that have a collection owner.\\n    /// @param  fee new fee amount (in units of basis points)\\n    event UpdateFeeWithCollectionOwner(uint256 fee);\\n\\n    /// @notice A collection's fees have changed\\n    /// @param  _collection  The collection\\n    /// @param  _recipient   The recipient of the fees. If the address is 0, the collection fees for this collection have been removed.\\n    /// @param  _fee         The fee amount (in units of basis points)\\n    event UpdateCollectionOwnerFee(address _collection, address _recipient, uint256 _fee);\\n\\n    /// @notice The fee recipient was updated\\n    /// @param  feeRecipient the new recipient to get fees\\n    event UpdateFeeRecipient(address feeRecipient);\\n\\n\\n    /// @notice The approval status for a token was updated\\n    /// @param  nft    which token contract was updated\\n    /// @param  status the new status\\n    /// @param  paymentToken the token that will be used for payments for this collection\\n    event TokenApprovalStatusUpdated(address nft, TokenApprovalStatus status, address paymentToken);\\n\\n    event TokenBidCreatedOrUpdated(\\n        address bidder,\\n        address nftAddress,\\n        uint256 tokenId,\\n        uint64 quantity,\\n        uint128 pricePerItem,\\n        uint64 expirationTime,\\n        address paymentToken\\n    );\\n\\n    event CollectionBidCreatedOrUpdated(\\n        address bidder,\\n        address nftAddress,\\n        uint64 quantity,\\n        uint128 pricePerItem,\\n        uint64 expirationTime,\\n        address paymentToken\\n    );\\n\\n    event TokenBidCancelled(\\n        address bidder,\\n        address nftAddress,\\n        uint256 tokenId\\n    );\\n\\n    event CollectionBidCancelled(\\n        address bidder,\\n        address nftAddress\\n    );\\n\\n    event BidAccepted(\\n        address seller,\\n        address bidder,\\n        address nftAddress,\\n        uint256 tokenId,\\n        uint64 quantity,\\n        uint128 pricePerItem,\\n        address paymentToken,\\n        BidType bidType\\n    );\\n\\n    /// @notice An item was listed for sale\\n    /// @param  seller         the offeror of the item\\n    /// @param  nftAddress     which token contract holds the offered token\\n    /// @param  tokenId        the identifier for the offered token\\n    /// @param  quantity       how many of this token identifier are offered (or 1 for a ERC-721 token)\\n    /// @param  pricePerItem   the price (in units of the paymentToken) for each token offered\\n    /// @param  expirationTime UNIX timestamp after when this listing expires\\n    /// @param  paymentToken   the token used to list this item\\n    event ItemListed(\\n        address seller,\\n        address nftAddress,\\n        uint256 tokenId,\\n        uint64 quantity,\\n        uint128 pricePerItem,\\n        uint64 expirationTime,\\n        address paymentToken\\n    );\\n\\n    /// @notice An item listing was updated\\n    /// @param  seller         the offeror of the item\\n    /// @param  nftAddress     which token contract holds the offered token\\n    /// @param  tokenId        the identifier for the offered token\\n    /// @param  quantity       how many of this token identifier are offered (or 1 for a ERC-721 token)\\n    /// @param  pricePerItem   the price (in units of the paymentToken) for each token offered\\n    /// @param  expirationTime UNIX timestamp after when this listing expires\\n    /// @param  paymentToken   the token used to list this item\\n    event ItemUpdated(\\n        address seller,\\n        address nftAddress,\\n        uint256 tokenId,\\n        uint64 quantity,\\n        uint128 pricePerItem,\\n        uint64 expirationTime,\\n        address paymentToken\\n    );\\n\\n    /// @notice An item is no longer listed for sale\\n    /// @param  seller     former offeror of the item\\n    /// @param  nftAddress which token contract holds the formerly offered token\\n    /// @param  tokenId    the identifier for the formerly offered token\\n    event ItemCanceled(address indexed seller, address indexed nftAddress, uint256 indexed tokenId);\\n\\n    /// @notice A listed item was sold\\n    /// @param  seller       the offeror of the item\\n    /// @param  buyer        the buyer of the item\\n    /// @param  nftAddress   which token contract holds the sold token\\n    /// @param  tokenId      the identifier for the sold token\\n    /// @param  quantity     how many of this token identifier where sold (or 1 for a ERC-721 token)\\n    /// @param  pricePerItem the price (in units of the paymentToken) for each token sold\\n    /// @param  paymentToken the payment token that was used to pay for this item\\n    event ItemSold(\\n        address seller,\\n        address buyer,\\n        address nftAddress,\\n        uint256 tokenId,\\n        uint64 quantity,\\n        uint128 pricePerItem,\\n        address paymentToken\\n    );\\n    \\n    /// @notice The sales tracker contract was update\\n    /// @param  _priceTrackerAddress the new address to call for sales price tracking\\n    event UpdateSalesTracker(address _priceTrackerAddress);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    /// @notice Perform initial contract setup\\n    /// @dev    The initializer modifier ensures this is only called once, the owner should confirm this was properly\\n    ///         performed before publishing this contract address.\\n    /// @param  _initialFee          fee to be paid on each sale, in basis points\\n    /// @param  _initialFeeRecipient wallet to collets fees\\n    /// @param  _initialPaymentToken address of the token that is used for settlement\\n    function initialize(\\n        uint256 _initialFee,\\n        address _initialFeeRecipient,\\n        IERC20Upgradeable _initialPaymentToken\\n    )\\n        external\\n        initializer\\n    {\\n        require(address(_initialPaymentToken) != address(0), \\\"TreasureMarketplace: cannot set address(0)\\\");\\n\\n        __AccessControl_init_unchained();\\n        __Pausable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n\\n        _setRoleAdmin(TREASURE_MARKETPLACE_ADMIN_ROLE, TREASURE_MARKETPLACE_ADMIN_ROLE);\\n        _grantRole(TREASURE_MARKETPLACE_ADMIN_ROLE, msg.sender);\\n\\n        setFee(_initialFee, _initialFee);\\n        setFeeRecipient(_initialFeeRecipient);\\n        paymentToken = _initialPaymentToken;\\n    }\\n\\n    /// @notice Creates an item listing. You must authorize this marketplace with your item's token contract to list.\\n    /// @param  _nftAddress     which token contract holds the offered token\\n    /// @param  _tokenId        the identifier for the offered token\\n    /// @param  _quantity       how many of this token identifier are offered (or 1 for a ERC-721 token)\\n    /// @param  _pricePerItem   the price (in units of the paymentToken) for each token offered\\n    /// @param  _expirationTime UNIX timestamp after when this listing expires\\n    function createListing(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        uint64 _quantity,\\n        uint128 _pricePerItem,\\n        uint64 _expirationTime,\\n        address _paymentToken\\n    )\\n        external\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        require(listings[_nftAddress][_tokenId][_msgSender()].quantity == 0, \\\"TreasureMarketplace: already listed\\\");\\n        _createListingWithoutEvent(_nftAddress, _tokenId, _quantity, _pricePerItem, _expirationTime, _paymentToken);\\n        emit ItemListed(\\n            _msgSender(),\\n            _nftAddress,\\n            _tokenId,\\n            _quantity,\\n            _pricePerItem,\\n            _expirationTime,\\n            _paymentToken\\n        );\\n    }\\n\\n    /// @notice Updates an item listing\\n    /// @param  _nftAddress        which token contract holds the offered token\\n    /// @param  _tokenId           the identifier for the offered token\\n    /// @param  _newQuantity       how many of this token identifier are offered (or 1 for a ERC-721 token)\\n    /// @param  _newPricePerItem   the price (in units of the paymentToken) for each token offered\\n    /// @param  _newExpirationTime UNIX timestamp after when this listing expires\\n    function updateListing(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        uint64 _newQuantity,\\n        uint128 _newPricePerItem,\\n        uint64 _newExpirationTime,\\n        address _paymentToken\\n    )\\n        external\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        require(listings[_nftAddress][_tokenId][_msgSender()].quantity > 0, \\\"TreasureMarketplace: not listed item\\\");\\n        _createListingWithoutEvent(_nftAddress, _tokenId, _newQuantity, _newPricePerItem, _newExpirationTime, _paymentToken);\\n        emit ItemUpdated(\\n            _msgSender(),\\n            _nftAddress,\\n            _tokenId,\\n            _newQuantity,\\n            _newPricePerItem,\\n            _newExpirationTime,\\n            _paymentToken\\n        );\\n    }\\n\\n    struct CreateOrUpdateListingParams {\\n        /// which token contract holds the offered token\\n        address nftAddress;\\n        /// the identifier for the token to be bought\\n        uint256 tokenId;\\n        /// how many of this token identifier to be bought (or 1 for a ERC-721 token)\\n        uint64 quantity;\\n        /// the maximum price (in units of the paymentToken) for each token offered\\n        uint128 pricePerItem;\\n        /// UNIX timestamp after when this listing expires\\n        uint64 expirationTime;\\n        /// indicates if the user is purchasing this item with eth.\\n        /// the payment token to be used\\n        address paymentToken;\\n    }\\n\\n    /// @notice Create or update multiple listings.\\n    function createOrUpdateListings(\\n        CreateOrUpdateListingParams[] calldata _createOrUpdateListingParams)\\n    external\\n    nonReentrant\\n    whenNotPaused\\n    {\\n        for (uint256 i = 0; i < _createOrUpdateListingParams.length;) {\\n            CreateOrUpdateListingParams calldata _createOrUpdateListingParam = _createOrUpdateListingParams[i];\\n            _createOrUpdateListing(\\n                _createOrUpdateListingParam.nftAddress,\\n                _createOrUpdateListingParam.tokenId,\\n                _createOrUpdateListingParam.quantity,\\n                _createOrUpdateListingParam.pricePerItem,\\n                _createOrUpdateListingParam.expirationTime,\\n                _createOrUpdateListingParam.paymentToken\\n            );\\n            unchecked { i += 1; }\\n        }\\n    }\\n\\n    function createOrUpdateListing(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        uint64 _quantity,\\n        uint128 _pricePerItem,\\n        uint64 _expirationTime,\\n        address _paymentToken)\\n    external\\n    nonReentrant\\n    whenNotPaused\\n    {\\n        _createOrUpdateListing(_nftAddress, _tokenId, _quantity, _pricePerItem, _expirationTime, _paymentToken);\\n    }\\n\\n    function _createOrUpdateListing(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        uint64 _quantity,\\n        uint128 _pricePerItem,\\n        uint64 _expirationTime,\\n        address _paymentToken)\\n    internal\\n    {\\n        bool _existingListing = listings[_nftAddress][_tokenId][_msgSender()].quantity > 0;\\n        _createListingWithoutEvent(_nftAddress, _tokenId, _quantity, _pricePerItem, _expirationTime, _paymentToken);\\n        // Keep the events the same as they were before.\\n        if(_existingListing) {\\n            emit ItemUpdated(\\n                _msgSender(),\\n                _nftAddress,\\n                _tokenId,\\n                _quantity,\\n                _pricePerItem,\\n                _expirationTime,\\n                _paymentToken\\n            );\\n        } else {\\n            emit ItemListed(\\n                _msgSender(),\\n                _nftAddress,\\n                _tokenId,\\n                _quantity,\\n                _pricePerItem,\\n                _expirationTime,\\n                _paymentToken\\n            );\\n        }\\n    }\\n\\n    /// @notice Performs the listing and does not emit the event\\n    /// @param  _nftAddress     which token contract holds the offered token\\n    /// @param  _tokenId        the identifier for the offered token\\n    /// @param  _quantity       how many of this token identifier are offered (or 1 for a ERC-721 token)\\n    /// @param  _pricePerItem   the price (in units of the paymentToken) for each token offered\\n    /// @param  _expirationTime UNIX timestamp after when this listing expires\\n    function _createListingWithoutEvent(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        uint64 _quantity,\\n        uint128 _pricePerItem,\\n        uint64 _expirationTime,\\n        address _paymentToken\\n    )\\n        internal\\n    {\\n        require(_expirationTime > block.timestamp, \\\"TreasureMarketplace: invalid expiration time\\\");\\n        require(_pricePerItem >= MIN_PRICE, \\\"TreasureMarketplace: below min price\\\");\\n\\n        if (tokenApprovals[_nftAddress] == TokenApprovalStatus.ERC_721_APPROVED) {\\n            IERC721Upgradeable nft = IERC721Upgradeable(_nftAddress);\\n            require(nft.ownerOf(_tokenId) == _msgSender(), \\\"TreasureMarketplace: not owning item\\\");\\n            require(nft.isApprovedForAll(_msgSender(), address(this)), \\\"TreasureMarketplace: item not approved\\\");\\n            require(_quantity == 1, \\\"TreasureMarketplace: cannot list multiple ERC721\\\");\\n        } else if (tokenApprovals[_nftAddress] == TokenApprovalStatus.ERC_1155_APPROVED) {\\n            IERC1155Upgradeable nft = IERC1155Upgradeable(_nftAddress);\\n            require(nft.balanceOf(_msgSender(), _tokenId) >= _quantity, \\\"TreasureMarketplace: must hold enough nfts\\\");\\n            require(nft.isApprovedForAll(_msgSender(), address(this)), \\\"TreasureMarketplace: item not approved\\\");\\n            require(_quantity > 0, \\\"TreasureMarketplace: nothing to list\\\");\\n        } else {\\n            revert(\\\"TreasureMarketplace: token is not approved for trading\\\");\\n        }\\n\\n        address _paymentTokenForCollection = getPaymentTokenForCollection(_nftAddress);\\n        require(_paymentTokenForCollection == _paymentToken, \\\"TreasureMarketplace: Wrong payment token\\\");\\n\\n        listings[_nftAddress][_tokenId][_msgSender()] = ListingOrBid(\\n            _quantity,\\n            _pricePerItem,\\n            _expirationTime,\\n            _paymentToken\\n        );\\n    }\\n\\n    /// @notice Remove an item listing\\n    /// @param  _nftAddress which token contract holds the offered token\\n    /// @param  _tokenId    the identifier for the offered token\\n    function cancelListing(address _nftAddress, uint256 _tokenId)\\n        external\\n        nonReentrant\\n    {\\n        delete (listings[_nftAddress][_tokenId][_msgSender()]);\\n        emit ItemCanceled(_msgSender(), _nftAddress, _tokenId);\\n    }\\n\\n    function cancelManyBids(CancelBidParams[] calldata _cancelBidParams) external nonReentrant {\\n        for(uint256 i = 0; i < _cancelBidParams.length; i++) {\\n            CancelBidParams calldata _cancelBidParam = _cancelBidParams[i];\\n            if(_cancelBidParam.bidType == BidType.COLLECTION) {\\n                collectionBids[_cancelBidParam.nftAddress][_msgSender()].quantity = 0;\\n\\n                emit CollectionBidCancelled(_msgSender(), _cancelBidParam.nftAddress);\\n            } else {\\n                tokenBids[_cancelBidParam.nftAddress][_cancelBidParam.tokenId][_msgSender()].quantity = 0;\\n\\n                emit TokenBidCancelled(_msgSender(), _cancelBidParam.nftAddress, _cancelBidParam.tokenId);\\n            }\\n        }\\n    }\\n\\n    /// @notice Creates a bid for a particular token.\\n    function createOrUpdateTokenBid(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        uint64 _quantity,\\n        uint128 _pricePerItem,\\n        uint64 _expirationTime,\\n        address _paymentToken)\\n    external\\n    nonReentrant\\n    whenNotPaused\\n    whenBiddingActive\\n    {\\n        if(tokenApprovals[_nftAddress] == TokenApprovalStatus.ERC_721_APPROVED) {\\n            require(_quantity == 1, \\\"TreasureMarketplace: token bid quantity 1 for ERC721\\\");\\n        } else if (tokenApprovals[_nftAddress] == TokenApprovalStatus.ERC_1155_APPROVED) {\\n            require(_quantity > 0, \\\"TreasureMarketplace: bad quantity\\\");\\n        } else {\\n            revert(\\\"TreasureMarketplace: token is not approved for trading\\\");\\n        }\\n\\n        _createBidWithoutEvent(_nftAddress, _quantity, _pricePerItem, _expirationTime, _paymentToken, tokenBids[_nftAddress][_tokenId][_msgSender()]);\\n\\n        emit TokenBidCreatedOrUpdated(\\n            _msgSender(),\\n            _nftAddress,\\n            _tokenId,\\n            _quantity,\\n            _pricePerItem,\\n            _expirationTime,\\n            _paymentToken\\n        );\\n    }\\n\\n    function createOrUpdateCollectionBid(\\n        address _nftAddress,\\n        uint64 _quantity,\\n        uint128 _pricePerItem,\\n        uint64 _expirationTime,\\n        address _paymentToken)\\n    external\\n    nonReentrant\\n    whenNotPaused\\n    whenBiddingActive\\n    {\\n        if(tokenApprovals[_nftAddress] == TokenApprovalStatus.ERC_721_APPROVED) {\\n            require(_quantity > 0, \\\"TreasureMarketplace: Bad quantity\\\");\\n        } else if (tokenApprovals[_nftAddress] == TokenApprovalStatus.ERC_1155_APPROVED) {\\n            revert(\\\"TreasureMarketplace: No collection bids on 1155s\\\");\\n        } else {\\n            revert(\\\"TreasureMarketplace: token is not approved for trading\\\");\\n        }\\n\\n        _createBidWithoutEvent(_nftAddress, _quantity, _pricePerItem, _expirationTime, _paymentToken, collectionBids[_nftAddress][_msgSender()]);\\n\\n        emit CollectionBidCreatedOrUpdated(\\n            _msgSender(),\\n            _nftAddress,\\n            _quantity,\\n            _pricePerItem,\\n            _expirationTime,\\n            _paymentToken\\n        );\\n    }\\n\\n    function _createBidWithoutEvent(\\n        address _nftAddress,\\n        uint64 _quantity,\\n        uint128 _pricePerItem,\\n        uint64 _expirationTime,\\n        address _paymentToken,\\n        ListingOrBid storage _bid)\\n    private\\n    {\\n        require(_expirationTime > block.timestamp, \\\"TreasureMarketplace: invalid expiration time\\\");\\n        require(_pricePerItem >= MIN_PRICE, \\\"TreasureMarketplace: below min price\\\");\\n\\n        address _paymentTokenForCollection = getPaymentTokenForCollection(_nftAddress);\\n        require(_paymentTokenForCollection == _paymentToken, \\\"TreasureMarketplace: Bad payment token\\\");\\n\\n        IERC20Upgradeable _token = IERC20Upgradeable(_paymentToken);\\n\\n        uint256 _totalAmountNeeded = _pricePerItem * _quantity;\\n\\n        require(_token.allowance(_msgSender(), address(this)) >= _totalAmountNeeded && _token.balanceOf(_msgSender()) >= _totalAmountNeeded,\\n            \\\"TreasureMarketplace: Not enough tokens owned or allowed for bid\\\");\\n\\n        _bid.quantity = _quantity;\\n        _bid.pricePerItem = _pricePerItem;\\n        _bid.expirationTime = _expirationTime;\\n        _bid.paymentTokenAddress = _paymentToken;\\n    }\\n\\n    function acceptCollectionBid(\\n        AcceptBidParams calldata _acceptBidParams)\\n    external\\n    nonReentrant\\n    whenNotPaused\\n    whenBiddingActive\\n    {\\n        _acceptBid(_acceptBidParams, BidType.COLLECTION);\\n    }\\n\\n    function acceptTokenBid(\\n        AcceptBidParams calldata _acceptBidParams)\\n    external\\n    nonReentrant\\n    whenNotPaused\\n    whenBiddingActive\\n    {\\n        _acceptBid(_acceptBidParams, BidType.TOKEN);\\n    }\\n\\n    function _acceptBid(AcceptBidParams calldata _acceptBidParams, BidType _bidType) private {\\n        // Validate buy order\\n        require(_msgSender() != _acceptBidParams.bidder, \\\"TreasureMarketplace: Cannot supply own bid\\\");\\n        require(_acceptBidParams.quantity > 0, \\\"TreasureMarketplace: Nothing to supply to bidder\\\");\\n\\n        // Validate bid\\n        ListingOrBid storage _bid = _bidType == BidType.COLLECTION\\n            ? collectionBids[_acceptBidParams.nftAddress][_acceptBidParams.bidder]\\n            : tokenBids[_acceptBidParams.nftAddress][_acceptBidParams.tokenId][_acceptBidParams.bidder];\\n\\n        require(_bid.quantity > 0, \\\"TreasureMarketplace: bid does not exist\\\");\\n        require(_bid.expirationTime >= block.timestamp, \\\"TreasureMarketplace: bid expired\\\");\\n        require(_bid.pricePerItem > 0, \\\"TreasureMarketplace: bid price invalid\\\");\\n        require(_bid.quantity >= _acceptBidParams.quantity, \\\"TreasureMarketplace: not enough quantity\\\");\\n        require(_bid.pricePerItem == _acceptBidParams.pricePerItem, \\\"TreasureMarketplace: price does not match\\\");\\n\\n        // Ensure the accepter, the bidder, and the collection all agree on the token to be used for the purchase.\\n        // If the token used for buying/selling has changed since the bid was created, this effectively blocks\\n        // all the old bids with the old payment tokens from being bought.\\n        address _paymentTokenForCollection = getPaymentTokenForCollection(_acceptBidParams.nftAddress);\\n\\n        require(_bid.paymentTokenAddress == _acceptBidParams.paymentToken && _acceptBidParams.paymentToken == _paymentTokenForCollection, \\\"TreasureMarketplace: Wrong payment token\\\");\\n\\n        // Transfer NFT to buyer, also validates owner owns it, and token is approved for trading\\n        if(tokenApprovals[_acceptBidParams.nftAddress] == TokenApprovalStatus.ERC_721_APPROVED) {\\n            require(_acceptBidParams.quantity == 1, \\\"TreasureMarketplace: Cannot supply multiple ERC721s\\\");\\n\\n            IERC721Upgradeable(_acceptBidParams.nftAddress).safeTransferFrom(_msgSender(), _acceptBidParams.bidder, _acceptBidParams.tokenId);\\n        } else if (tokenApprovals[_acceptBidParams.nftAddress] == TokenApprovalStatus.ERC_1155_APPROVED) {\\n\\n            IERC1155Upgradeable(_acceptBidParams.nftAddress).safeTransferFrom(_msgSender(), _acceptBidParams.bidder, _acceptBidParams.tokenId, _acceptBidParams.quantity, bytes(\\\"\\\"));\\n        } else {\\n            revert(\\\"TreasureMarketplace: token is not approved for trading\\\");\\n        }\\n\\n        _payFees(_bid, _acceptBidParams.quantity, _acceptBidParams.nftAddress, _acceptBidParams.bidder, _msgSender(), _acceptBidParams.paymentToken, false);\\n\\n        if(priceTrackerAddress != address(0)) {\\n            ITreasureNFTPriceTracker(priceTrackerAddress).recordSale(_acceptBidParams.nftAddress, _acceptBidParams.tokenId, _bid.pricePerItem);\\n        }\\n\\n        // Announce accepting bid\\n        emit BidAccepted(\\n            _msgSender(),\\n            _acceptBidParams.bidder,\\n            _acceptBidParams.nftAddress,\\n            _acceptBidParams.tokenId,\\n            _acceptBidParams.quantity,\\n            _acceptBidParams.pricePerItem,\\n            _acceptBidParams.paymentToken,\\n            _bidType\\n        );\\n\\n        // Deplete or cancel listing\\n        _bid.quantity -= _acceptBidParams.quantity;\\n    }\\n\\n    /// @notice Buy multiple listed items. You must authorize this marketplace with your payment token to completed the buy or purchase with eth if it is a weth collection.\\n    function buyItems(\\n        BuyItemParams[] calldata _buyItemParams)\\n    external\\n    payable\\n    nonReentrant\\n    whenNotPaused\\n    {\\n        uint256 _ethAmountRequired;\\n        for(uint256 i = 0; i < _buyItemParams.length; i++) {\\n            _ethAmountRequired += _buyItem(_buyItemParams[i]);\\n        }\\n\\n        require(msg.value == _ethAmountRequired, \\\"TreasureMarketplace: Bad ETH value\\\");\\n    }\\n\\n    // Returns the amount of eth a user must have sent.\\n    function _buyItem(BuyItemParams calldata _buyItemParams) private returns(uint256) {\\n        // Validate buy order\\n        require(_msgSender() != _buyItemParams.owner, \\\"TreasureMarketplace: Cannot buy your own item\\\");\\n        require(_buyItemParams.quantity > 0, \\\"TreasureMarketplace: Nothing to buy\\\");\\n\\n        // Validate listing\\n        ListingOrBid memory listedItem = listings[_buyItemParams.nftAddress][_buyItemParams.tokenId][_buyItemParams.owner];\\n        require(listedItem.quantity > 0, \\\"TreasureMarketplace: not listed item\\\");\\n        require(listedItem.expirationTime >= block.timestamp, \\\"TreasureMarketplace: listing expired\\\");\\n        require(listedItem.pricePerItem > 0, \\\"TreasureMarketplace: listing price invalid\\\");\\n        require(listedItem.quantity >= _buyItemParams.quantity, \\\"TreasureMarketplace: not enough quantity\\\");\\n        require(listedItem.pricePerItem <= _buyItemParams.maxPricePerItem, \\\"TreasureMarketplace: price increased\\\");\\n\\n        // Ensure the buyer, the seller, and the collection all agree on the token to be used for the purchase.\\n        // If the token used for buying/selling has changed since the listing was created, this effectively blocks\\n        // all the old listings with the old payment tokens from being bought.\\n        address _paymentTokenForCollection = getPaymentTokenForCollection(_buyItemParams.nftAddress);\\n        address _paymentTokenForListing = _getPaymentTokenForListing(listedItem);\\n\\n        require(_paymentTokenForListing == _buyItemParams.paymentToken && _buyItemParams.paymentToken == _paymentTokenForCollection, \\\"TreasureMarketplace: Wrong payment token\\\");\\n\\n        if(_buyItemParams.usingEth) {\\n            require(_paymentTokenForListing == address(weth), \\\"TreasureMarketplace: ETH only used with weth collection\\\");\\n        }\\n\\n        // Transfer NFT to buyer, also validates owner owns it, and token is approved for trading\\n        if (tokenApprovals[_buyItemParams.nftAddress] == TokenApprovalStatus.ERC_721_APPROVED) {\\n            require(_buyItemParams.quantity == 1, \\\"TreasureMarketplace: Cannot buy multiple ERC721\\\");\\n            IERC721Upgradeable(_buyItemParams.nftAddress).safeTransferFrom(_buyItemParams.owner, _msgSender(), _buyItemParams.tokenId);\\n        } else if (tokenApprovals[_buyItemParams.nftAddress] == TokenApprovalStatus.ERC_1155_APPROVED) {\\n            IERC1155Upgradeable(_buyItemParams.nftAddress).safeTransferFrom(_buyItemParams.owner, _msgSender(), _buyItemParams.tokenId, _buyItemParams.quantity, bytes(\\\"\\\"));\\n        } else {\\n            revert(\\\"TreasureMarketplace: token is not approved for trading\\\");\\n        }\\n\\n        _payFees(listedItem, _buyItemParams.quantity, _buyItemParams.nftAddress, _msgSender(), _buyItemParams.owner, _buyItemParams.paymentToken, _buyItemParams.usingEth);\\n\\n        // Announce sale\\n        emit ItemSold(\\n            _buyItemParams.owner,\\n            _msgSender(),\\n            _buyItemParams.nftAddress,\\n            _buyItemParams.tokenId,\\n            _buyItemParams.quantity,\\n            listedItem.pricePerItem, // this is deleted below in \\\"Deplete or cancel listing\\\"\\n            _buyItemParams.paymentToken\\n        );\\n\\n        // Deplete or cancel listing\\n        if (listedItem.quantity == _buyItemParams.quantity) {\\n            delete listings[_buyItemParams.nftAddress][_buyItemParams.tokenId][_buyItemParams.owner];\\n        } else {\\n            listings[_buyItemParams.nftAddress][_buyItemParams.tokenId][_buyItemParams.owner].quantity -= _buyItemParams.quantity;\\n        }\\n        \\n        if(priceTrackerAddress != address(0)) {\\n            ITreasureNFTPriceTracker(priceTrackerAddress).recordSale(_buyItemParams.nftAddress, _buyItemParams.tokenId, listedItem.pricePerItem);\\n        }\\n\\n        if(_buyItemParams.usingEth) {\\n            return _buyItemParams.quantity * listedItem.pricePerItem;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @dev pays the fees to the marketplace fee recipient, the collection recipient if one exists, and to the seller of the item.\\n    /// @param _listOrBid the item that is being purchased/accepted\\n    /// @param _quantity the quantity of the item being purchased/accepted\\n    /// @param _collectionAddress the collection to which this item belongs\\n    function _payFees(ListingOrBid memory _listOrBid, uint256 _quantity, address _collectionAddress, address _from, address _to, address _paymentTokenAddress, bool _usingEth) private {\\n        IERC20Upgradeable _paymentToken = IERC20Upgradeable(_paymentTokenAddress);\\n\\n        // Handle purchase price payment\\n        uint256 _totalPrice = _listOrBid.pricePerItem * _quantity;\\n\\n        address _collectionFeeRecipient = collectionToCollectionOwnerFee[_collectionAddress].recipient;\\n\\n        uint256 _protocolFee;\\n        uint256 _collectionFee;\\n\\n        if(_collectionFeeRecipient != address(0)) {\\n            _protocolFee = feeWithCollectionOwner;\\n            _collectionFee = collectionToCollectionOwnerFee[_collectionAddress].fee;\\n        } else {\\n            _protocolFee = fee;\\n            _collectionFee = 0;\\n        }\\n\\n        uint256 _protocolFeeAmount = _totalPrice * _protocolFee / BASIS_POINTS;\\n        uint256 _collectionFeeAmount = _totalPrice * _collectionFee / BASIS_POINTS;\\n\\n        _transferAmount(_from, feeReceipient, _protocolFeeAmount, _paymentToken, _usingEth);\\n        _transferAmount(_from, _collectionFeeRecipient, _collectionFeeAmount, _paymentToken, _usingEth);\\n\\n        // Transfer rest to seller\\n        _transferAmount(_from, _to, _totalPrice - _protocolFeeAmount - _collectionFeeAmount, _paymentToken, _usingEth);\\n    }\\n\\n    function _transferAmount(address _from, address _to, uint256 _amount, IERC20Upgradeable _paymentToken, bool _usingEth) private {\\n        if(_amount == 0) {\\n            return;\\n        }\\n\\n        if(_usingEth) {\\n            (bool _success,) = payable(_to).call{value: _amount}(\\\"\\\");\\n            require(_success, \\\"TreasureMarketplace: Sending eth was not successful\\\");\\n        } else {\\n            _paymentToken.safeTransferFrom(_from, _to, _amount);\\n        }\\n    }\\n\\n    function getPaymentTokenForCollection(address _collection) public view returns(address) {\\n        address _collectionPaymentToken = collectionToPaymentToken[_collection];\\n\\n        // For backwards compatability. If a collection payment wasn't set at the collection level, it was using the payment token.\\n        return _collectionPaymentToken == address(0) ? address(paymentToken) : _collectionPaymentToken;\\n    }\\n\\n    function _getPaymentTokenForListing(ListingOrBid memory listedItem) private view returns(address) {\\n        // For backwards compatability. If a listing has no payment token address, it was using the original, default payment token.\\n        return listedItem.paymentTokenAddress == address(0) ? address(paymentToken) : listedItem.paymentTokenAddress;\\n    }\\n\\n    // Owner administration ////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice Updates the fee amount which is collected during sales, for both collections with and without owner specific fees.\\n    /// @dev    This is callable only by the owner. Both fees may not exceed MAX_FEE\\n    /// @param  _newFee the updated fee amount is basis points\\n    function setFee(uint256 _newFee, uint256 _newFeeWithCollectionOwner) public onlyRole(TREASURE_MARKETPLACE_ADMIN_ROLE) {\\n        require(_newFee <= MAX_FEE && _newFeeWithCollectionOwner <= MAX_FEE, \\\"TreasureMarketplace: max fee\\\");\\n\\n        fee = _newFee;\\n        feeWithCollectionOwner = _newFeeWithCollectionOwner;\\n\\n        emit UpdateFee(_newFee);\\n        emit UpdateFeeWithCollectionOwner(_newFeeWithCollectionOwner);\\n    }\\n\\n    /// @notice Updates the fee amount which is collected during sales fro a specific collection\\n    /// @dev    This is callable only by the owner\\n    /// @param  _collectionAddress The collection in question. This must be whitelisted.\\n    /// @param _collectionOwnerFee The fee and recipient for the collection. If the 0 address is passed as the recipient, collection specific fees will not be collected.\\n    function setCollectionOwnerFee(address _collectionAddress, CollectionOwnerFee calldata _collectionOwnerFee) external onlyRole(TREASURE_MARKETPLACE_ADMIN_ROLE) {\\n        require(tokenApprovals[_collectionAddress] == TokenApprovalStatus.ERC_1155_APPROVED\\n            || tokenApprovals[_collectionAddress] == TokenApprovalStatus.ERC_721_APPROVED, \\\"TreasureMarketplace: Collection is not approved\\\");\\n        require(_collectionOwnerFee.fee <= MAX_COLLECTION_FEE, \\\"TreasureMarketplace: Collection fee too high\\\");\\n\\n        // The collection recipient can be the 0 address, meaning we will treat this as a collection with no collection owner fee.\\n        collectionToCollectionOwnerFee[_collectionAddress] = _collectionOwnerFee;\\n\\n        emit UpdateCollectionOwnerFee(_collectionAddress, _collectionOwnerFee.recipient, _collectionOwnerFee.fee);\\n    }\\n\\n    /// @notice Updates the fee recipient which receives fees during sales\\n    /// @dev    This is callable only by the owner.\\n    /// @param  _newFeeRecipient the wallet to receive fees\\n    function setFeeRecipient(address _newFeeRecipient) public onlyRole(TREASURE_MARKETPLACE_ADMIN_ROLE) {\\n        require(_newFeeRecipient != address(0), \\\"TreasureMarketplace: cannot set 0x0 address\\\");\\n        feeReceipient = _newFeeRecipient;\\n        emit UpdateFeeRecipient(_newFeeRecipient);\\n    }\\n\\n    /// @notice Sets a token as an approved kind of NFT or as ineligible for trading\\n    /// @dev    This is callable only by the owner.\\n    /// @param  _nft    address of the NFT to be approved\\n    /// @param  _status the kind of NFT approved, or NOT_APPROVED to remove approval\\n    function setTokenApprovalStatus(address _nft, TokenApprovalStatus _status, address _paymentToken) external onlyRole(TREASURE_MARKETPLACE_ADMIN_ROLE) {\\n        if (_status == TokenApprovalStatus.ERC_721_APPROVED) {\\n            require(IERC165Upgradeable(_nft).supportsInterface(INTERFACE_ID_ERC721), \\\"TreasureMarketplace: not an ERC721 contract\\\");\\n        } else if (_status == TokenApprovalStatus.ERC_1155_APPROVED) {\\n            require(IERC165Upgradeable(_nft).supportsInterface(INTERFACE_ID_ERC1155), \\\"TreasureMarketplace: not an ERC1155 contract\\\");\\n        }\\n\\n        require(_paymentToken != address(0) && (_paymentToken == address(weth) || _paymentToken == address(paymentToken)), \\\"TreasureMarketplace: Payment token not supported\\\");\\n\\n        tokenApprovals[_nft] = _status;\\n\\n        collectionToPaymentToken[_nft] = _paymentToken;\\n        emit TokenApprovalStatusUpdated(_nft, _status, _paymentToken);\\n    }\\n\\n    function setWeth(address _wethAddress) external onlyRole(TREASURE_MARKETPLACE_ADMIN_ROLE) {\\n        require(_wethAddress != address(0), '_wethAddress cannot be null address');\\n        weth = IERC20Upgradeable(_wethAddress);\\n    }\\n\\n    function setPaymentToken(address _paymentToken) external onlyRole(TREASURE_MARKETPLACE_ADMIN_ROLE) {\\n        require(_paymentToken != address(0), '_paymentToken cannot be null address');\\n        paymentToken = IERC20Upgradeable(_paymentToken);\\n    }\\n\\n    /// @notice Updates the fee recipient which receives fees during sales\\n    /// @dev    This is callable only by the owner.\\n    /// @param  _priceTrackerAddress the wallet to receive fees\\n    function setPriceTracker(address _priceTrackerAddress) public onlyRole(TREASURE_MARKETPLACE_ADMIN_ROLE) {\\n        require(_priceTrackerAddress != address(0), \\\"TreasureMarketplace: cannot set 0x0 address\\\");\\n        priceTrackerAddress = _priceTrackerAddress;\\n        emit UpdateSalesTracker(_priceTrackerAddress);\\n    }\\n\\n    function toggleAreBidsActive() external onlyRole(TREASURE_MARKETPLACE_ADMIN_ROLE) {\\n        areBidsActive = !areBidsActive;\\n    }\\n\\n    /// @notice Pauses the marketplace, creatisgn and executing listings is paused\\n    /// @dev    This is callable only by the owner. Canceling listings is not paused.\\n    function pause() external onlyRole(TREASURE_MARKETPLACE_ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses the marketplace, all functionality is restored\\n    /// @dev    This is callable only by the owner.\\n    function unpause() external onlyRole(TREASURE_MARKETPLACE_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    modifier whenBiddingActive() {\\n        require(areBidsActive, \\\"TreasureMarketplace: Bidding is not active\\\");\\n\\n        _;\\n    }\\n}\\n\\nstruct BuyItemParams {\\n    /// which token contract holds the offered token\\n    address nftAddress;\\n    /// the identifier for the token to be bought\\n    uint256 tokenId;\\n    /// current owner of the item(s) to be bought\\n    address owner;\\n    /// how many of this token identifier to be bought (or 1 for a ERC-721 token)\\n    uint64 quantity;\\n    /// the maximum price (in units of the paymentToken) for each token offered\\n    uint128 maxPricePerItem;\\n    /// the payment token to be used\\n    address paymentToken;\\n    /// indicates if the user is purchasing this item with eth.\\n    bool usingEth;\\n}\\n\\nstruct AcceptBidParams {\\n    // Which token contract holds the given tokens\\n    address nftAddress;\\n    // The token id being given\\n    uint256 tokenId;\\n    // The user who created the bid initially\\n    address bidder;\\n    // The quantity of items being supplied to the bidder\\n    uint64 quantity;\\n    // The price per item that the bidder is offering\\n    uint128 pricePerItem;\\n    /// the payment token to be used\\n    address paymentToken;\\n}\\n\\nstruct CancelBidParams {\\n    BidType bidType;\\n    address nftAddress;\\n    uint256 tokenId;\\n}\\n\\nenum BidType {\\n    TOKEN,\\n    COLLECTION\\n}\\n\",\"keccak256\":\"0x786f848b778fa57aac773e41f60b48423f14156afa8a5481df34be1794e7147c\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasureNFTPriceTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface ITreasureNFTPriceTracker {\\n    event AveragePriceUpdated(\\n        address indexed _collection,\\n        FloorType indexed _floorType,\\n        uint256 _oldAverage,\\n        uint256 _salePrice,\\n        uint256 _newAverage\\n    );\\n\\n    // Saves the given sale of a token in a collection if it meets the saving criteria.\\n    function recordSale(address _collection, uint256 _tokenId, uint256 _salePrice) external;\\n    // Returns the average price for the given collection in the floor type category.\\n    // Can return 0 if asking for a FloorType that isn't being tracked for that given collection\\n    function getAveragePriceForCollection(address _collection, FloorType _floorType) external view returns (uint256);\\n}\\n\\n// Allows for customization within tracking floor prices\\n// Ex: Tracking legion genesis commons could be subfloor1, genesis uncommons subfloor2, etc\\nenum FloorType {\\n    FLOOR,\\n    SUBFLOOR1,\\n    SUBFLOOR2,\\n    SUBFLOOR3\\n}\",\"keccak256\":\"0x508dd050624134cd87d4f87c621a83de371737d4969191fb906fa228ce926384\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b506200010b565b6000620000f630620000fc60201b620023ff1760201c565b15905090565b6001600160a01b03163b151590565b615921806200011b6000396000f3fe6080604052600436106102e45760003560e01c806384fa314611610190578063b8d1452f116100dc578063d547741f11610095578063e74b981b1161006f578063e74b981b146109fc578063e76c171314610a1c578063e8a5f20014610a5a578063f4930d3e14610ac557600080fd5b8063d547741f146109af578063ddca3f43146109cf578063e1f1c4a7146109e657600080fd5b8063b8d1452f146108a1578063bc063e1a146108c1578063c564e3a1146108d7578063c5da1183146108f7578063c7cbcb3e14610917578063ca15c8731461098f57600080fd5b806398803a8311610149578063a217fddf11610123578063a217fddf14610834578063ad9f20a614610849578063b2ddee0614610861578063b4988fd01461088157600080fd5b806398803a831461078f5780639a867aab14610801578063a07076b21461082157600080fd5b806384fa3146146106c25780638852e220146106e25780638dce8eae146107195780639010d07c1461073957806391d14854146107595780639858bc9f1461077957600080fd5b80633f4ba83a1161024f5780635c975abb116102085780636bd3a64b116101e25780636bd3a64b146105bc578063785a8678146106765780637945e9441461068d5780638456cb59146106ad57600080fd5b80635c975abb14610564578063656b67ad1461057c5780636a326ab11461059c57600080fd5b80633f4ba83a146104b95780633fc8cef3146104ce57806344c7f047146104ef5780634aecaa25146105045780634e96358d1461052457806352f7c9881461054457600080fd5b8063248a9ca3116102a1578063248a9ca3146103d95780632c452098146104175780632f2ff15d146104375780633013ce291461045757806336568abe146104785780633740ebb31461049857600080fd5b806301ffc9a7146102e9578063083aded71461031e578063101e1c0214610339578063126080e914610377578063143f05e11461039957806319d89436146103b9575b600080fd5b3480156102f557600080fd5b50610309610304366004614c35565b610ae7565b60405190151581526020015b60405180910390f35b34801561032a57600080fd5b50610138546103099060ff1681565b34801561034557600080fd5b506101385461035f9061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610315565b34801561038357600080fd5b50610397610392366004614c5f565b610b12565b005b3480156103a557600080fd5b506103976103b4366004614d1b565b610bfc565b3480156103c557600080fd5b506103976103d4366004614d8e565b610c62565b3480156103e557600080fd5b506104096103f4366004614dcf565b60009081526065602052604090206001015490565b604051908152602001610315565b34801561042357600080fd5b50610397610432366004614d1b565b610e5d565b34801561044357600080fd5b50610397610452366004614de8565b611127565b34801561046357600080fd5b5061012d5461035f906001600160a01b031681565b34801561048457600080fd5b50610397610493366004614de8565b611152565b3480156104a457600080fd5b5061012f5461035f906001600160a01b031681565b3480156104c557600080fd5b506103976111d0565b3480156104da57600080fd5b506101355461035f906001600160a01b031681565b3480156104fb57600080fd5b506103976111f4565b34801561051057600080fd5b5061039761051f366004614e18565b611223565b34801561053057600080fd5b5061039761053f366004614e7a565b611437565b34801561055057600080fd5b5061039761055f366004614ec9565b611778565b34801561057057600080fd5b5060c95460ff16610309565b34801561058857600080fd5b50610397610597366004614eeb565b611860565b3480156105a857600080fd5b506103976105b7366004614f03565b6118e1565b3480156105c857600080fd5b506106346105d7366004614f20565b610130602090815260009384526040808520825292845282842090528252902080546001909101546001600160401b03808316926001600160801b03600160401b82041692600160c01b909104909116906001600160a01b031684565b604080516001600160401b0395861681526001600160801b0394909416602085015291909316908201526001600160a01b039091166060820152608001610315565b34801561068257600080fd5b506104096101325481565b34801561069957600080fd5b5061035f6106a8366004614f03565b611980565b3480156106b957600080fd5b506103976119bf565b3480156106ce57600080fd5b506103976106dd366004614eeb565b6119e0565b3480156106ee57600080fd5b5061035f6106fd366004614f03565b610134602052600090815260409020546001600160a01b031681565b34801561072557600080fd5b50610397610734366004614f03565b611a59565b34801561074557600080fd5b5061035f610754366004614ec9565b611af7565b34801561076557600080fd5b50610309610774366004614de8565b611b0f565b34801561078557600080fd5b506104096107d081565b34801561079b57600080fd5b506106346107aa366004614f57565b610137602090815260009283526040808420909152908252902080546001909101546001600160401b03808316926001600160801b03600160401b82041692600160c01b909104909116906001600160a01b031684565b34801561080d57600080fd5b5061039761081c366004614d1b565b611b3a565b61039761082f366004614f85565b611c0c565b34801561084057600080fd5b50610409600081565b34801561085557600080fd5b50610409633b9aca0081565b34801561086d57600080fd5b5061039761087c366004614fe7565b611cfc565b34801561088d57600080fd5b5061039761089c366004615013565b611d95565b3480156108ad57600080fd5b506103976108bc366004614f03565b611f31565b3480156108cd57600080fd5b506104096105dc81565b3480156108e357600080fd5b506103976108f236600461503a565b611fd0565b34801561090357600080fd5b50610397610912366004614d1b565b612225565b34801561092357600080fd5b50610634610932366004614f20565b610136602090815260009384526040808520825292845282842090528252902080546001909101546001600160401b03808316926001600160801b03600160401b82041692600160c01b909104909116906001600160a01b031684565b34801561099b57600080fd5b506104096109aa366004614dcf565b612334565b3480156109bb57600080fd5b506103976109ca366004614de8565b61234b565b3480156109db57600080fd5b5061040961012e5481565b3480156109f257600080fd5b5061040961271081565b348015610a0857600080fd5b50610397610a17366004614f03565b612371565b348015610a2857600080fd5b50610a4d610a37366004614f03565b6101316020526000908152604090205460ff1681565b60405161031591906150cf565b348015610a6657600080fd5b50610aa1610a75366004614f03565b6101336020526000908152604090205463ffffffff81169064010000000090046001600160a01b031682565b6040805163ffffffff90931683526001600160a01b03909116602083015201610315565b348015610ad157600080fd5b506104096000805160206158cc83398151915281565b60006001600160e01b03198216635a05180f60e01b1480610b0c5750610b0c8261240e565b92915050565b600260fb541415610b3e5760405162461bcd60e51b8152600401610b35906150dd565b60405180910390fd5b600260fb5560c95460ff1615610b665760405162461bcd60e51b8152600401610b3590615114565b60005b81811015610bf25736838383818110610b8457610b8461513e565b60c002919091019150610be99050610b9f6020830183614f03565b6020830135610bb46060850160408601615154565b610bc4608086016060870161516f565b610bd460a0870160808801615154565b610be460c0880160a08901614f03565b612443565b50600101610b69565b5050600160fb5550565b600260fb541415610c1f5760405162461bcd60e51b8152600401610b35906150dd565b600260fb5560c95460ff1615610c475760405162461bcd60e51b8152600401610b3590615114565b610c55868686868686612443565b5050600160fb5550505050565b6000805160206158cc833981519152610c7b8133612524565b60026001600160a01b0384166000908152610131602052604090205460ff166002811115610cab57610cab6150a5565b1480610ce4575060016001600160a01b0384166000908152610131602052604090205460ff166002811115610ce257610ce26150a5565b145b610d485760405162461bcd60e51b815260206004820152602f60248201527f54726561737572654d61726b6574706c6163653a20436f6c6c656374696f6e2060448201526e1a5cc81b9bdd08185c1c1c9bdd9959608a1b6064820152608401610b35565b6107d0610d58602084018461519c565b63ffffffff161115610dc15760405162461bcd60e51b815260206004820152602c60248201527f54726561737572654d61726b6574706c6163653a20436f6c6c656374696f6e2060448201526b0cccaca40e8dede40d0d2ced60a31b6064820152608401610b35565b6001600160a01b0383166000908152610133602052604090208290610de682826151b9565b507f67fec56f6f9c18f46aafdc92ee08968b7cac01e9e5b3dbdd485415acf0e9773e905083610e1b6040850160208601614f03565b610e28602086018661519c565b604080516001600160a01b03948516815293909216602084015263ffffffff16908201526060015b60405180910390a1505050565b600260fb541415610e805760405162461bcd60e51b8152600401610b35906150dd565b600260fb5560c95460ff1615610ea85760405162461bcd60e51b8152600401610b3590615114565b6101385460ff16610ecb5760405162461bcd60e51b8152600401610b3590615212565b60016001600160a01b0387166000908152610131602052604090205460ff166002811115610efb57610efb6150a5565b1415610f7c57836001600160401b0316600114610f775760405162461bcd60e51b815260206004820152603460248201527f54726561737572654d61726b6574706c6163653a20746f6b656e20626964207160448201527375616e74697479203120666f722045524337323160601b6064820152608401610b35565b61107c565b60026001600160a01b0387166000908152610131602052604090205460ff166002811115610fac57610fac6150a5565b1415611015576000846001600160401b031611610f775760405162461bcd60e51b815260206004820152602160248201527f54726561737572654d61726b6574706c6163653a20626164207175616e7469746044820152607960f81b6064820152608401610b35565b60405162461bcd60e51b815260206004820152603660248201527f54726561737572654d61726b6574706c6163653a20746f6b656e206973206e6f6044820152757420617070726f76656420666f722074726164696e6760501b6064820152608401610b35565b6001600160a01b03861660009081526101366020908152604080832088845290915281206110d6918891879187918791879190335b6001600160a01b03166001600160a01b03168152602001908152602001600020612588565b7faa16fd3f89fcc221b55be8ebd56c20abf3a580c60a83d5de297e0edf750aeae8335b878787878787604051611112979695949392919061525c565b60405180910390a15050600160fb5550505050565b6000828152606560205260409020600101546111438133612524565b61114d8383612867565b505050565b6001600160a01b03811633146111c25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610b35565b6111cc8282612889565b5050565b6000805160206158cc8339815191526111e98133612524565b6111f16128ab565b50565b6000805160206158cc83398151915261120d8133612524565b50610138805460ff19811660ff90911615179055565b600260fb5414156112465760405162461bcd60e51b8152600401610b35906150dd565b600260fb5560005b81811015610bf257368383838181106112695761126961513e565b6060029190910191506001905061128360208301836152ae565b6001811115611294576112946150a5565b141561136b576000610137816112b06040850160208601614f03565b6001600160a01b03166001600160a01b0316815260200190815260200160002060006112d93390565b6001600160a01b031681526020810191909152604001600020805467ffffffffffffffff19166001600160401b03929092169190911790557ff5913151c29e184e3a477be2274f0b06b63cd67c1ab11e1cc103d25701cfbdf2336113436040840160208501614f03565b604080516001600160a01b0393841681529290911660208301520160405180910390a1611424565b6000610136816113816040850160208601614f03565b6001600160a01b0316815260208082019290925260409081016000908120858301803583529084528282203380845290855292909120805467ffffffffffffffff19166001600160401b0395909516949094179093557fc98088fb062dda614ae7304b89526258370705c2646039e06beff408428a6b9c92909161140791908501614f03565b836040013560405161141b939291906152cf565b60405180910390a15b508061142f81615309565b91505061124e565b6000805160206158cc8339815191526114508133612524565b6001836002811115611464576114646150a5565b141561153e576040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa1580156114b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d99190615332565b6115395760405162461bcd60e51b815260206004820152602b60248201527f54726561737572654d61726b6574706c6163653a206e6f7420616e204552433760448201526a0c8c4818dbdb9d1c9858dd60aa1b6064820152608401610b35565b611628565b6002836002811115611552576115526150a5565b1415611628576040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa1580156115a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c79190615332565b6116285760405162461bcd60e51b815260206004820152602c60248201527f54726561737572654d61726b6574706c6163653a206e6f7420616e204552433160448201526b0c4d4d4818dbdb9d1c9858dd60a21b6064820152608401610b35565b6001600160a01b038216158015906116665750610135546001600160a01b0383811691161480611666575061012d546001600160a01b038381169116145b6116cb5760405162461bcd60e51b815260206004820152603060248201527f54726561737572654d61726b6574706c6163653a205061796d656e7420746f6b60448201526f195b881b9bdd081cdd5c1c1bdc9d195960821b6064820152608401610b35565b6001600160a01b038416600090815261013160205260409020805484919060ff19166001836002811115611701576117016150a5565b02179055506001600160a01b03848116600090815261013460205260409081902080546001600160a01b03191692851692909217909155517f876079e5f28457db5d4f19b6a15569030a7512eb4308523b27062fa6998baeab9061176a9086908690869061534f565b60405180910390a150505050565b6000805160206158cc8339815191526117918133612524565b6105dc83111580156117a557506105dc8211155b6117f15760405162461bcd60e51b815260206004820152601c60248201527f54726561737572654d61726b6574706c6163653a206d617820666565000000006044820152606401610b35565b61012e8390556101328290556040518381527f38e229a7f3f9c329892d08eb37c4e91ccac6d12c798d394990ca4f56028ec2669060200160405180910390a16040518281527f32837ab65d8583d89ac1b66920de55975eb33cbc0fbf00f2123197ce3b62c63e90602001610e50565b600260fb5414156118835760405162461bcd60e51b8152600401610b35906150dd565b600260fb5560c95460ff16156118ab5760405162461bcd60e51b8152600401610b3590615114565b6101385460ff166118ce5760405162461bcd60e51b8152600401610b3590615212565b6118d981600161293e565b50600160fb55565b6000805160206158cc8339815191526118fa8133612524565b6001600160a01b03821661195c5760405162461bcd60e51b8152602060048201526024808201527f5f7061796d656e74546f6b656e2063616e6e6f74206265206e756c6c206164646044820152637265737360e01b6064820152608401610b35565b5061012d80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038082166000908152610134602052604081205490911680156119aa57806119b8565b61012d546001600160a01b03165b9392505050565b6000805160206158cc8339815191526119d88133612524565b6111f161320f565b600260fb541415611a035760405162461bcd60e51b8152600401610b35906150dd565b600260fb5560c95460ff1615611a2b5760405162461bcd60e51b8152600401610b3590615114565b6101385460ff16611a4e5760405162461bcd60e51b8152600401610b3590615212565b6118d981600061293e565b6000805160206158cc833981519152611a728133612524565b6001600160a01b038216611a985760405162461bcd60e51b8152600401610b359061537f565b6101388054610100600160a81b0319166101006001600160a01b038516908102919091179091556040519081527fff578b2d68bd5715dc8d6a50dd990e7b5500f2849738885bbd03241447090e5a906020015b60405180910390a15050565b60008281526097602052604081206119b89083613267565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600260fb541415611b5d5760405162461bcd60e51b8152600401610b35906150dd565b600260fb5560c95460ff1615611b855760405162461bcd60e51b8152600401610b3590615114565b6001600160a01b03861660009081526101306020908152604080832088845282528083203384529091529020546001600160401b0316611bd75760405162461bcd60e51b8152600401610b35906153ca565b611be5868686868686613273565b7fde1951e410d2f4644b8dd23d6b9e5d2e862b417055f42e3939ab16b4635ec6de336110f9565b600260fb541415611c2f5760405162461bcd60e51b8152600401610b35906150dd565b600260fb5560c95460ff1615611c575760405162461bcd60e51b8152600401610b3590615114565b6000805b82811015611ca157611c83848483818110611c7857611c7861513e565b905060e00201613801565b611c8d908361540e565b915080611c9981615309565b915050611c5b565b50803414610bf25760405162461bcd60e51b815260206004820152602260248201527f54726561737572654d61726b6574706c6163653a20426164204554482076616c604482015261756560f01b6064820152608401610b35565b600260fb541415611d1f5760405162461bcd60e51b8152600401610b35906150dd565b600260fb556001600160a01b038216600081815261013060209081526040808320858452825280832033808552925280832083815560010180546001600160a01b0319169055518493927f9ba1a3cb55ce8d63d072a886f94d2a744f50cddf82128e897d0661f5ec62315891a45050600160fb55565b600054610100900460ff16611db05760005460ff1615611db4565b303b155b611e175760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b35565b600054610100900460ff16158015611e39576000805461ffff19166101011790555b6001600160a01b038216611ea25760405162461bcd60e51b815260206004820152602a60248201527f54726561737572654d61726b6574706c6163653a2063616e6e6f7420736574206044820152696164647265737328302960b01b6064820152608401610b35565b611eaa61425d565b611eb2614286565b611eba6142b9565b611ed26000805160206158cc833981519152806142e7565b611eea6000805160206158cc83398151915233612867565b611ef48485611778565b611efd83612371565b61012d80546001600160a01b0319166001600160a01b0384161790558015611f2b576000805461ff00191690555b50505050565b6000805160206158cc833981519152611f4a8133612524565b6001600160a01b038216611fac5760405162461bcd60e51b815260206004820152602360248201527f5f77657468416464726573732063616e6e6f74206265206e756c6c206164647260448201526265737360e81b6064820152608401610b35565b5061013580546001600160a01b0319166001600160a01b0392909216919091179055565b600260fb541415611ff35760405162461bcd60e51b8152600401610b35906150dd565b600260fb5560c95460ff161561201b5760405162461bcd60e51b8152600401610b3590615114565b6101385460ff1661203e5760405162461bcd60e51b8152600401610b3590615212565b60016001600160a01b0386166000908152610131602052604090205460ff16600281111561206e5761206e6150a5565b14156120dc576000846001600160401b0316116120d75760405162461bcd60e51b815260206004820152602160248201527f54726561737572654d61726b6574706c6163653a20426164207175616e7469746044820152607960f81b6064820152608401610b35565b612173565b60026001600160a01b0386166000908152610131602052604090205460ff16600281111561210c5761210c6150a5565b14156110155760405162461bcd60e51b815260206004820152603060248201527f54726561737572654d61726b6574706c6163653a204e6f20636f6c6c6563746960448201526f6f6e2062696473206f6e20313135357360801b6064820152608401610b35565b6121aa858585858561013760008c6001600160a01b03166001600160a01b0316815260200190815260200160002060006110b13390565b604080513381526001600160a01b0387811660208301526001600160401b03878116838501526001600160801b038716606084015285166080830152831660a082015290517f9f6945ee84d160722b736d12d84f9f3349075d2c78064575b40620be21bf6eef9181900360c00190a15050600160fb55505050565b600260fb5414156122485760405162461bcd60e51b8152600401610b35906150dd565b600260fb5560c95460ff16156122705760405162461bcd60e51b8152600401610b3590615114565b6001600160a01b03861660009081526101306020908152604080832088845282528083203384529091529020546001600160401b0316156122ff5760405162461bcd60e51b815260206004820152602360248201527f54726561737572654d61726b6574706c6163653a20616c7265616479206c69736044820152621d195960ea1b6064820152608401610b35565b61230d868686868686613273565b7fb21f4a0122c6667aa16da06fcb7d9d3b2688164dfb40b7253aed80ea36d88e99336110f9565b6000818152609760205260408120610b0c90614332565b6000828152606560205260409020600101546123678133612524565b61114d8383612889565b6000805160206158cc83398151915261238a8133612524565b6001600160a01b0382166123b05760405162461bcd60e51b8152600401610b359061537f565b61012f80546001600160a01b0319166001600160a01b0384169081179091556040519081527f6632de8ab33c46549f7bb29f647ea0d751157b25fe6a14b1bcc7527cdfbeb79c90602001611aeb565b6001600160a01b03163b151590565b60006001600160e01b03198216637965db0b60e01b1480610b0c57506301ffc9a760e01b6001600160e01b0319831614610b0c565b6001600160a01b03861660009081526101306020908152604080832088845282528083203384529091529020546001600160401b03161515612489878787878787613273565b80156124d7577fde1951e410d2f4644b8dd23d6b9e5d2e862b417055f42e3939ab16b4635ec6de338888888888886040516124ca979695949392919061525c565b60405180910390a161251b565b7fb21f4a0122c6667aa16da06fcb7d9d3b2688164dfb40b7253aed80ea36d88e9933888888888888604051612512979695949392919061525c565b60405180910390a15b50505050505050565b61252e8282611b0f565b6111cc57612546816001600160a01b0316601461433c565b61255183602061433c565b604051602001612562929190615452565b60408051601f198184030181529082905262461bcd60e51b8252610b35916004016154f3565b42836001600160401b0316116125b05760405162461bcd60e51b8152600401610b3590615506565b633b9aca00846001600160801b031610156125dd5760405162461bcd60e51b8152600401610b3590615552565b60006125e887611980565b9050826001600160a01b0316816001600160a01b03161461265a5760405162461bcd60e51b815260206004820152602660248201527f54726561737572654d61726b6574706c6163653a20426164207061796d656e74604482015265103a37b5b2b760d11b6064820152608401610b35565b8260006126706001600160401b03891688615596565b6001600160801b03169050806001600160a01b03831663dd62ed3e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604401602060405180830381865afa1580156126d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fa91906155c5565b1015801561277f5750806001600160a01b0383166370a08231336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277c91906155c5565b10155b6127f15760405162461bcd60e51b815260206004820152603f60248201527f54726561737572654d61726b6574706c6163653a204e6f7420656e6f7567682060448201527f746f6b656e73206f776e6564206f7220616c6c6f77656420666f7220626964006064820152608401610b35565b505081546001600160401b03948516600160c01b026001600160c01b036001600160801b03909716600160401b026001600160c01b0319909216959097169490941793909317939093169390931782555060010180546001600160a01b039092166001600160a01b031990921691909117905550565b61287182826144d7565b600082815260976020526040902061114d908261455d565b6128938282614572565b600082815260976020526040902061114d90826145d9565b60c95460ff166128f45760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610b35565b60c9805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b61294e6060830160408401614f03565b6001600160a01b0316336001600160a01b031614156129c25760405162461bcd60e51b815260206004820152602a60248201527f54726561737572654d61726b6574706c6163653a2043616e6e6f7420737570706044820152691b1e481bdddb88189a5960b21b6064820152608401610b35565b60006129d46080840160608501615154565b6001600160401b031611612a435760405162461bcd60e51b815260206004820152603060248201527f54726561737572654d61726b6574706c6163653a204e6f7468696e6720746f2060448201526f39bab838363c903a37903134b23232b960811b6064820152608401610b35565b60006001826001811115612a5957612a596150a5565b14612adf576101366000612a706020860186614f03565b6001600160a01b03166001600160a01b031681526020019081526020016000206000846020013581526020019081526020016000206000846040016020810190612aba9190614f03565b6001600160a01b03166001600160a01b03168152602001908152602001600020612b47565b6101376000612af16020860186614f03565b6001600160a01b03166001600160a01b031681526020019081526020016000206000846040016020810190612b269190614f03565b6001600160a01b03166001600160a01b031681526020019081526020016000205b80549091506001600160401b0316612bb15760405162461bcd60e51b815260206004820152602760248201527f54726561737572654d61726b6574706c6163653a2062696420646f6573206e6f6044820152661d08195e1a5cdd60ca1b6064820152608401610b35565b805442600160c01b9091046001600160401b03161015612c135760405162461bcd60e51b815260206004820181905260248201527f54726561737572654d61726b6574706c6163653a2062696420657870697265646044820152606401610b35565b8054600160401b90046001600160801b0316612c805760405162461bcd60e51b815260206004820152602660248201527f54726561737572654d61726b6574706c6163653a2062696420707269636520696044820152651b9d985b1a5960d21b6064820152608401610b35565b612c906080840160608501615154565b81546001600160401b0391821691161015612cbd5760405162461bcd60e51b8152600401610b35906155de565b612ccd60a084016080850161516f565b8154600160401b90046001600160801b03908116911614612d425760405162461bcd60e51b815260206004820152602960248201527f54726561737572654d61726b6574706c6163653a20707269636520646f6573206044820152680dcdee840dac2e8c6d60bb1b6064820152608401610b35565b6000612d546106a86020860186614f03565b9050612d6660c0850160a08601614f03565b60018301546001600160a01b039081169116148015612da557506001600160a01b038116612d9a60c0860160a08701614f03565b6001600160a01b0316145b612dc15760405162461bcd60e51b8152600401610b3590615626565b60016101316000612dd56020880188614f03565b6001600160a01b0316815260208101919091526040016000205460ff166002811115612e0357612e036150a5565b1415612f1357612e196080850160608601615154565b6001600160401b0316600114612e8d5760405162461bcd60e51b815260206004820152603360248201527f54726561737572654d61726b6574706c6163653a2043616e6e6f7420737570706044820152726c79206d756c7469706c65204552433732317360681b6064820152608401610b35565b612e9a6020850185614f03565b6001600160a01b03166342842e0e33612eb96060880160408901614f03565b87602001356040518463ffffffff1660e01b8152600401612edc939291906152cf565b600060405180830381600087803b158015612ef657600080fd5b505af1158015612f0a573d6000803e3d6000fd5b50505050612fcc565b60026101316000612f276020880188614f03565b6001600160a01b0316815260208101919091526040016000205460ff166002811115612f5557612f556150a5565b141561101557612f686020850185614f03565b6001600160a01b031663f242432a33612f876060880160408901614f03565b6020880135612f9c60808a0160608b01615154565b604051806020016040528060008152506040518663ffffffff1660e01b8152600401612edc95949392919061566e565b604080516080808201835284546001600160401b0380821684526001600160801b03600160401b8304166020850152600160c01b909104169282019290925260018401546001600160a01b03166060808301919091526130739261303591908801908801615154565b6001600160401b031661304b6020880188614f03565b61305b6060890160408a01614f03565b3361306c60c08b0160a08c01614f03565b60006145ee565b6101385461010090046001600160a01b031615613129576101385461010090046001600160a01b031663086efe056130ae6020870187614f03565b845460405160e084901b6001600160e01b03191681526001600160a01b03909216600483015260208801356024830152600160401b90046001600160801b03166044820152606401600060405180830381600087803b15801561311057600080fd5b505af1158015613124573d6000803e3d6000fd5b505050505b7ff6b2b7813b1815a0e2e32964b4f22ec24862322d9c9c0e0eefac425dfc455ab13361315b6060870160408801614f03565b6131686020880188614f03565b602088013561317d60808a0160608b01615154565b61318d60a08b0160808c0161516f565b61319d60c08c0160a08d01614f03565b8a6040516131b29897969594939291906156b0565b60405180910390a16131ca6080850160608601615154565b825483906000906131e59084906001600160401b0316615721565b92506101000a8154816001600160401b0302191690836001600160401b0316021790555050505050565b60c95460ff16156132325760405162461bcd60e51b8152600401610b3590615114565b60c9805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586129213390565b60006119b88383614700565b42826001600160401b03161161329b5760405162461bcd60e51b8152600401610b3590615506565b633b9aca00836001600160801b031610156132c85760405162461bcd60e51b8152600401610b3590615552565b60016001600160a01b0387166000908152610131602052604090205460ff1660028111156132f8576132f86150a5565b14156134e15785336040516331a9108f60e11b8152600481018890526001600160a01b0391821691831690636352211e90602401602060405180830381865afa158015613349573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336d9190615749565b6001600160a01b0316146133cf5760405162461bcd60e51b8152602060048201526024808201527f54726561737572654d61726b6574706c6163653a206e6f74206f776e696e67206044820152636974656d60e01b6064820152608401610b35565b6001600160a01b03811663e985e9c5336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604401602060405180830381865afa158015613429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344d9190615332565b6134695760405162461bcd60e51b8152600401610b3590615766565b846001600160401b03166001146134db5760405162461bcd60e51b815260206004820152603060248201527f54726561737572654d61726b6574706c6163653a2063616e6e6f74206c69737460448201526f206d756c7469706c652045524337323160801b6064820152608401610b35565b50613700565b60026001600160a01b0387166000908152610131602052604090205460ff166002811115613511576135116150a5565b141561101557856001600160401b0385166001600160a01b03821662fdd58e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018a9052604401602060405180830381865afa15801561357c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a091906155c5565b10156136015760405162461bcd60e51b815260206004820152602a60248201527f54726561737572654d61726b6574706c6163653a206d75737420686f6c6420656044820152696e6f756768206e66747360b01b6064820152608401610b35565b6001600160a01b03811663e985e9c5336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604401602060405180830381865afa15801561365b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061367f9190615332565b61369b5760405162461bcd60e51b8152600401610b3590615766565b6000856001600160401b0316116134db5760405162461bcd60e51b8152602060048201526024808201527f54726561737572654d61726b6574706c6163653a206e6f7468696e6720746f206044820152631b1a5cdd60e21b6064820152608401610b35565b600061370b87611980565b9050816001600160a01b0316816001600160a01b03161461373e5760405162461bcd60e51b8152600401610b3590615626565b50604080516080810182526001600160401b0395861681526001600160801b0394851660208083019182529487168284019081526001600160a01b039485166060840190815299851660009081526101308752848120998152988652838920338a529095529190962095518654915193518616600160c01b026001600160c01b0394909516600160401b026001600160c01b03199092169516949094179390931716178255915160019091018054919092166001600160a01b0319909116179055565b60006138136060830160408401614f03565b6001600160a01b0316336001600160a01b0316141561388a5760405162461bcd60e51b815260206004820152602d60248201527f54726561737572654d61726b6574706c6163653a2043616e6e6f74206275792060448201526c796f7572206f776e206974656d60981b6064820152608401610b35565b600061389c6080840160608501615154565b6001600160401b0316116138fe5760405162461bcd60e51b815260206004820152602360248201527f54726561737572654d61726b6574706c6163653a204e6f7468696e6720746f2060448201526262757960e81b6064820152608401610b35565b6000610130816139116020860186614f03565b6001600160a01b03166001600160a01b03168152602001908152602001600020600084602001358152602001908152602001600020600084604001602081019061395b9190614f03565b6001600160a01b0390811682526020808301939093526040918201600020825160808101845281546001600160401b038082168084526001600160801b03600160401b84041697840197909752600160c01b90910416938101939093526001015416606082015291506139e05760405162461bcd60e51b8152600401610b35906153ca565b4281604001516001600160401b03161015613a495760405162461bcd60e51b8152602060048201526024808201527f54726561737572654d61726b6574706c6163653a206c697374696e67206578706044820152631a5c995960e21b6064820152608401610b35565b600081602001516001600160801b031611613ab95760405162461bcd60e51b815260206004820152602a60248201527f54726561737572654d61726b6574706c6163653a206c697374696e672070726960448201526918d9481a5b9d985b1a5960b21b6064820152608401610b35565b613ac96080840160608501615154565b6001600160401b031681600001516001600160401b03161015613afe5760405162461bcd60e51b8152600401610b35906155de565b613b0e60a084016080850161516f565b6001600160801b031681602001516001600160801b03161115613b7f5760405162461bcd60e51b8152602060048201526024808201527f54726561737572654d61726b6574706c6163653a20707269636520696e637265604482015263185cd95960e21b6064820152608401610b35565b6000613b916106a86020860186614f03565b90506000613b9e8361472a565b9050613bb060c0860160a08701614f03565b6001600160a01b0316816001600160a01b0316148015613bf057506001600160a01b038216613be560c0870160a08801614f03565b6001600160a01b0316145b613c0c5760405162461bcd60e51b8152600401610b3590615626565b613c1c60e0860160c087016157ac565b15613ca557610135546001600160a01b03828116911614613ca55760405162461bcd60e51b815260206004820152603760248201527f54726561737572654d61726b6574706c6163653a20455448206f6e6c7920757360448201527f65642077697468207765746820636f6c6c656374696f6e0000000000000000006064820152608401610b35565b60016101316000613cb96020890189614f03565b6001600160a01b0316815260208101919091526040016000205460ff166002811115613ce757613ce76150a5565b1415613df357613cfd6080860160608701615154565b6001600160401b0316600114613d6d5760405162461bcd60e51b815260206004820152602f60248201527f54726561737572654d61726b6574706c6163653a2043616e6e6f74206275792060448201526e6d756c7469706c652045524337323160881b6064820152608401610b35565b613d7a6020860186614f03565b6001600160a01b03166342842e0e613d986060880160408901614f03565b3388602001356040518463ffffffff1660e01b8152600401613dbc939291906152cf565b600060405180830381600087803b158015613dd657600080fd5b505af1158015613dea573d6000803e3d6000fd5b50505050613eac565b60026101316000613e076020890189614f03565b6001600160a01b0316815260208101919091526040016000205460ff166002811115613e3557613e356150a5565b141561101557613e486020860186614f03565b6001600160a01b031663f242432a613e666060880160408901614f03565b336020890135613e7c60808b0160608c01615154565b604051806020016040528060008152506040518663ffffffff1660e01b8152600401613dbc95949392919061566e565b613f0c83613ec06080880160608901615154565b6001600160401b0316613ed66020890189614f03565b33613ee760608b0160408c01614f03565b613ef760c08c0160a08d01614f03565b613f0760e08d0160c08e016157ac565b6145ee565b7f72d3f914473a393354e6fcd9c3cb7d2eee53924b9b856f9da274e024566292a5613f3d6060870160408801614f03565b33613f4b6020890189614f03565b6020890135613f6060808b0160608c01615154565b6020890151613f7560c08d0160a08e01614f03565b604080516001600160a01b03988916815296881660208801529487169486019490945260608501929092526001600160401b031660808401526001600160801b031660a083015290911660c082015260e00160405180910390a1613fdf6080860160608701615154565b6001600160401b031683600001516001600160401b0316141561408c57610130600061400e6020880188614f03565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008660200135815260200190815260200160002060008660400160208101906140589190614f03565b6001600160a01b031681526020810191909152604001600090812090815560010180546001600160a01b0319169055614151565b61409c6080860160608701615154565b61013060006140ae6020890189614f03565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008760200135815260200190815260200160002060008760400160208101906140f89190614f03565b6001600160a01b0316815260208101919091526040016000908120805490919061412c9084906001600160401b0316615721565b92506101000a8154816001600160401b0302191690836001600160401b031602179055505b6101385461010090046001600160a01b031615614203576101385461010090046001600160a01b031663086efe0561418c6020880188614f03565b6020868101516040516001600160e01b031960e086901b1681526001600160a01b0390931660048401529089013560248301526001600160801b03166044820152606401600060405180830381600087803b1580156141ea57600080fd5b505af11580156141fe573d6000803e3d6000fd5b505050505b61421360e0860160c087016157ac565b1561425257602083015161422d6080870160608801615154565b6001600160401b03166142409190615596565b6001600160801b031695945050505050565b506000949350505050565b600054610100900460ff166142845760405162461bcd60e51b8152600401610b35906157c9565b565b600054610100900460ff166142ad5760405162461bcd60e51b8152600401610b35906157c9565b60c9805460ff19169055565b600054610100900460ff166142e05760405162461bcd60e51b8152600401610b35906157c9565b600160fb55565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000610b0c825490565b6060600061434b836002615814565b61435690600261540e565b6001600160401b0381111561436d5761436d615833565b6040519080825280601f01601f191660200182016040528015614397576020820181803683370190505b509050600360fc1b816000815181106143b2576143b261513e565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106143e1576143e161513e565b60200101906001600160f81b031916908160001a9053506000614405846002615814565b61441090600161540e565b90505b6001811115614488576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106144445761444461513e565b1a60f81b82828151811061445a5761445a61513e565b60200101906001600160f81b031916908160001a90535060049490941c9361448181615849565b9050614413565b5083156119b85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b35565b6144e18282611b0f565b6111cc5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556145193390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006119b8836001600160a01b03841661475c565b61457c8282611b0f565b156111cc5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006119b8836001600160a01b0384166147ab565b6020870151829060009061460c9089906001600160801b0316615814565b6001600160a01b03808916600090815261013360205260408120549293506401000000009092041690808215614667575050610132546001600160a01b0389166000908152610133602052604090205463ffffffff16614670565b505061012e5460005b600061271061467f8487615814565b6146899190615860565b9050600061271061469a8488615814565b6146a49190615860565b61012f549091506146c2908c906001600160a01b0316848a8c61489e565b6146cf8b86838a8c61489e565b6146f08b8b836146df868b615882565b6146e99190615882565b8a8c61489e565b5050505050505050505050505050565b60008260000182815481106147175761471761513e565b9060005260206000200154905092915050565b60608101516000906001600160a01b03161561474a578160600151610b0c565b505061012d546001600160a01b031690565b60008181526001830160205260408120546147a357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b0c565b506000610b0c565b600081815260018301602052604081205480156148945760006147cf600183615882565b85549091506000906147e390600190615882565b90508181146148485760008660000182815481106148035761480361513e565b90600052602060002001549050808760000184815481106148265761482661513e565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061485957614859615899565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610b0c565b6000915050610b0c565b826148a857614988565b8015614973576000846001600160a01b03168460405160006040518083038185875af1925050503d80600081146148fb576040519150601f19603f3d011682016040523d82523d6000602084013e614900565b606091505b505090508061496d5760405162461bcd60e51b815260206004820152603360248201527f54726561737572654d61726b6574706c6163653a2053656e64696e6720657468604482015272081dd85cc81b9bdd081cdd58d8d95cdcd99d5b606a1b6064820152608401610b35565b50614988565b6149886001600160a01b03831686868661498f565b5050505050565b611f2b846323b872dd60e01b8585856040516024016149b0939291906152cf565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526000614a37826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614ab49092919063ffffffff16565b80519091501561114d5780806020019051810190614a559190615332565b61114d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b35565b6060614ac38484600085614acb565b949350505050565b606082471015614b2c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b35565b6001600160a01b0385163b614b835760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b35565b600080866001600160a01b03168587604051614b9f91906158af565b60006040518083038185875af1925050503d8060008114614bdc576040519150601f19603f3d011682016040523d82523d6000602084013e614be1565b606091505b5091509150614bf1828286614bfc565b979650505050505050565b60608315614c0b5750816119b8565b825115614c1b5782518084602001fd5b8160405162461bcd60e51b8152600401610b3591906154f3565b600060208284031215614c4757600080fd5b81356001600160e01b0319811681146119b857600080fd5b60008060208385031215614c7257600080fd5b82356001600160401b0380821115614c8957600080fd5b818501915085601f830112614c9d57600080fd5b813581811115614cac57600080fd5b86602060c083028501011115614cc157600080fd5b60209290920196919550909350505050565b6001600160a01b03811681146111f157600080fd5b80356001600160401b0381168114614cff57600080fd5b919050565b80356001600160801b0381168114614cff57600080fd5b60008060008060008060c08789031215614d3457600080fd5b8635614d3f81614cd3565b955060208701359450614d5460408801614ce8565b9350614d6260608801614d04565b9250614d7060808801614ce8565b915060a0870135614d8081614cd3565b809150509295509295509295565b6000808284036060811215614da257600080fd5b8335614dad81614cd3565b92506040601f1982011215614dc157600080fd5b506020830190509250929050565b600060208284031215614de157600080fd5b5035919050565b60008060408385031215614dfb57600080fd5b823591506020830135614e0d81614cd3565b809150509250929050565b60008060208385031215614e2b57600080fd5b82356001600160401b0380821115614e4257600080fd5b818501915085601f830112614e5657600080fd5b813581811115614e6557600080fd5b866020606083028501011115614cc157600080fd5b600080600060608486031215614e8f57600080fd5b8335614e9a81614cd3565b9250602084013560038110614eae57600080fd5b91506040840135614ebe81614cd3565b809150509250925092565b60008060408385031215614edc57600080fd5b50508035926020909101359150565b600060c08284031215614efd57600080fd5b50919050565b600060208284031215614f1557600080fd5b81356119b881614cd3565b600080600060608486031215614f3557600080fd5b8335614f4081614cd3565b9250602084013591506040840135614ebe81614cd3565b60008060408385031215614f6a57600080fd5b8235614f7581614cd3565b91506020830135614e0d81614cd3565b60008060208385031215614f9857600080fd5b82356001600160401b0380821115614faf57600080fd5b818501915085601f830112614fc357600080fd5b813581811115614fd257600080fd5b86602060e083028501011115614cc157600080fd5b60008060408385031215614ffa57600080fd5b823561500581614cd3565b946020939093013593505050565b60008060006060848603121561502857600080fd5b833592506020840135614eae81614cd3565b600080600080600060a0868803121561505257600080fd5b853561505d81614cd3565b945061506b60208701614ce8565b935061507960408701614d04565b925061508760608701614ce8565b9150608086013561509781614cd3565b809150509295509295909350565b634e487b7160e01b600052602160045260246000fd5b600381106150cb576150cb6150a5565b9052565b60208101610b0c82846150bb565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561516657600080fd5b6119b882614ce8565b60006020828403121561518157600080fd5b6119b882614d04565b63ffffffff811681146111f157600080fd5b6000602082840312156151ae57600080fd5b81356119b88161518a565b81356151c48161518a565b63ffffffff8116905081548163ffffffff19821617835560208401356151e981614cd3565b6001600160c01b03199190911690911760209190911b640100000000600160c01b031617905550565b6020808252602a908201527f54726561737572654d61726b6574706c6163653a2042696464696e67206973206040820152696e6f742061637469766560b01b606082015260800190565b6001600160a01b039788168152958716602087015260408601949094526001600160401b0392831660608601526001600160801b039190911660808501521660a083015290911660c082015260e00190565b6000602082840312156152c057600080fd5b8135600281106119b857600080fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052601160045260246000fd5b600060001982141561531d5761531d6152f3565b5060010190565b80151581146111f157600080fd5b60006020828403121561534457600080fd5b81516119b881615324565b6001600160a01b038481168252606082019061536e60208401866150bb565b808416604084015250949350505050565b6020808252602b908201527f54726561737572654d61726b6574706c6163653a2063616e6e6f74207365742060408201526a307830206164647265737360a81b606082015260800190565b60208082526024908201527f54726561737572654d61726b6574706c6163653a206e6f74206c6973746564206040820152636974656d60e01b606082015260800190565b60008219821115615421576154216152f3565b500190565b60005b83811015615441578181015183820152602001615429565b83811115611f2b5750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161548a816017850160208801615426565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516154bb816028840160208801615426565b01602801949350505050565b600081518084526154df816020860160208601615426565b601f01601f19169290920160200192915050565b6020815260006119b860208301846154c7565b6020808252602c908201527f54726561737572654d61726b6574706c6163653a20696e76616c69642065787060408201526b69726174696f6e2074696d6560a01b606082015260800190565b60208082526024908201527f54726561737572654d61726b6574706c6163653a2062656c6f77206d696e20706040820152637269636560e01b606082015260800190565b60006001600160801b03808316818516818304811182151516156155bc576155bc6152f3565b02949350505050565b6000602082840312156155d757600080fd5b5051919050565b60208082526028908201527f54726561737572654d61726b6574706c6163653a206e6f7420656e6f756768206040820152677175616e7469747960c01b606082015260800190565b60208082526028908201527f54726561737572654d61726b6574706c6163653a2057726f6e67207061796d65604082015267373a103a37b5b2b760c11b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526001600160401b038316606082015260a060808201819052600090614bf1908301846154c7565b6001600160a01b03898116825288811660208301528781166040830152606082018790526001600160401b03861660808301526001600160801b03851660a0830152831660c082015261010081016002831061570e5761570e6150a5565b8260e08301529998505050505050505050565b60006001600160401b0383811690831681811015615741576157416152f3565b039392505050565b60006020828403121561575b57600080fd5b81516119b881614cd3565b60208082526026908201527f54726561737572654d61726b6574706c6163653a206974656d206e6f742061706040820152651c1c9bdd995960d21b606082015260800190565b6000602082840312156157be57600080fd5b81356119b881615324565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600081600019048311821515161561582e5761582e6152f3565b500290565b634e487b7160e01b600052604160045260246000fd5b600081615858576158586152f3565b506000190190565b60008261587d57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015615894576158946152f3565b500390565b634e487b7160e01b600052603160045260246000fd5b600082516158c1818460208701615426565b919091019291505056fe34d5e892b0a7ec1561fc4a5fdcb31b798cf623590906b938d356c9619e539958a26469706673582212202533b967a93e37236c6b1ebc71c06224473f9c64b2db5f5c3d7b0801ff60d23164736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106102e45760003560e01c806384fa314611610190578063b8d1452f116100dc578063d547741f11610095578063e74b981b1161006f578063e74b981b146109fc578063e76c171314610a1c578063e8a5f20014610a5a578063f4930d3e14610ac557600080fd5b8063d547741f146109af578063ddca3f43146109cf578063e1f1c4a7146109e657600080fd5b8063b8d1452f146108a1578063bc063e1a146108c1578063c564e3a1146108d7578063c5da1183146108f7578063c7cbcb3e14610917578063ca15c8731461098f57600080fd5b806398803a8311610149578063a217fddf11610123578063a217fddf14610834578063ad9f20a614610849578063b2ddee0614610861578063b4988fd01461088157600080fd5b806398803a831461078f5780639a867aab14610801578063a07076b21461082157600080fd5b806384fa3146146106c25780638852e220146106e25780638dce8eae146107195780639010d07c1461073957806391d14854146107595780639858bc9f1461077957600080fd5b80633f4ba83a1161024f5780635c975abb116102085780636bd3a64b116101e25780636bd3a64b146105bc578063785a8678146106765780637945e9441461068d5780638456cb59146106ad57600080fd5b80635c975abb14610564578063656b67ad1461057c5780636a326ab11461059c57600080fd5b80633f4ba83a146104b95780633fc8cef3146104ce57806344c7f047146104ef5780634aecaa25146105045780634e96358d1461052457806352f7c9881461054457600080fd5b8063248a9ca3116102a1578063248a9ca3146103d95780632c452098146104175780632f2ff15d146104375780633013ce291461045757806336568abe146104785780633740ebb31461049857600080fd5b806301ffc9a7146102e9578063083aded71461031e578063101e1c0214610339578063126080e914610377578063143f05e11461039957806319d89436146103b9575b600080fd5b3480156102f557600080fd5b50610309610304366004614c35565b610ae7565b60405190151581526020015b60405180910390f35b34801561032a57600080fd5b50610138546103099060ff1681565b34801561034557600080fd5b506101385461035f9061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610315565b34801561038357600080fd5b50610397610392366004614c5f565b610b12565b005b3480156103a557600080fd5b506103976103b4366004614d1b565b610bfc565b3480156103c557600080fd5b506103976103d4366004614d8e565b610c62565b3480156103e557600080fd5b506104096103f4366004614dcf565b60009081526065602052604090206001015490565b604051908152602001610315565b34801561042357600080fd5b50610397610432366004614d1b565b610e5d565b34801561044357600080fd5b50610397610452366004614de8565b611127565b34801561046357600080fd5b5061012d5461035f906001600160a01b031681565b34801561048457600080fd5b50610397610493366004614de8565b611152565b3480156104a457600080fd5b5061012f5461035f906001600160a01b031681565b3480156104c557600080fd5b506103976111d0565b3480156104da57600080fd5b506101355461035f906001600160a01b031681565b3480156104fb57600080fd5b506103976111f4565b34801561051057600080fd5b5061039761051f366004614e18565b611223565b34801561053057600080fd5b5061039761053f366004614e7a565b611437565b34801561055057600080fd5b5061039761055f366004614ec9565b611778565b34801561057057600080fd5b5060c95460ff16610309565b34801561058857600080fd5b50610397610597366004614eeb565b611860565b3480156105a857600080fd5b506103976105b7366004614f03565b6118e1565b3480156105c857600080fd5b506106346105d7366004614f20565b610130602090815260009384526040808520825292845282842090528252902080546001909101546001600160401b03808316926001600160801b03600160401b82041692600160c01b909104909116906001600160a01b031684565b604080516001600160401b0395861681526001600160801b0394909416602085015291909316908201526001600160a01b039091166060820152608001610315565b34801561068257600080fd5b506104096101325481565b34801561069957600080fd5b5061035f6106a8366004614f03565b611980565b3480156106b957600080fd5b506103976119bf565b3480156106ce57600080fd5b506103976106dd366004614eeb565b6119e0565b3480156106ee57600080fd5b5061035f6106fd366004614f03565b610134602052600090815260409020546001600160a01b031681565b34801561072557600080fd5b50610397610734366004614f03565b611a59565b34801561074557600080fd5b5061035f610754366004614ec9565b611af7565b34801561076557600080fd5b50610309610774366004614de8565b611b0f565b34801561078557600080fd5b506104096107d081565b34801561079b57600080fd5b506106346107aa366004614f57565b610137602090815260009283526040808420909152908252902080546001909101546001600160401b03808316926001600160801b03600160401b82041692600160c01b909104909116906001600160a01b031684565b34801561080d57600080fd5b5061039761081c366004614d1b565b611b3a565b61039761082f366004614f85565b611c0c565b34801561084057600080fd5b50610409600081565b34801561085557600080fd5b50610409633b9aca0081565b34801561086d57600080fd5b5061039761087c366004614fe7565b611cfc565b34801561088d57600080fd5b5061039761089c366004615013565b611d95565b3480156108ad57600080fd5b506103976108bc366004614f03565b611f31565b3480156108cd57600080fd5b506104096105dc81565b3480156108e357600080fd5b506103976108f236600461503a565b611fd0565b34801561090357600080fd5b50610397610912366004614d1b565b612225565b34801561092357600080fd5b50610634610932366004614f20565b610136602090815260009384526040808520825292845282842090528252902080546001909101546001600160401b03808316926001600160801b03600160401b82041692600160c01b909104909116906001600160a01b031684565b34801561099b57600080fd5b506104096109aa366004614dcf565b612334565b3480156109bb57600080fd5b506103976109ca366004614de8565b61234b565b3480156109db57600080fd5b5061040961012e5481565b3480156109f257600080fd5b5061040961271081565b348015610a0857600080fd5b50610397610a17366004614f03565b612371565b348015610a2857600080fd5b50610a4d610a37366004614f03565b6101316020526000908152604090205460ff1681565b60405161031591906150cf565b348015610a6657600080fd5b50610aa1610a75366004614f03565b6101336020526000908152604090205463ffffffff81169064010000000090046001600160a01b031682565b6040805163ffffffff90931683526001600160a01b03909116602083015201610315565b348015610ad157600080fd5b506104096000805160206158cc83398151915281565b60006001600160e01b03198216635a05180f60e01b1480610b0c5750610b0c8261240e565b92915050565b600260fb541415610b3e5760405162461bcd60e51b8152600401610b35906150dd565b60405180910390fd5b600260fb5560c95460ff1615610b665760405162461bcd60e51b8152600401610b3590615114565b60005b81811015610bf25736838383818110610b8457610b8461513e565b60c002919091019150610be99050610b9f6020830183614f03565b6020830135610bb46060850160408601615154565b610bc4608086016060870161516f565b610bd460a0870160808801615154565b610be460c0880160a08901614f03565b612443565b50600101610b69565b5050600160fb5550565b600260fb541415610c1f5760405162461bcd60e51b8152600401610b35906150dd565b600260fb5560c95460ff1615610c475760405162461bcd60e51b8152600401610b3590615114565b610c55868686868686612443565b5050600160fb5550505050565b6000805160206158cc833981519152610c7b8133612524565b60026001600160a01b0384166000908152610131602052604090205460ff166002811115610cab57610cab6150a5565b1480610ce4575060016001600160a01b0384166000908152610131602052604090205460ff166002811115610ce257610ce26150a5565b145b610d485760405162461bcd60e51b815260206004820152602f60248201527f54726561737572654d61726b6574706c6163653a20436f6c6c656374696f6e2060448201526e1a5cc81b9bdd08185c1c1c9bdd9959608a1b6064820152608401610b35565b6107d0610d58602084018461519c565b63ffffffff161115610dc15760405162461bcd60e51b815260206004820152602c60248201527f54726561737572654d61726b6574706c6163653a20436f6c6c656374696f6e2060448201526b0cccaca40e8dede40d0d2ced60a31b6064820152608401610b35565b6001600160a01b0383166000908152610133602052604090208290610de682826151b9565b507f67fec56f6f9c18f46aafdc92ee08968b7cac01e9e5b3dbdd485415acf0e9773e905083610e1b6040850160208601614f03565b610e28602086018661519c565b604080516001600160a01b03948516815293909216602084015263ffffffff16908201526060015b60405180910390a1505050565b600260fb541415610e805760405162461bcd60e51b8152600401610b35906150dd565b600260fb5560c95460ff1615610ea85760405162461bcd60e51b8152600401610b3590615114565b6101385460ff16610ecb5760405162461bcd60e51b8152600401610b3590615212565b60016001600160a01b0387166000908152610131602052604090205460ff166002811115610efb57610efb6150a5565b1415610f7c57836001600160401b0316600114610f775760405162461bcd60e51b815260206004820152603460248201527f54726561737572654d61726b6574706c6163653a20746f6b656e20626964207160448201527375616e74697479203120666f722045524337323160601b6064820152608401610b35565b61107c565b60026001600160a01b0387166000908152610131602052604090205460ff166002811115610fac57610fac6150a5565b1415611015576000846001600160401b031611610f775760405162461bcd60e51b815260206004820152602160248201527f54726561737572654d61726b6574706c6163653a20626164207175616e7469746044820152607960f81b6064820152608401610b35565b60405162461bcd60e51b815260206004820152603660248201527f54726561737572654d61726b6574706c6163653a20746f6b656e206973206e6f6044820152757420617070726f76656420666f722074726164696e6760501b6064820152608401610b35565b6001600160a01b03861660009081526101366020908152604080832088845290915281206110d6918891879187918791879190335b6001600160a01b03166001600160a01b03168152602001908152602001600020612588565b7faa16fd3f89fcc221b55be8ebd56c20abf3a580c60a83d5de297e0edf750aeae8335b878787878787604051611112979695949392919061525c565b60405180910390a15050600160fb5550505050565b6000828152606560205260409020600101546111438133612524565b61114d8383612867565b505050565b6001600160a01b03811633146111c25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610b35565b6111cc8282612889565b5050565b6000805160206158cc8339815191526111e98133612524565b6111f16128ab565b50565b6000805160206158cc83398151915261120d8133612524565b50610138805460ff19811660ff90911615179055565b600260fb5414156112465760405162461bcd60e51b8152600401610b35906150dd565b600260fb5560005b81811015610bf257368383838181106112695761126961513e565b6060029190910191506001905061128360208301836152ae565b6001811115611294576112946150a5565b141561136b576000610137816112b06040850160208601614f03565b6001600160a01b03166001600160a01b0316815260200190815260200160002060006112d93390565b6001600160a01b031681526020810191909152604001600020805467ffffffffffffffff19166001600160401b03929092169190911790557ff5913151c29e184e3a477be2274f0b06b63cd67c1ab11e1cc103d25701cfbdf2336113436040840160208501614f03565b604080516001600160a01b0393841681529290911660208301520160405180910390a1611424565b6000610136816113816040850160208601614f03565b6001600160a01b0316815260208082019290925260409081016000908120858301803583529084528282203380845290855292909120805467ffffffffffffffff19166001600160401b0395909516949094179093557fc98088fb062dda614ae7304b89526258370705c2646039e06beff408428a6b9c92909161140791908501614f03565b836040013560405161141b939291906152cf565b60405180910390a15b508061142f81615309565b91505061124e565b6000805160206158cc8339815191526114508133612524565b6001836002811115611464576114646150a5565b141561153e576040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa1580156114b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d99190615332565b6115395760405162461bcd60e51b815260206004820152602b60248201527f54726561737572654d61726b6574706c6163653a206e6f7420616e204552433760448201526a0c8c4818dbdb9d1c9858dd60aa1b6064820152608401610b35565b611628565b6002836002811115611552576115526150a5565b1415611628576040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa1580156115a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c79190615332565b6116285760405162461bcd60e51b815260206004820152602c60248201527f54726561737572654d61726b6574706c6163653a206e6f7420616e204552433160448201526b0c4d4d4818dbdb9d1c9858dd60a21b6064820152608401610b35565b6001600160a01b038216158015906116665750610135546001600160a01b0383811691161480611666575061012d546001600160a01b038381169116145b6116cb5760405162461bcd60e51b815260206004820152603060248201527f54726561737572654d61726b6574706c6163653a205061796d656e7420746f6b60448201526f195b881b9bdd081cdd5c1c1bdc9d195960821b6064820152608401610b35565b6001600160a01b038416600090815261013160205260409020805484919060ff19166001836002811115611701576117016150a5565b02179055506001600160a01b03848116600090815261013460205260409081902080546001600160a01b03191692851692909217909155517f876079e5f28457db5d4f19b6a15569030a7512eb4308523b27062fa6998baeab9061176a9086908690869061534f565b60405180910390a150505050565b6000805160206158cc8339815191526117918133612524565b6105dc83111580156117a557506105dc8211155b6117f15760405162461bcd60e51b815260206004820152601c60248201527f54726561737572654d61726b6574706c6163653a206d617820666565000000006044820152606401610b35565b61012e8390556101328290556040518381527f38e229a7f3f9c329892d08eb37c4e91ccac6d12c798d394990ca4f56028ec2669060200160405180910390a16040518281527f32837ab65d8583d89ac1b66920de55975eb33cbc0fbf00f2123197ce3b62c63e90602001610e50565b600260fb5414156118835760405162461bcd60e51b8152600401610b35906150dd565b600260fb5560c95460ff16156118ab5760405162461bcd60e51b8152600401610b3590615114565b6101385460ff166118ce5760405162461bcd60e51b8152600401610b3590615212565b6118d981600161293e565b50600160fb55565b6000805160206158cc8339815191526118fa8133612524565b6001600160a01b03821661195c5760405162461bcd60e51b8152602060048201526024808201527f5f7061796d656e74546f6b656e2063616e6e6f74206265206e756c6c206164646044820152637265737360e01b6064820152608401610b35565b5061012d80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038082166000908152610134602052604081205490911680156119aa57806119b8565b61012d546001600160a01b03165b9392505050565b6000805160206158cc8339815191526119d88133612524565b6111f161320f565b600260fb541415611a035760405162461bcd60e51b8152600401610b35906150dd565b600260fb5560c95460ff1615611a2b5760405162461bcd60e51b8152600401610b3590615114565b6101385460ff16611a4e5760405162461bcd60e51b8152600401610b3590615212565b6118d981600061293e565b6000805160206158cc833981519152611a728133612524565b6001600160a01b038216611a985760405162461bcd60e51b8152600401610b359061537f565b6101388054610100600160a81b0319166101006001600160a01b038516908102919091179091556040519081527fff578b2d68bd5715dc8d6a50dd990e7b5500f2849738885bbd03241447090e5a906020015b60405180910390a15050565b60008281526097602052604081206119b89083613267565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600260fb541415611b5d5760405162461bcd60e51b8152600401610b35906150dd565b600260fb5560c95460ff1615611b855760405162461bcd60e51b8152600401610b3590615114565b6001600160a01b03861660009081526101306020908152604080832088845282528083203384529091529020546001600160401b0316611bd75760405162461bcd60e51b8152600401610b35906153ca565b611be5868686868686613273565b7fde1951e410d2f4644b8dd23d6b9e5d2e862b417055f42e3939ab16b4635ec6de336110f9565b600260fb541415611c2f5760405162461bcd60e51b8152600401610b35906150dd565b600260fb5560c95460ff1615611c575760405162461bcd60e51b8152600401610b3590615114565b6000805b82811015611ca157611c83848483818110611c7857611c7861513e565b905060e00201613801565b611c8d908361540e565b915080611c9981615309565b915050611c5b565b50803414610bf25760405162461bcd60e51b815260206004820152602260248201527f54726561737572654d61726b6574706c6163653a20426164204554482076616c604482015261756560f01b6064820152608401610b35565b600260fb541415611d1f5760405162461bcd60e51b8152600401610b35906150dd565b600260fb556001600160a01b038216600081815261013060209081526040808320858452825280832033808552925280832083815560010180546001600160a01b0319169055518493927f9ba1a3cb55ce8d63d072a886f94d2a744f50cddf82128e897d0661f5ec62315891a45050600160fb55565b600054610100900460ff16611db05760005460ff1615611db4565b303b155b611e175760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b35565b600054610100900460ff16158015611e39576000805461ffff19166101011790555b6001600160a01b038216611ea25760405162461bcd60e51b815260206004820152602a60248201527f54726561737572654d61726b6574706c6163653a2063616e6e6f7420736574206044820152696164647265737328302960b01b6064820152608401610b35565b611eaa61425d565b611eb2614286565b611eba6142b9565b611ed26000805160206158cc833981519152806142e7565b611eea6000805160206158cc83398151915233612867565b611ef48485611778565b611efd83612371565b61012d80546001600160a01b0319166001600160a01b0384161790558015611f2b576000805461ff00191690555b50505050565b6000805160206158cc833981519152611f4a8133612524565b6001600160a01b038216611fac5760405162461bcd60e51b815260206004820152602360248201527f5f77657468416464726573732063616e6e6f74206265206e756c6c206164647260448201526265737360e81b6064820152608401610b35565b5061013580546001600160a01b0319166001600160a01b0392909216919091179055565b600260fb541415611ff35760405162461bcd60e51b8152600401610b35906150dd565b600260fb5560c95460ff161561201b5760405162461bcd60e51b8152600401610b3590615114565b6101385460ff1661203e5760405162461bcd60e51b8152600401610b3590615212565b60016001600160a01b0386166000908152610131602052604090205460ff16600281111561206e5761206e6150a5565b14156120dc576000846001600160401b0316116120d75760405162461bcd60e51b815260206004820152602160248201527f54726561737572654d61726b6574706c6163653a20426164207175616e7469746044820152607960f81b6064820152608401610b35565b612173565b60026001600160a01b0386166000908152610131602052604090205460ff16600281111561210c5761210c6150a5565b14156110155760405162461bcd60e51b815260206004820152603060248201527f54726561737572654d61726b6574706c6163653a204e6f20636f6c6c6563746960448201526f6f6e2062696473206f6e20313135357360801b6064820152608401610b35565b6121aa858585858561013760008c6001600160a01b03166001600160a01b0316815260200190815260200160002060006110b13390565b604080513381526001600160a01b0387811660208301526001600160401b03878116838501526001600160801b038716606084015285166080830152831660a082015290517f9f6945ee84d160722b736d12d84f9f3349075d2c78064575b40620be21bf6eef9181900360c00190a15050600160fb55505050565b600260fb5414156122485760405162461bcd60e51b8152600401610b35906150dd565b600260fb5560c95460ff16156122705760405162461bcd60e51b8152600401610b3590615114565b6001600160a01b03861660009081526101306020908152604080832088845282528083203384529091529020546001600160401b0316156122ff5760405162461bcd60e51b815260206004820152602360248201527f54726561737572654d61726b6574706c6163653a20616c7265616479206c69736044820152621d195960ea1b6064820152608401610b35565b61230d868686868686613273565b7fb21f4a0122c6667aa16da06fcb7d9d3b2688164dfb40b7253aed80ea36d88e99336110f9565b6000818152609760205260408120610b0c90614332565b6000828152606560205260409020600101546123678133612524565b61114d8383612889565b6000805160206158cc83398151915261238a8133612524565b6001600160a01b0382166123b05760405162461bcd60e51b8152600401610b359061537f565b61012f80546001600160a01b0319166001600160a01b0384169081179091556040519081527f6632de8ab33c46549f7bb29f647ea0d751157b25fe6a14b1bcc7527cdfbeb79c90602001611aeb565b6001600160a01b03163b151590565b60006001600160e01b03198216637965db0b60e01b1480610b0c57506301ffc9a760e01b6001600160e01b0319831614610b0c565b6001600160a01b03861660009081526101306020908152604080832088845282528083203384529091529020546001600160401b03161515612489878787878787613273565b80156124d7577fde1951e410d2f4644b8dd23d6b9e5d2e862b417055f42e3939ab16b4635ec6de338888888888886040516124ca979695949392919061525c565b60405180910390a161251b565b7fb21f4a0122c6667aa16da06fcb7d9d3b2688164dfb40b7253aed80ea36d88e9933888888888888604051612512979695949392919061525c565b60405180910390a15b50505050505050565b61252e8282611b0f565b6111cc57612546816001600160a01b0316601461433c565b61255183602061433c565b604051602001612562929190615452565b60408051601f198184030181529082905262461bcd60e51b8252610b35916004016154f3565b42836001600160401b0316116125b05760405162461bcd60e51b8152600401610b3590615506565b633b9aca00846001600160801b031610156125dd5760405162461bcd60e51b8152600401610b3590615552565b60006125e887611980565b9050826001600160a01b0316816001600160a01b03161461265a5760405162461bcd60e51b815260206004820152602660248201527f54726561737572654d61726b6574706c6163653a20426164207061796d656e74604482015265103a37b5b2b760d11b6064820152608401610b35565b8260006126706001600160401b03891688615596565b6001600160801b03169050806001600160a01b03831663dd62ed3e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604401602060405180830381865afa1580156126d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fa91906155c5565b1015801561277f5750806001600160a01b0383166370a08231336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277c91906155c5565b10155b6127f15760405162461bcd60e51b815260206004820152603f60248201527f54726561737572654d61726b6574706c6163653a204e6f7420656e6f7567682060448201527f746f6b656e73206f776e6564206f7220616c6c6f77656420666f7220626964006064820152608401610b35565b505081546001600160401b03948516600160c01b026001600160c01b036001600160801b03909716600160401b026001600160c01b0319909216959097169490941793909317939093169390931782555060010180546001600160a01b039092166001600160a01b031990921691909117905550565b61287182826144d7565b600082815260976020526040902061114d908261455d565b6128938282614572565b600082815260976020526040902061114d90826145d9565b60c95460ff166128f45760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610b35565b60c9805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b61294e6060830160408401614f03565b6001600160a01b0316336001600160a01b031614156129c25760405162461bcd60e51b815260206004820152602a60248201527f54726561737572654d61726b6574706c6163653a2043616e6e6f7420737570706044820152691b1e481bdddb88189a5960b21b6064820152608401610b35565b60006129d46080840160608501615154565b6001600160401b031611612a435760405162461bcd60e51b815260206004820152603060248201527f54726561737572654d61726b6574706c6163653a204e6f7468696e6720746f2060448201526f39bab838363c903a37903134b23232b960811b6064820152608401610b35565b60006001826001811115612a5957612a596150a5565b14612adf576101366000612a706020860186614f03565b6001600160a01b03166001600160a01b031681526020019081526020016000206000846020013581526020019081526020016000206000846040016020810190612aba9190614f03565b6001600160a01b03166001600160a01b03168152602001908152602001600020612b47565b6101376000612af16020860186614f03565b6001600160a01b03166001600160a01b031681526020019081526020016000206000846040016020810190612b269190614f03565b6001600160a01b03166001600160a01b031681526020019081526020016000205b80549091506001600160401b0316612bb15760405162461bcd60e51b815260206004820152602760248201527f54726561737572654d61726b6574706c6163653a2062696420646f6573206e6f6044820152661d08195e1a5cdd60ca1b6064820152608401610b35565b805442600160c01b9091046001600160401b03161015612c135760405162461bcd60e51b815260206004820181905260248201527f54726561737572654d61726b6574706c6163653a2062696420657870697265646044820152606401610b35565b8054600160401b90046001600160801b0316612c805760405162461bcd60e51b815260206004820152602660248201527f54726561737572654d61726b6574706c6163653a2062696420707269636520696044820152651b9d985b1a5960d21b6064820152608401610b35565b612c906080840160608501615154565b81546001600160401b0391821691161015612cbd5760405162461bcd60e51b8152600401610b35906155de565b612ccd60a084016080850161516f565b8154600160401b90046001600160801b03908116911614612d425760405162461bcd60e51b815260206004820152602960248201527f54726561737572654d61726b6574706c6163653a20707269636520646f6573206044820152680dcdee840dac2e8c6d60bb1b6064820152608401610b35565b6000612d546106a86020860186614f03565b9050612d6660c0850160a08601614f03565b60018301546001600160a01b039081169116148015612da557506001600160a01b038116612d9a60c0860160a08701614f03565b6001600160a01b0316145b612dc15760405162461bcd60e51b8152600401610b3590615626565b60016101316000612dd56020880188614f03565b6001600160a01b0316815260208101919091526040016000205460ff166002811115612e0357612e036150a5565b1415612f1357612e196080850160608601615154565b6001600160401b0316600114612e8d5760405162461bcd60e51b815260206004820152603360248201527f54726561737572654d61726b6574706c6163653a2043616e6e6f7420737570706044820152726c79206d756c7469706c65204552433732317360681b6064820152608401610b35565b612e9a6020850185614f03565b6001600160a01b03166342842e0e33612eb96060880160408901614f03565b87602001356040518463ffffffff1660e01b8152600401612edc939291906152cf565b600060405180830381600087803b158015612ef657600080fd5b505af1158015612f0a573d6000803e3d6000fd5b50505050612fcc565b60026101316000612f276020880188614f03565b6001600160a01b0316815260208101919091526040016000205460ff166002811115612f5557612f556150a5565b141561101557612f686020850185614f03565b6001600160a01b031663f242432a33612f876060880160408901614f03565b6020880135612f9c60808a0160608b01615154565b604051806020016040528060008152506040518663ffffffff1660e01b8152600401612edc95949392919061566e565b604080516080808201835284546001600160401b0380821684526001600160801b03600160401b8304166020850152600160c01b909104169282019290925260018401546001600160a01b03166060808301919091526130739261303591908801908801615154565b6001600160401b031661304b6020880188614f03565b61305b6060890160408a01614f03565b3361306c60c08b0160a08c01614f03565b60006145ee565b6101385461010090046001600160a01b031615613129576101385461010090046001600160a01b031663086efe056130ae6020870187614f03565b845460405160e084901b6001600160e01b03191681526001600160a01b03909216600483015260208801356024830152600160401b90046001600160801b03166044820152606401600060405180830381600087803b15801561311057600080fd5b505af1158015613124573d6000803e3d6000fd5b505050505b7ff6b2b7813b1815a0e2e32964b4f22ec24862322d9c9c0e0eefac425dfc455ab13361315b6060870160408801614f03565b6131686020880188614f03565b602088013561317d60808a0160608b01615154565b61318d60a08b0160808c0161516f565b61319d60c08c0160a08d01614f03565b8a6040516131b29897969594939291906156b0565b60405180910390a16131ca6080850160608601615154565b825483906000906131e59084906001600160401b0316615721565b92506101000a8154816001600160401b0302191690836001600160401b0316021790555050505050565b60c95460ff16156132325760405162461bcd60e51b8152600401610b3590615114565b60c9805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586129213390565b60006119b88383614700565b42826001600160401b03161161329b5760405162461bcd60e51b8152600401610b3590615506565b633b9aca00836001600160801b031610156132c85760405162461bcd60e51b8152600401610b3590615552565b60016001600160a01b0387166000908152610131602052604090205460ff1660028111156132f8576132f86150a5565b14156134e15785336040516331a9108f60e11b8152600481018890526001600160a01b0391821691831690636352211e90602401602060405180830381865afa158015613349573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336d9190615749565b6001600160a01b0316146133cf5760405162461bcd60e51b8152602060048201526024808201527f54726561737572654d61726b6574706c6163653a206e6f74206f776e696e67206044820152636974656d60e01b6064820152608401610b35565b6001600160a01b03811663e985e9c5336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604401602060405180830381865afa158015613429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344d9190615332565b6134695760405162461bcd60e51b8152600401610b3590615766565b846001600160401b03166001146134db5760405162461bcd60e51b815260206004820152603060248201527f54726561737572654d61726b6574706c6163653a2063616e6e6f74206c69737460448201526f206d756c7469706c652045524337323160801b6064820152608401610b35565b50613700565b60026001600160a01b0387166000908152610131602052604090205460ff166002811115613511576135116150a5565b141561101557856001600160401b0385166001600160a01b03821662fdd58e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018a9052604401602060405180830381865afa15801561357c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a091906155c5565b10156136015760405162461bcd60e51b815260206004820152602a60248201527f54726561737572654d61726b6574706c6163653a206d75737420686f6c6420656044820152696e6f756768206e66747360b01b6064820152608401610b35565b6001600160a01b03811663e985e9c5336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604401602060405180830381865afa15801561365b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061367f9190615332565b61369b5760405162461bcd60e51b8152600401610b3590615766565b6000856001600160401b0316116134db5760405162461bcd60e51b8152602060048201526024808201527f54726561737572654d61726b6574706c6163653a206e6f7468696e6720746f206044820152631b1a5cdd60e21b6064820152608401610b35565b600061370b87611980565b9050816001600160a01b0316816001600160a01b03161461373e5760405162461bcd60e51b8152600401610b3590615626565b50604080516080810182526001600160401b0395861681526001600160801b0394851660208083019182529487168284019081526001600160a01b039485166060840190815299851660009081526101308752848120998152988652838920338a529095529190962095518654915193518616600160c01b026001600160c01b0394909516600160401b026001600160c01b03199092169516949094179390931716178255915160019091018054919092166001600160a01b0319909116179055565b60006138136060830160408401614f03565b6001600160a01b0316336001600160a01b0316141561388a5760405162461bcd60e51b815260206004820152602d60248201527f54726561737572654d61726b6574706c6163653a2043616e6e6f74206275792060448201526c796f7572206f776e206974656d60981b6064820152608401610b35565b600061389c6080840160608501615154565b6001600160401b0316116138fe5760405162461bcd60e51b815260206004820152602360248201527f54726561737572654d61726b6574706c6163653a204e6f7468696e6720746f2060448201526262757960e81b6064820152608401610b35565b6000610130816139116020860186614f03565b6001600160a01b03166001600160a01b03168152602001908152602001600020600084602001358152602001908152602001600020600084604001602081019061395b9190614f03565b6001600160a01b0390811682526020808301939093526040918201600020825160808101845281546001600160401b038082168084526001600160801b03600160401b84041697840197909752600160c01b90910416938101939093526001015416606082015291506139e05760405162461bcd60e51b8152600401610b35906153ca565b4281604001516001600160401b03161015613a495760405162461bcd60e51b8152602060048201526024808201527f54726561737572654d61726b6574706c6163653a206c697374696e67206578706044820152631a5c995960e21b6064820152608401610b35565b600081602001516001600160801b031611613ab95760405162461bcd60e51b815260206004820152602a60248201527f54726561737572654d61726b6574706c6163653a206c697374696e672070726960448201526918d9481a5b9d985b1a5960b21b6064820152608401610b35565b613ac96080840160608501615154565b6001600160401b031681600001516001600160401b03161015613afe5760405162461bcd60e51b8152600401610b35906155de565b613b0e60a084016080850161516f565b6001600160801b031681602001516001600160801b03161115613b7f5760405162461bcd60e51b8152602060048201526024808201527f54726561737572654d61726b6574706c6163653a20707269636520696e637265604482015263185cd95960e21b6064820152608401610b35565b6000613b916106a86020860186614f03565b90506000613b9e8361472a565b9050613bb060c0860160a08701614f03565b6001600160a01b0316816001600160a01b0316148015613bf057506001600160a01b038216613be560c0870160a08801614f03565b6001600160a01b0316145b613c0c5760405162461bcd60e51b8152600401610b3590615626565b613c1c60e0860160c087016157ac565b15613ca557610135546001600160a01b03828116911614613ca55760405162461bcd60e51b815260206004820152603760248201527f54726561737572654d61726b6574706c6163653a20455448206f6e6c7920757360448201527f65642077697468207765746820636f6c6c656374696f6e0000000000000000006064820152608401610b35565b60016101316000613cb96020890189614f03565b6001600160a01b0316815260208101919091526040016000205460ff166002811115613ce757613ce76150a5565b1415613df357613cfd6080860160608701615154565b6001600160401b0316600114613d6d5760405162461bcd60e51b815260206004820152602f60248201527f54726561737572654d61726b6574706c6163653a2043616e6e6f74206275792060448201526e6d756c7469706c652045524337323160881b6064820152608401610b35565b613d7a6020860186614f03565b6001600160a01b03166342842e0e613d986060880160408901614f03565b3388602001356040518463ffffffff1660e01b8152600401613dbc939291906152cf565b600060405180830381600087803b158015613dd657600080fd5b505af1158015613dea573d6000803e3d6000fd5b50505050613eac565b60026101316000613e076020890189614f03565b6001600160a01b0316815260208101919091526040016000205460ff166002811115613e3557613e356150a5565b141561101557613e486020860186614f03565b6001600160a01b031663f242432a613e666060880160408901614f03565b336020890135613e7c60808b0160608c01615154565b604051806020016040528060008152506040518663ffffffff1660e01b8152600401613dbc95949392919061566e565b613f0c83613ec06080880160608901615154565b6001600160401b0316613ed66020890189614f03565b33613ee760608b0160408c01614f03565b613ef760c08c0160a08d01614f03565b613f0760e08d0160c08e016157ac565b6145ee565b7f72d3f914473a393354e6fcd9c3cb7d2eee53924b9b856f9da274e024566292a5613f3d6060870160408801614f03565b33613f4b6020890189614f03565b6020890135613f6060808b0160608c01615154565b6020890151613f7560c08d0160a08e01614f03565b604080516001600160a01b03988916815296881660208801529487169486019490945260608501929092526001600160401b031660808401526001600160801b031660a083015290911660c082015260e00160405180910390a1613fdf6080860160608701615154565b6001600160401b031683600001516001600160401b0316141561408c57610130600061400e6020880188614f03565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008660200135815260200190815260200160002060008660400160208101906140589190614f03565b6001600160a01b031681526020810191909152604001600090812090815560010180546001600160a01b0319169055614151565b61409c6080860160608701615154565b61013060006140ae6020890189614f03565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008760200135815260200190815260200160002060008760400160208101906140f89190614f03565b6001600160a01b0316815260208101919091526040016000908120805490919061412c9084906001600160401b0316615721565b92506101000a8154816001600160401b0302191690836001600160401b031602179055505b6101385461010090046001600160a01b031615614203576101385461010090046001600160a01b031663086efe0561418c6020880188614f03565b6020868101516040516001600160e01b031960e086901b1681526001600160a01b0390931660048401529089013560248301526001600160801b03166044820152606401600060405180830381600087803b1580156141ea57600080fd5b505af11580156141fe573d6000803e3d6000fd5b505050505b61421360e0860160c087016157ac565b1561425257602083015161422d6080870160608801615154565b6001600160401b03166142409190615596565b6001600160801b031695945050505050565b506000949350505050565b600054610100900460ff166142845760405162461bcd60e51b8152600401610b35906157c9565b565b600054610100900460ff166142ad5760405162461bcd60e51b8152600401610b35906157c9565b60c9805460ff19169055565b600054610100900460ff166142e05760405162461bcd60e51b8152600401610b35906157c9565b600160fb55565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000610b0c825490565b6060600061434b836002615814565b61435690600261540e565b6001600160401b0381111561436d5761436d615833565b6040519080825280601f01601f191660200182016040528015614397576020820181803683370190505b509050600360fc1b816000815181106143b2576143b261513e565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106143e1576143e161513e565b60200101906001600160f81b031916908160001a9053506000614405846002615814565b61441090600161540e565b90505b6001811115614488576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106144445761444461513e565b1a60f81b82828151811061445a5761445a61513e565b60200101906001600160f81b031916908160001a90535060049490941c9361448181615849565b9050614413565b5083156119b85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b35565b6144e18282611b0f565b6111cc5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556145193390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006119b8836001600160a01b03841661475c565b61457c8282611b0f565b156111cc5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006119b8836001600160a01b0384166147ab565b6020870151829060009061460c9089906001600160801b0316615814565b6001600160a01b03808916600090815261013360205260408120549293506401000000009092041690808215614667575050610132546001600160a01b0389166000908152610133602052604090205463ffffffff16614670565b505061012e5460005b600061271061467f8487615814565b6146899190615860565b9050600061271061469a8488615814565b6146a49190615860565b61012f549091506146c2908c906001600160a01b0316848a8c61489e565b6146cf8b86838a8c61489e565b6146f08b8b836146df868b615882565b6146e99190615882565b8a8c61489e565b5050505050505050505050505050565b60008260000182815481106147175761471761513e565b9060005260206000200154905092915050565b60608101516000906001600160a01b03161561474a578160600151610b0c565b505061012d546001600160a01b031690565b60008181526001830160205260408120546147a357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b0c565b506000610b0c565b600081815260018301602052604081205480156148945760006147cf600183615882565b85549091506000906147e390600190615882565b90508181146148485760008660000182815481106148035761480361513e565b90600052602060002001549050808760000184815481106148265761482661513e565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061485957614859615899565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610b0c565b6000915050610b0c565b826148a857614988565b8015614973576000846001600160a01b03168460405160006040518083038185875af1925050503d80600081146148fb576040519150601f19603f3d011682016040523d82523d6000602084013e614900565b606091505b505090508061496d5760405162461bcd60e51b815260206004820152603360248201527f54726561737572654d61726b6574706c6163653a2053656e64696e6720657468604482015272081dd85cc81b9bdd081cdd58d8d95cdcd99d5b606a1b6064820152608401610b35565b50614988565b6149886001600160a01b03831686868661498f565b5050505050565b611f2b846323b872dd60e01b8585856040516024016149b0939291906152cf565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526000614a37826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614ab49092919063ffffffff16565b80519091501561114d5780806020019051810190614a559190615332565b61114d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b35565b6060614ac38484600085614acb565b949350505050565b606082471015614b2c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b35565b6001600160a01b0385163b614b835760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b35565b600080866001600160a01b03168587604051614b9f91906158af565b60006040518083038185875af1925050503d8060008114614bdc576040519150601f19603f3d011682016040523d82523d6000602084013e614be1565b606091505b5091509150614bf1828286614bfc565b979650505050505050565b60608315614c0b5750816119b8565b825115614c1b5782518084602001fd5b8160405162461bcd60e51b8152600401610b3591906154f3565b600060208284031215614c4757600080fd5b81356001600160e01b0319811681146119b857600080fd5b60008060208385031215614c7257600080fd5b82356001600160401b0380821115614c8957600080fd5b818501915085601f830112614c9d57600080fd5b813581811115614cac57600080fd5b86602060c083028501011115614cc157600080fd5b60209290920196919550909350505050565b6001600160a01b03811681146111f157600080fd5b80356001600160401b0381168114614cff57600080fd5b919050565b80356001600160801b0381168114614cff57600080fd5b60008060008060008060c08789031215614d3457600080fd5b8635614d3f81614cd3565b955060208701359450614d5460408801614ce8565b9350614d6260608801614d04565b9250614d7060808801614ce8565b915060a0870135614d8081614cd3565b809150509295509295509295565b6000808284036060811215614da257600080fd5b8335614dad81614cd3565b92506040601f1982011215614dc157600080fd5b506020830190509250929050565b600060208284031215614de157600080fd5b5035919050565b60008060408385031215614dfb57600080fd5b823591506020830135614e0d81614cd3565b809150509250929050565b60008060208385031215614e2b57600080fd5b82356001600160401b0380821115614e4257600080fd5b818501915085601f830112614e5657600080fd5b813581811115614e6557600080fd5b866020606083028501011115614cc157600080fd5b600080600060608486031215614e8f57600080fd5b8335614e9a81614cd3565b9250602084013560038110614eae57600080fd5b91506040840135614ebe81614cd3565b809150509250925092565b60008060408385031215614edc57600080fd5b50508035926020909101359150565b600060c08284031215614efd57600080fd5b50919050565b600060208284031215614f1557600080fd5b81356119b881614cd3565b600080600060608486031215614f3557600080fd5b8335614f4081614cd3565b9250602084013591506040840135614ebe81614cd3565b60008060408385031215614f6a57600080fd5b8235614f7581614cd3565b91506020830135614e0d81614cd3565b60008060208385031215614f9857600080fd5b82356001600160401b0380821115614faf57600080fd5b818501915085601f830112614fc357600080fd5b813581811115614fd257600080fd5b86602060e083028501011115614cc157600080fd5b60008060408385031215614ffa57600080fd5b823561500581614cd3565b946020939093013593505050565b60008060006060848603121561502857600080fd5b833592506020840135614eae81614cd3565b600080600080600060a0868803121561505257600080fd5b853561505d81614cd3565b945061506b60208701614ce8565b935061507960408701614d04565b925061508760608701614ce8565b9150608086013561509781614cd3565b809150509295509295909350565b634e487b7160e01b600052602160045260246000fd5b600381106150cb576150cb6150a5565b9052565b60208101610b0c82846150bb565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561516657600080fd5b6119b882614ce8565b60006020828403121561518157600080fd5b6119b882614d04565b63ffffffff811681146111f157600080fd5b6000602082840312156151ae57600080fd5b81356119b88161518a565b81356151c48161518a565b63ffffffff8116905081548163ffffffff19821617835560208401356151e981614cd3565b6001600160c01b03199190911690911760209190911b640100000000600160c01b031617905550565b6020808252602a908201527f54726561737572654d61726b6574706c6163653a2042696464696e67206973206040820152696e6f742061637469766560b01b606082015260800190565b6001600160a01b039788168152958716602087015260408601949094526001600160401b0392831660608601526001600160801b039190911660808501521660a083015290911660c082015260e00190565b6000602082840312156152c057600080fd5b8135600281106119b857600080fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052601160045260246000fd5b600060001982141561531d5761531d6152f3565b5060010190565b80151581146111f157600080fd5b60006020828403121561534457600080fd5b81516119b881615324565b6001600160a01b038481168252606082019061536e60208401866150bb565b808416604084015250949350505050565b6020808252602b908201527f54726561737572654d61726b6574706c6163653a2063616e6e6f74207365742060408201526a307830206164647265737360a81b606082015260800190565b60208082526024908201527f54726561737572654d61726b6574706c6163653a206e6f74206c6973746564206040820152636974656d60e01b606082015260800190565b60008219821115615421576154216152f3565b500190565b60005b83811015615441578181015183820152602001615429565b83811115611f2b5750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161548a816017850160208801615426565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516154bb816028840160208801615426565b01602801949350505050565b600081518084526154df816020860160208601615426565b601f01601f19169290920160200192915050565b6020815260006119b860208301846154c7565b6020808252602c908201527f54726561737572654d61726b6574706c6163653a20696e76616c69642065787060408201526b69726174696f6e2074696d6560a01b606082015260800190565b60208082526024908201527f54726561737572654d61726b6574706c6163653a2062656c6f77206d696e20706040820152637269636560e01b606082015260800190565b60006001600160801b03808316818516818304811182151516156155bc576155bc6152f3565b02949350505050565b6000602082840312156155d757600080fd5b5051919050565b60208082526028908201527f54726561737572654d61726b6574706c6163653a206e6f7420656e6f756768206040820152677175616e7469747960c01b606082015260800190565b60208082526028908201527f54726561737572654d61726b6574706c6163653a2057726f6e67207061796d65604082015267373a103a37b5b2b760c11b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526001600160401b038316606082015260a060808201819052600090614bf1908301846154c7565b6001600160a01b03898116825288811660208301528781166040830152606082018790526001600160401b03861660808301526001600160801b03851660a0830152831660c082015261010081016002831061570e5761570e6150a5565b8260e08301529998505050505050505050565b60006001600160401b0383811690831681811015615741576157416152f3565b039392505050565b60006020828403121561575b57600080fd5b81516119b881614cd3565b60208082526026908201527f54726561737572654d61726b6574706c6163653a206974656d206e6f742061706040820152651c1c9bdd995960d21b606082015260800190565b6000602082840312156157be57600080fd5b81356119b881615324565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600081600019048311821515161561582e5761582e6152f3565b500290565b634e487b7160e01b600052604160045260246000fd5b600081615858576158586152f3565b506000190190565b60008261587d57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015615894576158946152f3565b500390565b634e487b7160e01b600052603160045260246000fd5b600082516158c1818460208701615426565b919091019291505056fe34d5e892b0a7ec1561fc4a5fdcb31b798cf623590906b938d356c9619e539958a26469706673582212202533b967a93e37236c6b1ebc71c06224473f9c64b2db5f5c3d7b0801ff60d23164736f6c634300080c0033",
  "devdoc": {
    "details": "This contract does not store any tokens at any time, it's only collects details \"the sale\" and approvals         from both parties and preforms non-custodial transaction by transfering NFT from owner to buying and payment         token from buying to NFT owner.",
    "events": {
      "ItemCanceled(address,address,uint256)": {
        "params": {
          "nftAddress": "which token contract holds the formerly offered token",
          "seller": "former offeror of the item",
          "tokenId": "the identifier for the formerly offered token"
        }
      },
      "ItemListed(address,address,uint256,uint64,uint128,uint64,address)": {
        "params": {
          "expirationTime": "UNIX timestamp after when this listing expires",
          "nftAddress": "which token contract holds the offered token",
          "paymentToken": "the token used to list this item",
          "pricePerItem": "the price (in units of the paymentToken) for each token offered",
          "quantity": "how many of this token identifier are offered (or 1 for a ERC-721 token)",
          "seller": "the offeror of the item",
          "tokenId": "the identifier for the offered token"
        }
      },
      "ItemSold(address,address,address,uint256,uint64,uint128,address)": {
        "params": {
          "buyer": "the buyer of the item",
          "nftAddress": "which token contract holds the sold token",
          "paymentToken": "the payment token that was used to pay for this item",
          "pricePerItem": "the price (in units of the paymentToken) for each token sold",
          "quantity": "how many of this token identifier where sold (or 1 for a ERC-721 token)",
          "seller": "the offeror of the item",
          "tokenId": "the identifier for the sold token"
        }
      },
      "ItemUpdated(address,address,uint256,uint64,uint128,uint64,address)": {
        "params": {
          "expirationTime": "UNIX timestamp after when this listing expires",
          "nftAddress": "which token contract holds the offered token",
          "paymentToken": "the token used to list this item",
          "pricePerItem": "the price (in units of the paymentToken) for each token offered",
          "quantity": "how many of this token identifier are offered (or 1 for a ERC-721 token)",
          "seller": "the offeror of the item",
          "tokenId": "the identifier for the offered token"
        }
      },
      "TokenApprovalStatusUpdated(address,uint8,address)": {
        "params": {
          "nft": "which token contract was updated",
          "paymentToken": "the token that will be used for payments for this collection",
          "status": "the new status"
        }
      },
      "UpdateCollectionOwnerFee(address,address,uint256)": {
        "params": {
          "_collection": "The collection",
          "_fee": "The fee amount (in units of basis points)",
          "_recipient": "The recipient of the fees. If the address is 0, the collection fees for this collection have been removed."
        }
      },
      "UpdateFee(uint256)": {
        "params": {
          "fee": "new fee amount (in units of basis points)"
        }
      },
      "UpdateFeeRecipient(address)": {
        "params": {
          "feeRecipient": "the new recipient to get fees"
        }
      },
      "UpdateFeeWithCollectionOwner(uint256)": {
        "params": {
          "fee": "new fee amount (in units of basis points)"
        }
      },
      "UpdateSalesTracker(address)": {
        "params": {
          "_priceTrackerAddress": "the new address to call for sales price tracking"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "cancelListing(address,uint256)": {
        "params": {
          "_nftAddress": "which token contract holds the offered token",
          "_tokenId": "the identifier for the offered token"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "createListing(address,uint256,uint64,uint128,uint64,address)": {
        "params": {
          "_expirationTime": "UNIX timestamp after when this listing expires",
          "_nftAddress": "which token contract holds the offered token",
          "_pricePerItem": "the price (in units of the paymentToken) for each token offered",
          "_quantity": "how many of this token identifier are offered (or 1 for a ERC-721 token)",
          "_tokenId": "the identifier for the offered token"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(uint256,address,address)": {
        "details": "The initializer modifier ensures this is only called once, the owner should confirm this was properly         performed before publishing this contract address.",
        "params": {
          "_initialFee": "fee to be paid on each sale, in basis points",
          "_initialFeeRecipient": "wallet to collets fees",
          "_initialPaymentToken": "address of the token that is used for settlement"
        }
      },
      "pause()": {
        "details": "This is callable only by the owner. Canceling listings is not paused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setCollectionOwnerFee(address,(uint32,address))": {
        "details": "This is callable only by the owner",
        "params": {
          "_collectionAddress": "The collection in question. This must be whitelisted.",
          "_collectionOwnerFee": "The fee and recipient for the collection. If the 0 address is passed as the recipient, collection specific fees will not be collected."
        }
      },
      "setFee(uint256,uint256)": {
        "details": "This is callable only by the owner. Both fees may not exceed MAX_FEE",
        "params": {
          "_newFee": "the updated fee amount is basis points"
        }
      },
      "setFeeRecipient(address)": {
        "details": "This is callable only by the owner.",
        "params": {
          "_newFeeRecipient": "the wallet to receive fees"
        }
      },
      "setPriceTracker(address)": {
        "details": "This is callable only by the owner.",
        "params": {
          "_priceTrackerAddress": "the wallet to receive fees"
        }
      },
      "setTokenApprovalStatus(address,uint8,address)": {
        "details": "This is callable only by the owner.",
        "params": {
          "_nft": "address of the NFT to be approved",
          "_status": "the kind of NFT approved, or NOT_APPROVED to remove approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unpause()": {
        "details": "This is callable only by the owner."
      },
      "updateListing(address,uint256,uint64,uint128,uint64,address)": {
        "params": {
          "_newExpirationTime": "UNIX timestamp after when this listing expires",
          "_newPricePerItem": "the price (in units of the paymentToken) for each token offered",
          "_newQuantity": "how many of this token identifier are offered (or 1 for a ERC-721 token)",
          "_nftAddress": "which token contract holds the offered token",
          "_tokenId": "the identifier for the offered token"
        }
      }
    },
    "title": "Treasure NFT marketplace",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ItemCanceled(address,address,uint256)": {
        "notice": "An item is no longer listed for sale"
      },
      "ItemListed(address,address,uint256,uint64,uint128,uint64,address)": {
        "notice": "An item was listed for sale"
      },
      "ItemSold(address,address,address,uint256,uint64,uint128,address)": {
        "notice": "A listed item was sold"
      },
      "ItemUpdated(address,address,uint256,uint64,uint128,uint64,address)": {
        "notice": "An item listing was updated"
      },
      "TokenApprovalStatusUpdated(address,uint8,address)": {
        "notice": "The approval status for a token was updated"
      },
      "UpdateCollectionOwnerFee(address,address,uint256)": {
        "notice": "A collection's fees have changed"
      },
      "UpdateFee(uint256)": {
        "notice": "The fee portion was updated"
      },
      "UpdateFeeRecipient(address)": {
        "notice": "The fee recipient was updated"
      },
      "UpdateFeeWithCollectionOwner(uint256)": {
        "notice": "The fee portion was updated for collections that have a collection owner."
      },
      "UpdateSalesTracker(address)": {
        "notice": "The sales tracker contract was update"
      }
    },
    "kind": "user",
    "methods": {
      "BASIS_POINTS()": {
        "notice": "the denominator for portion calculation, i.e. how many basis points are in 100%"
      },
      "MAX_COLLECTION_FEE()": {
        "notice": "the maximum fee which the collection owner may set"
      },
      "MAX_FEE()": {
        "notice": "the maximum fee which the owner may set (in units of basis points)"
      },
      "MIN_PRICE()": {
        "notice": "the minimum price for which any item can be sold"
      },
      "TREASURE_MARKETPLACE_ADMIN_ROLE()": {
        "notice": "TREASURE_MARKETPLACE_ADMIN_ROLE role hash"
      },
      "areBidsActive()": {
        "notice": "Indicates if bid related functions are active."
      },
      "buyItems((address,uint256,address,uint64,uint128,address,bool)[])": {
        "notice": "Buy multiple listed items. You must authorize this marketplace with your payment token to completed the buy or purchase with eth if it is a weth collection."
      },
      "cancelListing(address,uint256)": {
        "notice": "Remove an item listing"
      },
      "collectionBids(address,address)": {
        "notice": "mapping for collection level bids (721 only): nftAddress => offeror"
      },
      "collectionToCollectionOwnerFee(address)": {
        "notice": "Maps the collection address to the fees which the collection owner collects. Some collections may not have a seperate fee, such as those owned by the Treasure DAO."
      },
      "collectionToPaymentToken(address)": {
        "notice": "Maps the collection address to the payment token that will be used for purchasing. If the address is the zero address, it will use the default paymentToken."
      },
      "createListing(address,uint256,uint64,uint128,uint64,address)": {
        "notice": "Creates an item listing. You must authorize this marketplace with your item's token contract to list."
      },
      "createOrUpdateListings((address,uint256,uint64,uint128,uint64,address)[])": {
        "notice": "Create or update multiple listings."
      },
      "createOrUpdateTokenBid(address,uint256,uint64,uint128,uint64,address)": {
        "notice": "Creates a bid for a particular token."
      },
      "fee()": {
        "notice": "fee portion (in basis points) for each sale, (e.g. a value of 100 is 100/10000 = 1%). This is the fee if no collection owner fee is set."
      },
      "feeReceipient()": {
        "notice": "address that receives fees"
      },
      "feeWithCollectionOwner()": {
        "notice": "fee portion (in basis points) for each sale. This is used if a separate fee has been set for the collection owner."
      },
      "initialize(uint256,address,address)": {
        "notice": "Perform initial contract setup"
      },
      "listings(address,uint256,address)": {
        "notice": "mapping for listings, maps: nftAddress => tokenId => offeror"
      },
      "pause()": {
        "notice": "Pauses the marketplace, creatisgn and executing listings is paused"
      },
      "paymentToken()": {
        "notice": "the default token that is used for marketplace sales and fee payments. Can be overridden by collectionToTokenAddress."
      },
      "priceTrackerAddress()": {
        "notice": "Address of the contract that tracks sales and prices of collections."
      },
      "setCollectionOwnerFee(address,(uint32,address))": {
        "notice": "Updates the fee amount which is collected during sales fro a specific collection"
      },
      "setFee(uint256,uint256)": {
        "notice": "Updates the fee amount which is collected during sales, for both collections with and without owner specific fees."
      },
      "setFeeRecipient(address)": {
        "notice": "Updates the fee recipient which receives fees during sales"
      },
      "setPriceTracker(address)": {
        "notice": "Updates the fee recipient which receives fees during sales"
      },
      "setTokenApprovalStatus(address,uint8,address)": {
        "notice": "Sets a token as an approved kind of NFT or as ineligible for trading"
      },
      "tokenApprovals(address)": {
        "notice": "NFTs which the owner has approved to be sold on the marketplace, maps: nftAddress => status"
      },
      "tokenBids(address,uint256,address)": {
        "notice": "mapping for token bids (721/1155): nftAddress => tokneId => offeror"
      },
      "unpause()": {
        "notice": "Unpauses the marketplace, all functionality is restored"
      },
      "updateListing(address,uint256,uint64,uint128,uint64,address)": {
        "notice": "Updates an item listing"
      },
      "weth()": {
        "notice": "The address for weth."
      }
    },
    "notice": "This contract allows you to buy and sell NFTs from token contracts that are approved by the contract owner.         Please note that this contract is upgradeable. In the event of a compromised ProxyAdmin contract owner,         collectable tokens and payments may be at risk. To prevent this, the ProxyAdmin is owned by a multi-sig         governed by the TreasureDAO council.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 705,
        "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 708,
        "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1766,
        "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2013,
        "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 184,
        "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)"
      },
      {
        "astId": 472,
        "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 33,
        "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)2338_storage)"
      },
      {
        "astId": 143,
        "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 793,
        "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
        "label": "_paused",
        "offset": 0,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 882,
        "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 897,
        "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
        "label": "_status",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 941,
        "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2705,
        "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
        "label": "paymentToken",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IERC20Upgradeable)1142"
      },
      {
        "astId": 2708,
        "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
        "label": "fee",
        "offset": 0,
        "slot": "302",
        "type": "t_uint256"
      },
      {
        "astId": 2711,
        "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
        "label": "feeReceipient",
        "offset": 0,
        "slot": "303",
        "type": "t_address"
      },
      {
        "astId": 2721,
        "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
        "label": "listings",
        "offset": 0,
        "slot": "304",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(ListingOrBid)2661_storage)))"
      },
      {
        "astId": 2727,
        "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
        "label": "tokenApprovals",
        "offset": 0,
        "slot": "305",
        "type": "t_mapping(t_address,t_enum(TokenApprovalStatus)2672)"
      },
      {
        "astId": 2730,
        "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
        "label": "feeWithCollectionOwner",
        "offset": 0,
        "slot": "306",
        "type": "t_uint256"
      },
      {
        "astId": 2736,
        "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
        "label": "collectionToCollectionOwnerFee",
        "offset": 0,
        "slot": "307",
        "type": "t_mapping(t_address,t_struct(CollectionOwnerFee)2668_storage)"
      },
      {
        "astId": 2741,
        "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
        "label": "collectionToPaymentToken",
        "offset": 0,
        "slot": "308",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2745,
        "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
        "label": "weth",
        "offset": 0,
        "slot": "309",
        "type": "t_contract(IERC20Upgradeable)1142"
      },
      {
        "astId": 2755,
        "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
        "label": "tokenBids",
        "offset": 0,
        "slot": "310",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(ListingOrBid)2661_storage)))"
      },
      {
        "astId": 2763,
        "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
        "label": "collectionBids",
        "offset": 0,
        "slot": "311",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(ListingOrBid)2661_storage))"
      },
      {
        "astId": 2766,
        "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
        "label": "areBidsActive",
        "offset": 0,
        "slot": "312",
        "type": "t_bool"
      },
      {
        "astId": 2769,
        "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
        "label": "priceTrackerAddress",
        "offset": 1,
        "slot": "312",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20Upgradeable)1142": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_enum(TokenApprovalStatus)2672": {
        "encoding": "inplace",
        "label": "enum TreasureMarketplaceTestnet.TokenApprovalStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(TokenApprovalStatus)2672)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum TreasureMarketplaceTestnet.TokenApprovalStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(TokenApprovalStatus)2672"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(ListingOrBid)2661_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct TreasureMarketplaceTestnet.ListingOrBid))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(ListingOrBid)2661_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(ListingOrBid)2661_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(address => struct TreasureMarketplaceTestnet.ListingOrBid)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_struct(ListingOrBid)2661_storage))"
      },
      "t_mapping(t_address,t_struct(CollectionOwnerFee)2668_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TreasureMarketplaceTestnet.CollectionOwnerFee)",
        "numberOfBytes": "32",
        "value": "t_struct(CollectionOwnerFee)2668_storage"
      },
      "t_mapping(t_address,t_struct(ListingOrBid)2661_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TreasureMarketplaceTestnet.ListingOrBid)",
        "numberOfBytes": "32",
        "value": "t_struct(ListingOrBid)2661_storage"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)2338_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2338_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)179_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(ListingOrBid)2661_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct TreasureMarketplaceTestnet.ListingOrBid))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(ListingOrBid)2661_storage)"
      },
      "t_struct(AddressSet)2338_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 2337,
            "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2037_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(CollectionOwnerFee)2668_storage": {
        "encoding": "inplace",
        "label": "struct TreasureMarketplaceTestnet.CollectionOwnerFee",
        "members": [
          {
            "astId": 2664,
            "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
            "label": "fee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 2667,
            "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
            "label": "recipient",
            "offset": 4,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ListingOrBid)2661_storage": {
        "encoding": "inplace",
        "label": "struct TreasureMarketplaceTestnet.ListingOrBid",
        "members": [
          {
            "astId": 2651,
            "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
            "label": "quantity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2654,
            "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
            "label": "pricePerItem",
            "offset": 8,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 2657,
            "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
            "label": "expirationTime",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2660,
            "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
            "label": "paymentTokenAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)179_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 176,
            "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 178,
            "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2037_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 2032,
            "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2036,
            "contract": "contracts/TreasureMarketplaceTestnet.sol:TreasureMarketplaceTestnet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}