{
  "address": "0x812cdA2181ed7c45a35a691E0C85E231D218E273",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_marketplace",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_pricePerItem",
          "type": "uint256"
        }
      ],
      "name": "buyItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketplace",
      "outputs": [
        {
          "internalType": "contract TreasureMarketplace",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "withdrawNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x36b63fdaeae0abf4d4676d1cd50312be147039a069c96e05407aa6549c54e7ec",
  "receipt": {
    "to": null,
    "from": "0x393248aE29A7C2128E8E27d23330b1F87E0600fc",
    "contractAddress": "0x812cdA2181ed7c45a35a691E0C85E231D218E273",
    "transactionIndex": 0,
    "gasUsed": "16942024",
    "logsBloom": "0x
    "blockHash": "0x97cab59abaafafc5155ab1cb01383e3fedf2b86d9dac038806f5d823d0305ba6",
    "transactionHash": "0x36b63fdaeae0abf4d4676d1cd50312be147039a069c96e05407aa6549c54e7ec",
    "logs": [],
    "blockNumber": 5254531,
    "cumulativeGasUsed": "7696944",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2E3b85F85628301a0Bce300Dee3A6B04195A15Ee"
  ],
  "solcInputHash": "7ac90951cafe9f943003fe95efb9dd0e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketplace\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerItem\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplace\",\"outputs\":[{\"internalType\":\"contract TreasureMarketplace\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"withdrawNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TreasureMarketplaceBuyer.sol\":\"TreasureMarketplaceBuyer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x2f27682302bd27f76399273e73cedecd2de098aa101401a3b5f2196f520da6c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x4716e860c041e651d2f2486399ea5a49ec12289e91b2763991a2fa3a70772acf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x8c578d9e30c8f2bb7ac01d108766df87d42b73d4d3638f01d494a894fe7c1f4b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8756c97d6004b1ae21517a013bdec72fbf30be7852afb2f395871d280131b250\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/TreasureMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/interfaces/IERC165.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport './TreasureNFTOracle.sol';\\n\\ncontract TreasureMarketplace is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    bytes4 private constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\n    bytes4 private constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n    uint256 public constant BASIS_POINTS = 10000;\\n\\n    address public oracle;\\n    address public paymentToken;\\n\\n    uint256 public fee;\\n    address public feeReceipient;\\n\\n    struct Listing {\\n        uint256 quantity;\\n        uint256 pricePerItem;\\n        uint256 expirationTime;\\n    }\\n\\n    //  _nftAddress => _tokenId => _owner\\n    mapping(address => mapping(uint256 => mapping(address => Listing))) public listings;\\n    mapping(address => bool) public nftWhitelist;\\n\\n    event UpdateFee(uint256 fee);\\n    event UpdateFeeRecipient(address feeRecipient);\\n    event UpdateOracle(address oracle);\\n    event UpdatePaymentToken(address paymentToken);\\n\\n    event NftWhitelistAdd(address nft);\\n    event NftWhitelistRemove(address nft);\\n\\n    event ItemListed(\\n        address seller,\\n        address nftAddress,\\n        uint256 tokenId,\\n        uint256 quantity,\\n        uint256 pricePerItem,\\n        uint256 expirationTime\\n    );\\n\\n    event ItemUpdated(\\n        address seller,\\n        address nftAddress,\\n        uint256 tokenId,\\n        uint256 quantity,\\n        uint256 pricePerItem,\\n        uint256 expirationTime\\n    );\\n\\n    event ItemSold(\\n        address seller,\\n        address buyer,\\n        address nftAddress,\\n        uint256 tokenId,\\n        uint256 quantity,\\n        uint256 pricePerItem\\n    );\\n\\n    event ItemCanceled(address seller, address nftAddress, uint256 tokenId);\\n\\n    modifier isListed(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _owner\\n    ) {\\n        Listing memory listing = listings[_nftAddress][_tokenId][_owner];\\n        require(listing.quantity > 0, \\\"not listed item\\\");\\n        _;\\n    }\\n\\n    modifier notListed(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _owner\\n    ) {\\n        Listing memory listing = listings[_nftAddress][_tokenId][_owner];\\n        require(listing.quantity == 0, \\\"already listed\\\");\\n        _;\\n    }\\n\\n    modifier validListing(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _owner\\n    ) {\\n        Listing memory listedItem = listings[_nftAddress][_tokenId][_owner];\\n        if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)) {\\n            IERC721 nft = IERC721(_nftAddress);\\n            require(nft.ownerOf(_tokenId) == _owner, \\\"not owning item\\\");\\n        } else if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC1155)) {\\n            IERC1155 nft = IERC1155(_nftAddress);\\n            require(nft.balanceOf(_owner, _tokenId) >= listedItem.quantity, \\\"not owning item\\\");\\n        } else {\\n            revert(\\\"invalid nft address\\\");\\n        }\\n        require(listedItem.expirationTime >= block.timestamp, \\\"listing expired\\\");\\n        _;\\n    }\\n\\n    modifier onlyWhitelisted(address nft) {\\n        require(nftWhitelist[nft], \\\"nft not whitelisted\\\");\\n        _;\\n    }\\n\\n    constructor(uint256 _fee, address _feeRecipient, address _oracle, address _paymentToken) {\\n        setFee(_fee);\\n        setFeeRecipient(_feeRecipient);\\n        setOracle(_oracle);\\n        setPaymentToken(_paymentToken);\\n    }\\n\\n    function createListing(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        uint256 _quantity,\\n        uint256 _pricePerItem,\\n        uint256 _expirationTime\\n    ) external notListed(_nftAddress, _tokenId, _msgSender()) onlyWhitelisted(_nftAddress) {\\n        if (_expirationTime == 0) _expirationTime = type(uint256).max;\\n        require(_expirationTime > block.timestamp, \\\"invalid expiration time\\\");\\n        require(_quantity > 0, \\\"nothing to list\\\");\\n\\n        if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)) {\\n            IERC721 nft = IERC721(_nftAddress);\\n            require(nft.ownerOf(_tokenId) == _msgSender(), \\\"not owning item\\\");\\n            require(nft.isApprovedForAll(_msgSender(), address(this)), \\\"item not approved\\\");\\n        } else if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC1155)) {\\n            IERC1155 nft = IERC1155(_nftAddress);\\n            require(nft.balanceOf(_msgSender(), _tokenId) >= _quantity, \\\"must hold enough nfts\\\");\\n            require(nft.isApprovedForAll(_msgSender(), address(this)), \\\"item not approved\\\");\\n        } else {\\n            revert(\\\"invalid nft address\\\");\\n        }\\n\\n        listings[_nftAddress][_tokenId][_msgSender()] = Listing(\\n            _quantity,\\n            _pricePerItem,\\n            _expirationTime\\n        );\\n\\n        emit ItemListed(\\n            _msgSender(),\\n            _nftAddress,\\n            _tokenId,\\n            _quantity,\\n            _pricePerItem,\\n            _expirationTime\\n        );\\n    }\\n\\n    function updateListing(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        uint256 _newQuantity,\\n        uint256 _newPricePerItem,\\n        uint256 _newExpirationTime\\n    ) external nonReentrant isListed(_nftAddress, _tokenId, _msgSender()) {\\n        require(_newExpirationTime > block.timestamp, \\\"invalid expiration time\\\");\\n\\n        Listing storage listedItem = listings[_nftAddress][_tokenId][_msgSender()];\\n        if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)) {\\n            IERC721 nft = IERC721(_nftAddress);\\n            require(nft.ownerOf(_tokenId) == _msgSender(), \\\"not owning item\\\");\\n        } else if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC1155)) {\\n            IERC1155 nft = IERC1155(_nftAddress);\\n            require(nft.balanceOf(_msgSender(), _tokenId) >= _newQuantity, \\\"must hold enough nfts\\\");\\n        } else {\\n            revert(\\\"invalid nft address\\\");\\n        }\\n\\n        listedItem.quantity = _newQuantity;\\n        listedItem.pricePerItem = _newPricePerItem;\\n        listedItem.expirationTime = _newExpirationTime;\\n\\n        emit ItemUpdated(\\n            _msgSender(),\\n            _nftAddress,\\n            _tokenId,\\n            _newQuantity,\\n            _newPricePerItem,\\n            _newExpirationTime\\n        );\\n    }\\n\\n    function cancelListing(address _nftAddress, uint256 _tokenId)\\n        external\\n        nonReentrant\\n        isListed(_nftAddress, _tokenId, _msgSender())\\n    {\\n        _cancelListing(_nftAddress, _tokenId, _msgSender());\\n    }\\n\\n    function _cancelListing(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _owner\\n    ) internal {\\n        Listing memory listedItem = listings[_nftAddress][_tokenId][_owner];\\n        if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)) {\\n            IERC721 nft = IERC721(_nftAddress);\\n            require(nft.ownerOf(_tokenId) == _owner, \\\"not owning item\\\");\\n        } else if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC1155)) {\\n            IERC1155 nft = IERC1155(_nftAddress);\\n            require(nft.balanceOf(_msgSender(), _tokenId) >= listedItem.quantity, \\\"not owning item\\\");\\n        } else {\\n            revert(\\\"invalid nft address\\\");\\n        }\\n\\n        delete (listings[_nftAddress][_tokenId][_owner]);\\n        emit ItemCanceled(_owner, _nftAddress, _tokenId);\\n    }\\n\\n    function buyItem(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _owner,\\n        uint256 _quantity\\n    )\\n        external\\n        nonReentrant\\n        isListed(_nftAddress, _tokenId, _owner)\\n        validListing(_nftAddress, _tokenId, _owner)\\n    {\\n        require(_msgSender() != _owner, \\\"Cannot buy your own item\\\");\\n\\n        Listing memory listedItem = listings[_nftAddress][_tokenId][_owner];\\n        require(listedItem.quantity >= _quantity, \\\"not enough quantity\\\");\\n\\n        // Transfer NFT to buyer\\n        if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)) {\\n            IERC721(_nftAddress).safeTransferFrom(_owner, _msgSender(), _tokenId);\\n        } else {\\n            IERC1155(_nftAddress).safeTransferFrom(_owner, _msgSender(), _tokenId, _quantity, bytes(\\\"\\\"));\\n        }\\n\\n        if (listedItem.quantity == _quantity) {\\n            delete (listings[_nftAddress][_tokenId][_owner]);\\n        } else {\\n            listings[_nftAddress][_tokenId][_owner].quantity -= _quantity;\\n        }\\n\\n        emit ItemSold(\\n            _owner,\\n            _msgSender(),\\n            _nftAddress,\\n            _tokenId,\\n            _quantity,\\n            listedItem.pricePerItem\\n        );\\n\\n        TreasureNFTOracle(oracle).reportSale(_nftAddress, _tokenId, paymentToken, listedItem.pricePerItem);\\n        _buyItem(listedItem.pricePerItem, _quantity, _owner);\\n    }\\n\\n    function _buyItem(\\n        uint256 _pricePerItem,\\n        uint256 _quantity,\\n        address _owner\\n    ) internal {\\n        uint256 totalPrice = _pricePerItem * _quantity;\\n        uint256 feeAmount = totalPrice * fee / BASIS_POINTS;\\n        IERC20(paymentToken).safeTransferFrom(_msgSender(), feeReceipient, feeAmount);\\n        IERC20(paymentToken).safeTransferFrom(_msgSender(), _owner, totalPrice - feeAmount);\\n    }\\n\\n    // admin\\n\\n    function setFee(uint256 _fee) public onlyOwner {\\n        require(_fee < BASIS_POINTS, \\\"max fee\\\");\\n        fee = _fee;\\n        emit UpdateFee(_fee);\\n    }\\n\\n    function setFeeRecipient(address _feeRecipient) public onlyOwner {\\n        feeReceipient = _feeRecipient;\\n        emit UpdateFeeRecipient(_feeRecipient);\\n    }\\n\\n    function setOracle(address _oracle) public onlyOwner {\\n        oracle = _oracle;\\n        emit UpdateOracle(_oracle);\\n    }\\n\\n    function setPaymentToken(address _paymentToken) public onlyOwner {\\n        paymentToken = _paymentToken;\\n        emit UpdatePaymentToken(_paymentToken);\\n    }\\n\\n    function setOracleOwner(address _newOwner) public onlyOwner {\\n        TreasureNFTOracle(oracle).transferOwnership(_newOwner);\\n    }\\n\\n    function addToWhitelist(address _nft) external onlyOwner {\\n        require(!nftWhitelist[_nft], \\\"nft already whitelisted\\\");\\n        nftWhitelist[_nft] = true;\\n        emit NftWhitelistAdd(_nft);\\n    }\\n\\n    function removeFromWhitelist(address _nft) external onlyOwner onlyWhitelisted(_nft) {\\n        nftWhitelist[_nft] = false;\\n        emit NftWhitelistRemove(_nft);\\n    }\\n}\\n\",\"keccak256\":\"0x1b7084894a40ff8053ffe4cae94da6b854097c57eda8da4559a5d53d244ef519\",\"license\":\"MIT\"},\"contracts/TreasureMarketplaceBuyer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport '@openzeppelin/contracts/interfaces/IERC165.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol';\\n\\nimport './TreasureMarketplace.sol';\\n\\ncontract TreasureMarketplaceBuyer is ERC721Holder, ERC1155Holder {\\n    using SafeERC20 for IERC20;\\n\\n    bytes4 private constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\n    bytes4 private constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    TreasureMarketplace public marketplace;\\n\\n    constructor(address _marketplace) {\\n        marketplace = TreasureMarketplace(_marketplace);\\n    }\\n\\n    function buyItem(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _owner,\\n        uint256 _quantity,\\n        uint256 _pricePerItem\\n    ) external {\\n        (, uint256 pricePerItem,) = marketplace.listings(_nftAddress, _tokenId, _owner);\\n\\n        require(pricePerItem == _pricePerItem, \\\"pricePerItem changed!\\\");\\n\\n        uint256 totalPrice = _pricePerItem * _quantity;\\n        IERC20(marketplace.paymentToken()).safeTransferFrom(msg.sender, address(this), totalPrice);\\n        IERC20(marketplace.paymentToken()).safeApprove(address(marketplace), totalPrice);\\n\\n        marketplace.buyItem(_nftAddress, _tokenId, _owner, _quantity);\\n\\n        if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)) {\\n            IERC721(_nftAddress).safeTransferFrom(address(this), msg.sender, _tokenId);\\n        } else {\\n            IERC1155(_nftAddress).safeTransferFrom(address(this), msg.sender, _tokenId, _quantity, bytes(\\\"\\\"));\\n        }\\n    }\\n\\n    // just in case there's anything stuck here\\n\\n    function withdraw() external {\\n        IERC20 token = IERC20(marketplace.paymentToken());\\n        token.safeTransferFrom(address(this), marketplace.owner(), token.balanceOf(address(this)));\\n    }\\n\\n    function withdrawNFT(address _nftAddress, uint256 _tokenId, uint256 _quantity) external {\\n        if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)) {\\n            IERC721(_nftAddress).safeTransferFrom(address(this), marketplace.owner(), _tokenId);\\n        } else {\\n            IERC1155(_nftAddress).safeTransferFrom(address(this), marketplace.owner(), _tokenId, _quantity, bytes(\\\"\\\"));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbe956a0ea3b7780703e7705e07f56e7e99b87cd5633299d025fc827d6c59f79b\",\"license\":\"MIT\"},\"contracts/TreasureNFTOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\ncontract TreasureNFTOracle is Ownable {\\n\\n    struct Price {\\n        uint256 price;\\n        address denomination;\\n    }\\n\\n    /// _nftAddress => _tokenId => Price\\n    mapping(address => mapping(uint256 => Price)) public getPrice;\\n\\n    event PriceUpdate(address indexed nftAddress, uint256 indexed tokenId, address paymentToken, uint256 pricePerItem);\\n\\n    function reportSale(address _nftAddress, uint256 _tokenId, address _paymentToken, uint256 _pricePerItem) external onlyOwner {\\n        getPrice[_nftAddress][_tokenId] = Price(_pricePerItem, _paymentToken);\\n        emit PriceUpdate(_nftAddress, _tokenId, _paymentToken, _pricePerItem);\\n    }\\n}\\n\",\"keccak256\":\"0x44866ef29c108626b6fcfde40c307616a6724b74fd678b1aba15d336dc6437b6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161134238038061134283398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6112af806100936000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80637d1a65331161005b5780637d1a653314610109578063abc8c7af1461011c578063bc197c8114610147578063f23a6e611461016657600080fd5b806301ffc9a71461008d578063150b7a02146100b55780633ccfd60b146100ec5780634d67ad76146100f6575b600080fd5b6100a061009b3660046110be565b610185565b60405190151581526020015b60405180910390f35b6100d36100c3366004610f40565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016100ac565b6100f46101bc565b005b6100f4610104366004611067565b610359565b6100f4610117366004611015565b6105a8565b60005461012f906001600160a01b031681565b6040516001600160a01b0390911681526020016100ac565b6100d3610155366004610e92565b63bc197c8160e01b95945050505050565b6100d3610174366004610fac565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b14806101b657506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008060009054906101000a90046001600160a01b03166001600160a01b0316633013ce296040518163ffffffff1660e01b815260040160206040518083038186803b15801561020b57600080fd5b505afa15801561021f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102439190610e75565b90506103563060008054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561029557600080fd5b505afa1580156102a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102cd9190610e75565b6040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b15801561030c57600080fd5b505afa158015610320573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034491906110e8565b6001600160a01b03851692919061099e565b50565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038416906301ffc9a79060240160206040518083038186803b15801561039f57600080fd5b505afa1580156103b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d7919061109c565b156104dd57826001600160a01b03166342842e0e3060008054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561043857600080fd5b505afa15801561044c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104709190610e75565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018590526064015b600060405180830381600087803b1580156104c057600080fd5b505af11580156104d4573d6000803e3d6000fd5b50505050505050565b826001600160a01b031663f242432a3060008054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561053957600080fd5b505afa15801561054d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105719190610e75565b8585604051806020016040528060008152506040518663ffffffff1660e01b81526004016104a6959493929190611177565b505050565b60008054604051636bd3a64b60e01b81526001600160a01b03888116600483015260248201889052868116604483015290911690636bd3a64b9060640160606040518083038186803b1580156105fd57600080fd5b505afa158015610611573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106359190611101565b509150508181146106855760405162461bcd60e51b815260206004820152601560248201527470726963655065724974656d206368616e6765642160581b60448201526064015b60405180910390fd5b600061069184846111f5565b905061072e33308360008054906101000a90046001600160a01b03166001600160a01b0316633013ce296040518163ffffffff1660e01b815260040160206040518083038186803b1580156106e557600080fd5b505afa1580156106f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071d9190610e75565b6001600160a01b031692919061099e565b60005460408051633013ce2960e01b815290516107c0926001600160a01b03169184918391633013ce29916004808301926020929190829003018186803b15801561077857600080fd5b505afa15801561078c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b09190610e75565b6001600160a01b03169190610a0f565b600054604051633789418160e21b81526001600160a01b038981166004830152602482018990528781166044830152606482018790529091169063de25060490608401600060405180830381600087803b15801561081d57600080fd5b505af1158015610831573d6000803e3d6000fd5b50506040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038a1692506301ffc9a7915060240160206040518083038186803b15801561087b57600080fd5b505afa15801561088f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b3919061109c565b1561092357604051632142170760e11b8152306004820152336024820152604481018790526001600160a01b038816906342842e0e90606401600060405180830381600087803b15801561090657600080fd5b505af115801561091a573d6000803e3d6000fd5b505050506104d4565b60408051602081018252600081529051637921219560e11b81526001600160a01b0389169163f242432a9161096391309133918c918b9190600401611177565b600060405180830381600087803b15801561097d57600080fd5b505af1158015610991573d6000803e3d6000fd5b5050505050505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610a099085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610b33565b50505050565b801580610a985750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015610a5e57600080fd5b505afa158015610a72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9691906110e8565b155b610b035760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161067c565b6040516001600160a01b0383166024820152604481018290526105a390849063095ea7b360e01b906064016109d2565b6000610b88826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610c059092919063ffffffff16565b8051909150156105a35780806020019051810190610ba6919061109c565b6105a35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161067c565b6060610c148484600085610c1e565b90505b9392505050565b606082471015610c7f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161067c565b843b610ccd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161067c565b600080866001600160a01b03168587604051610ce9919061115b565b60006040518083038185875af1925050503d8060008114610d26576040519150601f19603f3d011682016040523d82523d6000602084013e610d2b565b606091505b5091509150610d3b828286610d46565b979650505050505050565b60608315610d55575081610c17565b825115610d655782518084602001fd5b8160405162461bcd60e51b815260040161067c91906111b1565b600082601f830112610d9057600080fd5b8135602067ffffffffffffffff821115610dac57610dac61124e565b8160051b610dbb8282016111c4565b838152828101908684018388018501891015610dd657600080fd5b600093505b85841015610df9578035835260019390930192918401918401610ddb565b50979650505050505050565b600082601f830112610e1657600080fd5b813567ffffffffffffffff811115610e3057610e3061124e565b610e43601f8201601f19166020016111c4565b818152846020838601011115610e5857600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215610e8757600080fd5b8151610c1781611264565b600080600080600060a08688031215610eaa57600080fd5b8535610eb581611264565b94506020860135610ec581611264565b9350604086013567ffffffffffffffff80821115610ee257600080fd5b610eee89838a01610d7f565b94506060880135915080821115610f0457600080fd5b610f1089838a01610d7f565b93506080880135915080821115610f2657600080fd5b50610f3388828901610e05565b9150509295509295909350565b60008060008060808587031215610f5657600080fd5b8435610f6181611264565b93506020850135610f7181611264565b925060408501359150606085013567ffffffffffffffff811115610f9457600080fd5b610fa087828801610e05565b91505092959194509250565b600080600080600060a08688031215610fc457600080fd5b8535610fcf81611264565b94506020860135610fdf81611264565b93506040860135925060608601359150608086013567ffffffffffffffff81111561100957600080fd5b610f3388828901610e05565b600080600080600060a0868803121561102d57600080fd5b853561103881611264565b945060208601359350604086013561104f81611264565b94979396509394606081013594506080013592915050565b60008060006060848603121561107c57600080fd5b833561108781611264565b95602085013595506040909401359392505050565b6000602082840312156110ae57600080fd5b81518015158114610c1757600080fd5b6000602082840312156110d057600080fd5b81356001600160e01b031981168114610c1757600080fd5b6000602082840312156110fa57600080fd5b5051919050565b60008060006060848603121561111657600080fd5b8351925060208401519150604084015190509250925092565b60008151808452611147816020860160208601611222565b601f01601f19169290920160200192915050565b6000825161116d818460208701611222565b9190910192915050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090610d3b9083018461112f565b602081526000610c17602083018461112f565b604051601f8201601f1916810167ffffffffffffffff811182821017156111ed576111ed61124e565b604052919050565b600081600019048311821515161561121d57634e487b7160e01b600052601160045260246000fd5b500290565b60005b8381101561123d578181015183820152602001611225565b83811115610a095750506000910152565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461035657600080fdfea26469706673582212205d2704883adf0a02939553ee3e90804a92167339e712417dc2841e80e7e1c0b664736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80637d1a65331161005b5780637d1a653314610109578063abc8c7af1461011c578063bc197c8114610147578063f23a6e611461016657600080fd5b806301ffc9a71461008d578063150b7a02146100b55780633ccfd60b146100ec5780634d67ad76146100f6575b600080fd5b6100a061009b3660046110be565b610185565b60405190151581526020015b60405180910390f35b6100d36100c3366004610f40565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016100ac565b6100f46101bc565b005b6100f4610104366004611067565b610359565b6100f4610117366004611015565b6105a8565b60005461012f906001600160a01b031681565b6040516001600160a01b0390911681526020016100ac565b6100d3610155366004610e92565b63bc197c8160e01b95945050505050565b6100d3610174366004610fac565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b14806101b657506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008060009054906101000a90046001600160a01b03166001600160a01b0316633013ce296040518163ffffffff1660e01b815260040160206040518083038186803b15801561020b57600080fd5b505afa15801561021f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102439190610e75565b90506103563060008054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561029557600080fd5b505afa1580156102a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102cd9190610e75565b6040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b15801561030c57600080fd5b505afa158015610320573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034491906110e8565b6001600160a01b03851692919061099e565b50565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038416906301ffc9a79060240160206040518083038186803b15801561039f57600080fd5b505afa1580156103b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d7919061109c565b156104dd57826001600160a01b03166342842e0e3060008054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561043857600080fd5b505afa15801561044c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104709190610e75565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018590526064015b600060405180830381600087803b1580156104c057600080fd5b505af11580156104d4573d6000803e3d6000fd5b50505050505050565b826001600160a01b031663f242432a3060008054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561053957600080fd5b505afa15801561054d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105719190610e75565b8585604051806020016040528060008152506040518663ffffffff1660e01b81526004016104a6959493929190611177565b505050565b60008054604051636bd3a64b60e01b81526001600160a01b03888116600483015260248201889052868116604483015290911690636bd3a64b9060640160606040518083038186803b1580156105fd57600080fd5b505afa158015610611573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106359190611101565b509150508181146106855760405162461bcd60e51b815260206004820152601560248201527470726963655065724974656d206368616e6765642160581b60448201526064015b60405180910390fd5b600061069184846111f5565b905061072e33308360008054906101000a90046001600160a01b03166001600160a01b0316633013ce296040518163ffffffff1660e01b815260040160206040518083038186803b1580156106e557600080fd5b505afa1580156106f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071d9190610e75565b6001600160a01b031692919061099e565b60005460408051633013ce2960e01b815290516107c0926001600160a01b03169184918391633013ce29916004808301926020929190829003018186803b15801561077857600080fd5b505afa15801561078c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b09190610e75565b6001600160a01b03169190610a0f565b600054604051633789418160e21b81526001600160a01b038981166004830152602482018990528781166044830152606482018790529091169063de25060490608401600060405180830381600087803b15801561081d57600080fd5b505af1158015610831573d6000803e3d6000fd5b50506040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038a1692506301ffc9a7915060240160206040518083038186803b15801561087b57600080fd5b505afa15801561088f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b3919061109c565b1561092357604051632142170760e11b8152306004820152336024820152604481018790526001600160a01b038816906342842e0e90606401600060405180830381600087803b15801561090657600080fd5b505af115801561091a573d6000803e3d6000fd5b505050506104d4565b60408051602081018252600081529051637921219560e11b81526001600160a01b0389169163f242432a9161096391309133918c918b9190600401611177565b600060405180830381600087803b15801561097d57600080fd5b505af1158015610991573d6000803e3d6000fd5b5050505050505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610a099085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610b33565b50505050565b801580610a985750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015610a5e57600080fd5b505afa158015610a72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9691906110e8565b155b610b035760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161067c565b6040516001600160a01b0383166024820152604481018290526105a390849063095ea7b360e01b906064016109d2565b6000610b88826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610c059092919063ffffffff16565b8051909150156105a35780806020019051810190610ba6919061109c565b6105a35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161067c565b6060610c148484600085610c1e565b90505b9392505050565b606082471015610c7f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161067c565b843b610ccd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161067c565b600080866001600160a01b03168587604051610ce9919061115b565b60006040518083038185875af1925050503d8060008114610d26576040519150601f19603f3d011682016040523d82523d6000602084013e610d2b565b606091505b5091509150610d3b828286610d46565b979650505050505050565b60608315610d55575081610c17565b825115610d655782518084602001fd5b8160405162461bcd60e51b815260040161067c91906111b1565b600082601f830112610d9057600080fd5b8135602067ffffffffffffffff821115610dac57610dac61124e565b8160051b610dbb8282016111c4565b838152828101908684018388018501891015610dd657600080fd5b600093505b85841015610df9578035835260019390930192918401918401610ddb565b50979650505050505050565b600082601f830112610e1657600080fd5b813567ffffffffffffffff811115610e3057610e3061124e565b610e43601f8201601f19166020016111c4565b818152846020838601011115610e5857600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215610e8757600080fd5b8151610c1781611264565b600080600080600060a08688031215610eaa57600080fd5b8535610eb581611264565b94506020860135610ec581611264565b9350604086013567ffffffffffffffff80821115610ee257600080fd5b610eee89838a01610d7f565b94506060880135915080821115610f0457600080fd5b610f1089838a01610d7f565b93506080880135915080821115610f2657600080fd5b50610f3388828901610e05565b9150509295509295909350565b60008060008060808587031215610f5657600080fd5b8435610f6181611264565b93506020850135610f7181611264565b925060408501359150606085013567ffffffffffffffff811115610f9457600080fd5b610fa087828801610e05565b91505092959194509250565b600080600080600060a08688031215610fc457600080fd5b8535610fcf81611264565b94506020860135610fdf81611264565b93506040860135925060608601359150608086013567ffffffffffffffff81111561100957600080fd5b610f3388828901610e05565b600080600080600060a0868803121561102d57600080fd5b853561103881611264565b945060208601359350604086013561104f81611264565b94979396509394606081013594506080013592915050565b60008060006060848603121561107c57600080fd5b833561108781611264565b95602085013595506040909401359392505050565b6000602082840312156110ae57600080fd5b81518015158114610c1757600080fd5b6000602082840312156110d057600080fd5b81356001600160e01b031981168114610c1757600080fd5b6000602082840312156110fa57600080fd5b5051919050565b60008060006060848603121561111657600080fd5b8351925060208401519150604084015190509250925092565b60008151808452611147816020860160208601611222565b601f01601f19169290920160200192915050565b6000825161116d818460208701611222565b9190910192915050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090610d3b9083018461112f565b602081526000610c17602083018461112f565b604051601f8201601f1916810167ffffffffffffffff811182821017156111ed576111ed61124e565b604052919050565b600081600019048311821515161561121d57634e487b7160e01b600052601160045260246000fd5b500290565b60005b8381101561123d578181015183820152602001611225565b83811115610a095750506000910152565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461035657600080fdfea26469706673582212205d2704883adf0a02939553ee3e90804a92167339e712417dc2841e80e7e1c0b664736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7282,
        "contract": "contracts/TreasureMarketplaceBuyer.sol:TreasureMarketplaceBuyer",
        "label": "marketplace",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(TreasureMarketplace)7255"
      }
    ],
    "types": {
      "t_contract(TreasureMarketplace)7255": {
        "encoding": "inplace",
        "label": "contract TreasureMarketplace",
        "numberOfBytes": "20"
      }
    }
  }
}