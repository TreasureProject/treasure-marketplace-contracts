{
  "language": "Solidity",
  "sources": {
    "contracts/TreasureMarketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\n\nimport \"./interfaces/ITreasureNFTPriceTracker.sol\";\n\n/// @title  Treasure NFT marketplace\n/// @notice This contract allows you to buy and sell NFTs from token contracts that are approved by the contract owner.\n///         Please note that this contract is upgradeable. In the event of a compromised ProxyAdmin contract owner,\n///         collectable tokens and payments may be at risk. To prevent this, the ProxyAdmin is owned by a multi-sig\n///         governed by the TreasureDAO council.\n/// @dev    This contract does not store any tokens at any time, it's only collects details \"the sale\" and approvals\n///         from both parties and preforms non-custodial transaction by transfering NFT from owner to buying and payment\n///         token from buying to NFT owner.\ncontract TreasureMarketplace is AccessControlEnumerableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    struct ListingOrBid {\n        /// @dev number of tokens for sale or requested (1 if ERC-721 token is active for sale) (for bids, quantity for ERC-721 can be greater than 1)\n        uint64 quantity;\n        /// @dev price per token sold, i.e. extended sale price equals this times quantity purchased. For bids, price offered per item.\n        uint128 pricePerItem;\n        /// @dev timestamp after which the listing/bid is invalid\n        uint64 expirationTime;\n        /// @dev the payment token for this listing/bid.\n        address paymentTokenAddress;\n    }\n\n    struct CollectionOwnerFee {\n        /// @dev the fee, out of 10,000, that this collection owner will be given for each sale\n        uint32 fee;\n        /// @dev the recipient of the collection specific fee\n        address recipient;\n    }\n\n    enum TokenApprovalStatus {NOT_APPROVED, ERC_721_APPROVED, ERC_1155_APPROVED}\n\n    /// @notice TREASURE_MARKETPLACE_ADMIN_ROLE role hash\n    bytes32 public constant TREASURE_MARKETPLACE_ADMIN_ROLE = keccak256(\"TREASURE_MARKETPLACE_ADMIN_ROLE\");\n\n    /// @notice ERC165 interface signatures\n    bytes4 private constant INTERFACE_ID_ERC721 = 0x80ac58cd;\n    bytes4 private constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\n\n    /// @notice the denominator for portion calculation, i.e. how many basis points are in 100%\n    uint256 public constant BASIS_POINTS = 10000;\n\n    /// @notice the maximum fee which the owner may set (in units of basis points)\n    uint256 public constant MAX_FEE = 1500;\n\n    /// @notice the maximum fee which the collection owner may set\n    uint256 public constant MAX_COLLECTION_FEE = 2000;\n\n    /// @notice the minimum price for which any item can be sold\n    uint256 public constant MIN_PRICE = 1e9;\n\n    /// @notice the default token that is used for marketplace sales and fee payments. Can be overridden by collectionToTokenAddress.\n    IERC20Upgradeable public paymentToken;\n\n    /// @notice fee portion (in basis points) for each sale, (e.g. a value of 100 is 100/10000 = 1%). This is the fee if no collection owner fee is set.\n    uint256 public fee;\n\n    /// @notice address that receives fees\n    address public feeReceipient;\n\n    /// @notice mapping for listings, maps: nftAddress => tokenId => offeror\n    mapping(address => mapping(uint256 => mapping(address => ListingOrBid))) public listings;\n\n    /// @notice NFTs which the owner has approved to be sold on the marketplace, maps: nftAddress => status\n    mapping(address => TokenApprovalStatus) public tokenApprovals;\n\n    /// @notice fee portion (in basis points) for each sale. This is used if a separate fee has been set for the collection owner.\n    uint256 public feeWithCollectionOwner;\n\n    /// @notice Maps the collection address to the fees which the collection owner collects. Some collections may not have a seperate fee, such as those owned by the Treasure DAO.\n    mapping(address => CollectionOwnerFee) public collectionToCollectionOwnerFee;\n\n    /// @notice Maps the collection address to the payment token that will be used for purchasing. If the address is the zero address, it will use the default paymentToken.\n    mapping(address => address) public collectionToPaymentToken;\n\n    /// @notice The address for weth.\n    IERC20Upgradeable public weth;\n\n    /// @notice mapping for token bids (721/1155): nftAddress => tokneId => offeror\n    mapping(address => mapping(uint256 => mapping(address => ListingOrBid))) public tokenBids;\n\n    /// @notice mapping for collection level bids (721 only): nftAddress => offeror\n    mapping(address => mapping(address => ListingOrBid)) public collectionBids;\n\n    /// @notice Indicates if bid related functions are active.\n    bool public areBidsActive;\n\n    /// @notice Address of the contract that tracks sales and prices of collections.\n    address public priceTrackerAddress;\n\n    /// @notice The fee portion was updated\n    /// @param  fee new fee amount (in units of basis points)\n    event UpdateFee(uint256 fee);\n\n    /// @notice The fee portion was updated for collections that have a collection owner.\n    /// @param  fee new fee amount (in units of basis points)\n    event UpdateFeeWithCollectionOwner(uint256 fee);\n\n    /// @notice A collection's fees have changed\n    /// @param  _collection  The collection\n    /// @param  _recipient   The recipient of the fees. If the address is 0, the collection fees for this collection have been removed.\n    /// @param  _fee         The fee amount (in units of basis points)\n    event UpdateCollectionOwnerFee(address _collection, address _recipient, uint256 _fee);\n\n    /// @notice The fee recipient was updated\n    /// @param  feeRecipient the new recipient to get fees\n    event UpdateFeeRecipient(address feeRecipient);\n\n\n    /// @notice The approval status for a token was updated\n    /// @param  nft    which token contract was updated\n    /// @param  status the new status\n    /// @param  paymentToken the token that will be used for payments for this collection\n    event TokenApprovalStatusUpdated(address nft, TokenApprovalStatus status, address paymentToken);\n\n    event TokenBidCreatedOrUpdated(\n        address bidder,\n        address nftAddress,\n        uint256 tokenId,\n        uint64 quantity,\n        uint128 pricePerItem,\n        uint64 expirationTime,\n        address paymentToken\n    );\n\n    event CollectionBidCreatedOrUpdated(\n        address bidder,\n        address nftAddress,\n        uint64 quantity,\n        uint128 pricePerItem,\n        uint64 expirationTime,\n        address paymentToken\n    );\n\n    event TokenBidCancelled(\n        address bidder,\n        address nftAddress,\n        uint256 tokenId\n    );\n\n    event CollectionBidCancelled(\n        address bidder,\n        address nftAddress\n    );\n\n    event BidAccepted(\n        address seller,\n        address bidder,\n        address nftAddress,\n        uint256 tokenId,\n        uint64 quantity,\n        uint128 pricePerItem,\n        address paymentToken,\n        BidType bidType\n    );\n\n    /// @notice An item was listed for sale\n    /// @param  seller         the offeror of the item\n    /// @param  nftAddress     which token contract holds the offered token\n    /// @param  tokenId        the identifier for the offered token\n    /// @param  quantity       how many of this token identifier are offered (or 1 for a ERC-721 token)\n    /// @param  pricePerItem   the price (in units of the paymentToken) for each token offered\n    /// @param  expirationTime UNIX timestamp after when this listing expires\n    /// @param  paymentToken   the token used to list this item\n    event ItemListed(\n        address seller,\n        address nftAddress,\n        uint256 tokenId,\n        uint64 quantity,\n        uint128 pricePerItem,\n        uint64 expirationTime,\n        address paymentToken\n    );\n\n    /// @notice An item listing was updated\n    /// @param  seller         the offeror of the item\n    /// @param  nftAddress     which token contract holds the offered token\n    /// @param  tokenId        the identifier for the offered token\n    /// @param  quantity       how many of this token identifier are offered (or 1 for a ERC-721 token)\n    /// @param  pricePerItem   the price (in units of the paymentToken) for each token offered\n    /// @param  expirationTime UNIX timestamp after when this listing expires\n    /// @param  paymentToken   the token used to list this item\n    event ItemUpdated(\n        address seller,\n        address nftAddress,\n        uint256 tokenId,\n        uint64 quantity,\n        uint128 pricePerItem,\n        uint64 expirationTime,\n        address paymentToken\n    );\n\n    /// @notice An item is no longer listed for sale\n    /// @param  seller     former offeror of the item\n    /// @param  nftAddress which token contract holds the formerly offered token\n    /// @param  tokenId    the identifier for the formerly offered token\n    event ItemCanceled(address indexed seller, address indexed nftAddress, uint256 indexed tokenId);\n\n    /// @notice A listed item was sold\n    /// @param  seller       the offeror of the item\n    /// @param  buyer        the buyer of the item\n    /// @param  nftAddress   which token contract holds the sold token\n    /// @param  tokenId      the identifier for the sold token\n    /// @param  quantity     how many of this token identifier where sold (or 1 for a ERC-721 token)\n    /// @param  pricePerItem the price (in units of the paymentToken) for each token sold\n    /// @param  paymentToken the payment token that was used to pay for this item\n    event ItemSold(\n        address seller,\n        address buyer,\n        address nftAddress,\n        uint256 tokenId,\n        uint64 quantity,\n        uint128 pricePerItem,\n        address paymentToken\n    );\n    \n    /// @notice The sales tracker contract was update\n    /// @param  _priceTrackerAddress the new address to call for sales price tracking\n    event UpdateSalesTracker(address _priceTrackerAddress);\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {}\n\n    /// @notice Perform initial contract setup\n    /// @dev    The initializer modifier ensures this is only called once, the owner should confirm this was properly\n    ///         performed before publishing this contract address.\n    /// @param  _initialFee          fee to be paid on each sale, in basis points\n    /// @param  _initialFeeRecipient wallet to collets fees\n    /// @param  _initialPaymentToken address of the token that is used for settlement\n    function initialize(\n        uint256 _initialFee,\n        address _initialFeeRecipient,\n        IERC20Upgradeable _initialPaymentToken\n    )\n        external\n        initializer\n    {\n        require(address(_initialPaymentToken) != address(0), \"TreasureMarketplace: cannot set address(0)\");\n\n        __AccessControl_init_unchained();\n        __Pausable_init_unchained();\n        __ReentrancyGuard_init_unchained();\n\n        _setRoleAdmin(TREASURE_MARKETPLACE_ADMIN_ROLE, TREASURE_MARKETPLACE_ADMIN_ROLE);\n        _grantRole(TREASURE_MARKETPLACE_ADMIN_ROLE, msg.sender);\n\n        setFee(_initialFee, _initialFee);\n        setFeeRecipient(_initialFeeRecipient);\n        paymentToken = _initialPaymentToken;\n    }\n\n    /// @notice Creates an item listing. You must authorize this marketplace with your item's token contract to list.\n    /// @param  _nftAddress     which token contract holds the offered token\n    /// @param  _tokenId        the identifier for the offered token\n    /// @param  _quantity       how many of this token identifier are offered (or 1 for a ERC-721 token)\n    /// @param  _pricePerItem   the price (in units of the paymentToken) for each token offered\n    /// @param  _expirationTime UNIX timestamp after when this listing expires\n    function createListing(\n        address _nftAddress,\n        uint256 _tokenId,\n        uint64 _quantity,\n        uint128 _pricePerItem,\n        uint64 _expirationTime,\n        address _paymentToken\n    )\n        external\n        nonReentrant\n        whenNotPaused\n    {\n        require(listings[_nftAddress][_tokenId][_msgSender()].quantity == 0, \"TreasureMarketplace: already listed\");\n        _createListingWithoutEvent(_nftAddress, _tokenId, _quantity, _pricePerItem, _expirationTime, _paymentToken);\n        emit ItemListed(\n            _msgSender(),\n            _nftAddress,\n            _tokenId,\n            _quantity,\n            _pricePerItem,\n            _expirationTime,\n            _paymentToken\n        );\n    }\n\n    /// @notice Updates an item listing\n    /// @param  _nftAddress        which token contract holds the offered token\n    /// @param  _tokenId           the identifier for the offered token\n    /// @param  _newQuantity       how many of this token identifier are offered (or 1 for a ERC-721 token)\n    /// @param  _newPricePerItem   the price (in units of the paymentToken) for each token offered\n    /// @param  _newExpirationTime UNIX timestamp after when this listing expires\n    function updateListing(\n        address _nftAddress,\n        uint256 _tokenId,\n        uint64 _newQuantity,\n        uint128 _newPricePerItem,\n        uint64 _newExpirationTime,\n        address _paymentToken\n    )\n        external\n        nonReentrant\n        whenNotPaused\n    {\n        require(listings[_nftAddress][_tokenId][_msgSender()].quantity > 0, \"TreasureMarketplace: not listed item\");\n        _createListingWithoutEvent(_nftAddress, _tokenId, _newQuantity, _newPricePerItem, _newExpirationTime, _paymentToken);\n        emit ItemUpdated(\n            _msgSender(),\n            _nftAddress,\n            _tokenId,\n            _newQuantity,\n            _newPricePerItem,\n            _newExpirationTime,\n            _paymentToken\n        );\n    }\n\n    function createOrUpdateListing(\n        address _nftAddress,\n        uint256 _tokenId,\n        uint64 _quantity,\n        uint128 _pricePerItem,\n        uint64 _expirationTime,\n        address _paymentToken)\n    external\n    nonReentrant\n    whenNotPaused\n    {\n        bool _existingListing = listings[_nftAddress][_tokenId][_msgSender()].quantity > 0;\n        _createListingWithoutEvent(_nftAddress, _tokenId, _quantity, _pricePerItem, _expirationTime, _paymentToken);\n        // Keep the events the same as they were before.\n        if(_existingListing) {\n            emit ItemUpdated(\n                _msgSender(),\n                _nftAddress,\n                _tokenId,\n                _quantity,\n                _pricePerItem,\n                _expirationTime,\n                _paymentToken\n            );\n        } else {\n            emit ItemListed(\n                _msgSender(),\n                _nftAddress,\n                _tokenId,\n                _quantity,\n                _pricePerItem,\n                _expirationTime,\n                _paymentToken\n            );\n        }\n    }\n\n    /// @notice Performs the listing and does not emit the event\n    /// @param  _nftAddress     which token contract holds the offered token\n    /// @param  _tokenId        the identifier for the offered token\n    /// @param  _quantity       how many of this token identifier are offered (or 1 for a ERC-721 token)\n    /// @param  _pricePerItem   the price (in units of the paymentToken) for each token offered\n    /// @param  _expirationTime UNIX timestamp after when this listing expires\n    function _createListingWithoutEvent(\n        address _nftAddress,\n        uint256 _tokenId,\n        uint64 _quantity,\n        uint128 _pricePerItem,\n        uint64 _expirationTime,\n        address _paymentToken\n    )\n        internal\n    {\n        require(_expirationTime > block.timestamp, \"TreasureMarketplace: invalid expiration time\");\n        require(_pricePerItem >= MIN_PRICE, \"TreasureMarketplace: below min price\");\n\n        if (tokenApprovals[_nftAddress] == TokenApprovalStatus.ERC_721_APPROVED) {\n            IERC721Upgradeable nft = IERC721Upgradeable(_nftAddress);\n            require(nft.ownerOf(_tokenId) == _msgSender(), \"TreasureMarketplace: not owning item\");\n            require(nft.isApprovedForAll(_msgSender(), address(this)), \"TreasureMarketplace: item not approved\");\n            require(_quantity == 1, \"TreasureMarketplace: cannot list multiple ERC721\");\n        } else if (tokenApprovals[_nftAddress] == TokenApprovalStatus.ERC_1155_APPROVED) {\n            IERC1155Upgradeable nft = IERC1155Upgradeable(_nftAddress);\n            require(nft.balanceOf(_msgSender(), _tokenId) >= _quantity, \"TreasureMarketplace: must hold enough nfts\");\n            require(nft.isApprovedForAll(_msgSender(), address(this)), \"TreasureMarketplace: item not approved\");\n            require(_quantity > 0, \"TreasureMarketplace: nothing to list\");\n        } else {\n            revert(\"TreasureMarketplace: token is not approved for trading\");\n        }\n\n        address _paymentTokenForCollection = getPaymentTokenForCollection(_nftAddress);\n        require(_paymentTokenForCollection == _paymentToken, \"TreasureMarketplace: Wrong payment token\");\n\n        listings[_nftAddress][_tokenId][_msgSender()] = ListingOrBid(\n            _quantity,\n            _pricePerItem,\n            _expirationTime,\n            _paymentToken\n        );\n    }\n\n    /// @notice Remove an item listing\n    /// @param  _nftAddress which token contract holds the offered token\n    /// @param  _tokenId    the identifier for the offered token\n    function cancelListing(address _nftAddress, uint256 _tokenId)\n        external\n        nonReentrant\n    {\n        delete (listings[_nftAddress][_tokenId][_msgSender()]);\n        emit ItemCanceled(_msgSender(), _nftAddress, _tokenId);\n    }\n\n    function cancelManyBids(CancelBidParams[] calldata _cancelBidParams) external nonReentrant {\n        for(uint256 i = 0; i < _cancelBidParams.length; i++) {\n            CancelBidParams calldata _cancelBidParam = _cancelBidParams[i];\n            if(_cancelBidParam.bidType == BidType.COLLECTION) {\n                collectionBids[_cancelBidParam.nftAddress][_msgSender()].quantity = 0;\n\n                emit CollectionBidCancelled(_msgSender(), _cancelBidParam.nftAddress);\n            } else {\n                tokenBids[_cancelBidParam.nftAddress][_cancelBidParam.tokenId][_msgSender()].quantity = 0;\n\n                emit TokenBidCancelled(_msgSender(), _cancelBidParam.nftAddress, _cancelBidParam.tokenId);\n            }\n        }\n    }\n\n    /// @notice Creates a bid for a particular token.\n    function createOrUpdateTokenBid(\n        address _nftAddress,\n        uint256 _tokenId,\n        uint64 _quantity,\n        uint128 _pricePerItem,\n        uint64 _expirationTime,\n        address _paymentToken)\n    external\n    nonReentrant\n    whenNotPaused\n    whenBiddingActive\n    {\n        if(tokenApprovals[_nftAddress] == TokenApprovalStatus.ERC_721_APPROVED) {\n            require(_quantity == 1, \"TreasureMarketplace: token bid quantity 1 for ERC721\");\n        } else if (tokenApprovals[_nftAddress] == TokenApprovalStatus.ERC_1155_APPROVED) {\n            require(_quantity > 0, \"TreasureMarketplace: bad quantity\");\n        } else {\n            revert(\"TreasureMarketplace: token is not approved for trading\");\n        }\n\n        _createBidWithoutEvent(_nftAddress, _quantity, _pricePerItem, _expirationTime, _paymentToken, tokenBids[_nftAddress][_tokenId][_msgSender()]);\n\n        emit TokenBidCreatedOrUpdated(\n            _msgSender(),\n            _nftAddress,\n            _tokenId,\n            _quantity,\n            _pricePerItem,\n            _expirationTime,\n            _paymentToken\n        );\n    }\n\n    function createOrUpdateCollectionBid(\n        address _nftAddress,\n        uint64 _quantity,\n        uint128 _pricePerItem,\n        uint64 _expirationTime,\n        address _paymentToken)\n    external\n    nonReentrant\n    whenNotPaused\n    whenBiddingActive\n    {\n        if(tokenApprovals[_nftAddress] == TokenApprovalStatus.ERC_721_APPROVED) {\n            require(_quantity > 0, \"TreasureMarketplace: Bad quantity\");\n        } else if (tokenApprovals[_nftAddress] == TokenApprovalStatus.ERC_1155_APPROVED) {\n            revert(\"TreasureMarketplace: No collection bids on 1155s\");\n        } else {\n            revert(\"TreasureMarketplace: token is not approved for trading\");\n        }\n\n        _createBidWithoutEvent(_nftAddress, _quantity, _pricePerItem, _expirationTime, _paymentToken, collectionBids[_nftAddress][_msgSender()]);\n\n        emit CollectionBidCreatedOrUpdated(\n            _msgSender(),\n            _nftAddress,\n            _quantity,\n            _pricePerItem,\n            _expirationTime,\n            _paymentToken\n        );\n    }\n\n    function _createBidWithoutEvent(\n        address _nftAddress,\n        uint64 _quantity,\n        uint128 _pricePerItem,\n        uint64 _expirationTime,\n        address _paymentToken,\n        ListingOrBid storage _bid)\n    private\n    {\n        require(_expirationTime > block.timestamp, \"TreasureMarketplace: invalid expiration time\");\n        require(_pricePerItem >= MIN_PRICE, \"TreasureMarketplace: below min price\");\n\n        address _paymentTokenForCollection = getPaymentTokenForCollection(_nftAddress);\n        require(_paymentTokenForCollection == _paymentToken, \"TreasureMarketplace: Bad payment token\");\n\n        IERC20Upgradeable _token = IERC20Upgradeable(_paymentToken);\n\n        uint256 _totalAmountNeeded = _pricePerItem * _quantity;\n\n        require(_token.allowance(_msgSender(), address(this)) >= _totalAmountNeeded && _token.balanceOf(_msgSender()) >= _totalAmountNeeded,\n            \"TreasureMarketplace: Not enough tokens owned or allowed for bid\");\n\n        _bid.quantity = _quantity;\n        _bid.pricePerItem = _pricePerItem;\n        _bid.expirationTime = _expirationTime;\n        _bid.paymentTokenAddress = _paymentToken;\n    }\n\n    function acceptCollectionBid(\n        AcceptBidParams calldata _acceptBidParams)\n    external\n    nonReentrant\n    whenNotPaused\n    whenBiddingActive\n    {\n        _acceptBid(_acceptBidParams, BidType.COLLECTION);\n    }\n\n    function acceptTokenBid(\n        AcceptBidParams calldata _acceptBidParams)\n    external\n    nonReentrant\n    whenNotPaused\n    whenBiddingActive\n    {\n        _acceptBid(_acceptBidParams, BidType.TOKEN);\n    }\n\n    function _acceptBid(AcceptBidParams calldata _acceptBidParams, BidType _bidType) private {\n        // Validate buy order\n        require(_msgSender() != _acceptBidParams.bidder, \"TreasureMarketplace: Cannot supply own bid\");\n        require(_acceptBidParams.quantity > 0, \"TreasureMarketplace: Nothing to supply to bidder\");\n\n        // Validate bid\n        ListingOrBid storage _bid = _bidType == BidType.COLLECTION\n            ? collectionBids[_acceptBidParams.nftAddress][_acceptBidParams.bidder]\n            : tokenBids[_acceptBidParams.nftAddress][_acceptBidParams.tokenId][_acceptBidParams.bidder];\n\n        require(_bid.quantity > 0, \"TreasureMarketplace: bid does not exist\");\n        require(_bid.expirationTime >= block.timestamp, \"TreasureMarketplace: bid expired\");\n        require(_bid.pricePerItem > 0, \"TreasureMarketplace: bid price invalid\");\n        require(_bid.quantity >= _acceptBidParams.quantity, \"TreasureMarketplace: not enough quantity\");\n        require(_bid.pricePerItem == _acceptBidParams.pricePerItem, \"TreasureMarketplace: price does not match\");\n\n        // Ensure the accepter, the bidder, and the collection all agree on the token to be used for the purchase.\n        // If the token used for buying/selling has changed since the bid was created, this effectively blocks\n        // all the old bids with the old payment tokens from being bought.\n        address _paymentTokenForCollection = getPaymentTokenForCollection(_acceptBidParams.nftAddress);\n\n        require(_bid.paymentTokenAddress == _acceptBidParams.paymentToken && _acceptBidParams.paymentToken == _paymentTokenForCollection, \"TreasureMarketplace: Wrong payment token\");\n\n        // Transfer NFT to buyer, also validates owner owns it, and token is approved for trading\n        if(tokenApprovals[_acceptBidParams.nftAddress] == TokenApprovalStatus.ERC_721_APPROVED) {\n            require(_acceptBidParams.quantity == 1, \"TreasureMarketplace: Cannot supply multiple ERC721s\");\n\n            IERC721Upgradeable(_acceptBidParams.nftAddress).safeTransferFrom(_msgSender(), _acceptBidParams.bidder, _acceptBidParams.tokenId);\n        } else if (tokenApprovals[_acceptBidParams.nftAddress] == TokenApprovalStatus.ERC_1155_APPROVED) {\n\n            IERC1155Upgradeable(_acceptBidParams.nftAddress).safeTransferFrom(_msgSender(), _acceptBidParams.bidder, _acceptBidParams.tokenId, _acceptBidParams.quantity, bytes(\"\"));\n        } else {\n            revert(\"TreasureMarketplace: token is not approved for trading\");\n        }\n\n        _payFees(_bid, _acceptBidParams.quantity, _acceptBidParams.nftAddress, _acceptBidParams.bidder, _msgSender(), _acceptBidParams.paymentToken, false);\n\n        // Announce accepting bid\n        emit BidAccepted(\n            _msgSender(),\n            _acceptBidParams.bidder,\n            _acceptBidParams.nftAddress,\n            _acceptBidParams.tokenId,\n            _acceptBidParams.quantity,\n            _acceptBidParams.pricePerItem,\n            _acceptBidParams.paymentToken,\n            _bidType\n        );\n\n        // Deplete or cancel listing\n        _bid.quantity -= _acceptBidParams.quantity;\n    }\n\n    /// @notice Buy multiple listed items. You must authorize this marketplace with your payment token to completed the buy or purchase with eth if it is a weth collection.\n    function buyItems(\n        BuyItemParams[] calldata _buyItemParams)\n    external\n    payable\n    nonReentrant\n    whenNotPaused\n    {\n        uint256 _ethAmountRequired;\n        for(uint256 i = 0; i < _buyItemParams.length; i++) {\n            _ethAmountRequired += _buyItem(_buyItemParams[i]);\n        }\n\n        require(msg.value == _ethAmountRequired, \"TreasureMarketplace: Bad ETH value\");\n    }\n\n    // Returns the amount of eth a user must have sent.\n    function _buyItem(BuyItemParams calldata _buyItemParams) private returns(uint256) {\n        // Validate buy order\n        require(_msgSender() != _buyItemParams.owner, \"TreasureMarketplace: Cannot buy your own item\");\n        require(_buyItemParams.quantity > 0, \"TreasureMarketplace: Nothing to buy\");\n\n        // Validate listing\n        ListingOrBid memory listedItem = listings[_buyItemParams.nftAddress][_buyItemParams.tokenId][_buyItemParams.owner];\n        require(listedItem.quantity > 0, \"TreasureMarketplace: not listed item\");\n        require(listedItem.expirationTime >= block.timestamp, \"TreasureMarketplace: listing expired\");\n        require(listedItem.pricePerItem > 0, \"TreasureMarketplace: listing price invalid\");\n        require(listedItem.quantity >= _buyItemParams.quantity, \"TreasureMarketplace: not enough quantity\");\n        require(listedItem.pricePerItem <= _buyItemParams.maxPricePerItem, \"TreasureMarketplace: price increased\");\n\n        // Ensure the buyer, the seller, and the collection all agree on the token to be used for the purchase.\n        // If the token used for buying/selling has changed since the listing was created, this effectively blocks\n        // all the old listings with the old payment tokens from being bought.\n        address _paymentTokenForCollection = getPaymentTokenForCollection(_buyItemParams.nftAddress);\n        address _paymentTokenForListing = _getPaymentTokenForListing(listedItem);\n\n        require(_paymentTokenForListing == _buyItemParams.paymentToken && _buyItemParams.paymentToken == _paymentTokenForCollection, \"TreasureMarketplace: Wrong payment token\");\n\n        if(_buyItemParams.usingEth) {\n            require(_paymentTokenForListing == address(weth), \"TreasureMarketplace: ETH only used with weth collection\");\n        }\n\n        // Transfer NFT to buyer, also validates owner owns it, and token is approved for trading\n        if (tokenApprovals[_buyItemParams.nftAddress] == TokenApprovalStatus.ERC_721_APPROVED) {\n            require(_buyItemParams.quantity == 1, \"TreasureMarketplace: Cannot buy multiple ERC721\");\n            IERC721Upgradeable(_buyItemParams.nftAddress).safeTransferFrom(_buyItemParams.owner, _msgSender(), _buyItemParams.tokenId);\n        } else if (tokenApprovals[_buyItemParams.nftAddress] == TokenApprovalStatus.ERC_1155_APPROVED) {\n            IERC1155Upgradeable(_buyItemParams.nftAddress).safeTransferFrom(_buyItemParams.owner, _msgSender(), _buyItemParams.tokenId, _buyItemParams.quantity, bytes(\"\"));\n        } else {\n            revert(\"TreasureMarketplace: token is not approved for trading\");\n        }\n\n        _payFees(listedItem, _buyItemParams.quantity, _buyItemParams.nftAddress, _msgSender(), _buyItemParams.owner, _buyItemParams.paymentToken, _buyItemParams.usingEth);\n\n        // Announce sale\n        emit ItemSold(\n            _buyItemParams.owner,\n            _msgSender(),\n            _buyItemParams.nftAddress,\n            _buyItemParams.tokenId,\n            _buyItemParams.quantity,\n            listedItem.pricePerItem, // this is deleted below in \"Deplete or cancel listing\"\n            _buyItemParams.paymentToken\n        );\n\n        // Deplete or cancel listing\n        if (listedItem.quantity == _buyItemParams.quantity) {\n            delete listings[_buyItemParams.nftAddress][_buyItemParams.tokenId][_buyItemParams.owner];\n        } else {\n            listings[_buyItemParams.nftAddress][_buyItemParams.tokenId][_buyItemParams.owner].quantity -= _buyItemParams.quantity;\n        }\n        \n        if(priceTrackerAddress != address(0)) {\n            ITreasureNFTPriceTracker(priceTrackerAddress).recordSale(_buyItemParams.nftAddress, _buyItemParams.tokenId, listedItem.pricePerItem);\n        }\n\n        if(_buyItemParams.usingEth) {\n            return _buyItemParams.quantity * listedItem.pricePerItem;\n        } else {\n            return 0;\n        }\n    }\n\n    /// @dev pays the fees to the marketplace fee recipient, the collection recipient if one exists, and to the seller of the item.\n    /// @param _listOrBid the item that is being purchased/accepted\n    /// @param _quantity the quantity of the item being purchased/accepted\n    /// @param _collectionAddress the collection to which this item belongs\n    function _payFees(ListingOrBid memory _listOrBid, uint256 _quantity, address _collectionAddress, address _from, address _to, address _paymentTokenAddress, bool _usingEth) private {\n        IERC20Upgradeable _paymentToken = IERC20Upgradeable(_paymentTokenAddress);\n\n        // Handle purchase price payment\n        uint256 _totalPrice = _listOrBid.pricePerItem * _quantity;\n\n        address _collectionFeeRecipient = collectionToCollectionOwnerFee[_collectionAddress].recipient;\n\n        uint256 _protocolFee;\n        uint256 _collectionFee;\n\n        if(_collectionFeeRecipient != address(0)) {\n            _protocolFee = feeWithCollectionOwner;\n            _collectionFee = collectionToCollectionOwnerFee[_collectionAddress].fee;\n        } else {\n            _protocolFee = fee;\n            _collectionFee = 0;\n        }\n\n        uint256 _protocolFeeAmount = _totalPrice * _protocolFee / BASIS_POINTS;\n        uint256 _collectionFeeAmount = _totalPrice * _collectionFee / BASIS_POINTS;\n\n        _transferAmount(_from, feeReceipient, _protocolFeeAmount, _paymentToken, _usingEth);\n        _transferAmount(_from, _collectionFeeRecipient, _collectionFeeAmount, _paymentToken, _usingEth);\n\n        // Transfer rest to seller\n        _transferAmount(_from, _to, _totalPrice - _protocolFeeAmount - _collectionFeeAmount, _paymentToken, _usingEth);\n    }\n\n    function _transferAmount(address _from, address _to, uint256 _amount, IERC20Upgradeable _paymentToken, bool _usingEth) private {\n        if(_amount == 0) {\n            return;\n        }\n\n        if(_usingEth) {\n            (bool _success,) = payable(_to).call{value: _amount}(\"\");\n            require(_success, \"TreasureMarketplace: Sending eth was not successful\");\n        } else {\n            _paymentToken.safeTransferFrom(_from, _to, _amount);\n        }\n    }\n\n    function getPaymentTokenForCollection(address _collection) public view returns(address) {\n        address _collectionPaymentToken = collectionToPaymentToken[_collection];\n\n        // For backwards compatability. If a collection payment wasn't set at the collection level, it was using the payment token.\n        return _collectionPaymentToken == address(0) ? address(paymentToken) : _collectionPaymentToken;\n    }\n\n    function _getPaymentTokenForListing(ListingOrBid memory listedItem) private view returns(address) {\n        // For backwards compatability. If a listing has no payment token address, it was using the original, default payment token.\n        return listedItem.paymentTokenAddress == address(0) ? address(paymentToken) : listedItem.paymentTokenAddress;\n    }\n\n    // Owner administration ////////////////////////////////////////////////////////////////////////////////////////////\n\n    /// @notice Updates the fee amount which is collected during sales, for both collections with and without owner specific fees.\n    /// @dev    This is callable only by the owner. Both fees may not exceed MAX_FEE\n    /// @param  _newFee the updated fee amount is basis points\n    function setFee(uint256 _newFee, uint256 _newFeeWithCollectionOwner) public onlyRole(TREASURE_MARKETPLACE_ADMIN_ROLE) {\n        require(_newFee <= MAX_FEE && _newFeeWithCollectionOwner <= MAX_FEE, \"TreasureMarketplace: max fee\");\n\n        fee = _newFee;\n        feeWithCollectionOwner = _newFeeWithCollectionOwner;\n\n        emit UpdateFee(_newFee);\n        emit UpdateFeeWithCollectionOwner(_newFeeWithCollectionOwner);\n    }\n\n    /// @notice Updates the fee amount which is collected during sales fro a specific collection\n    /// @dev    This is callable only by the owner\n    /// @param  _collectionAddress The collection in question. This must be whitelisted.\n    /// @param _collectionOwnerFee The fee and recipient for the collection. If the 0 address is passed as the recipient, collection specific fees will not be collected.\n    function setCollectionOwnerFee(address _collectionAddress, CollectionOwnerFee calldata _collectionOwnerFee) external onlyRole(TREASURE_MARKETPLACE_ADMIN_ROLE) {\n        require(tokenApprovals[_collectionAddress] == TokenApprovalStatus.ERC_1155_APPROVED\n            || tokenApprovals[_collectionAddress] == TokenApprovalStatus.ERC_721_APPROVED, \"TreasureMarketplace: Collection is not approved\");\n        require(_collectionOwnerFee.fee <= MAX_COLLECTION_FEE, \"TreasureMarketplace: Collection fee too high\");\n\n        // The collection recipient can be the 0 address, meaning we will treat this as a collection with no collection owner fee.\n        collectionToCollectionOwnerFee[_collectionAddress] = _collectionOwnerFee;\n\n        emit UpdateCollectionOwnerFee(_collectionAddress, _collectionOwnerFee.recipient, _collectionOwnerFee.fee);\n    }\n\n    /// @notice Updates the fee recipient which receives fees during sales\n    /// @dev    This is callable only by the owner.\n    /// @param  _newFeeRecipient the wallet to receive fees\n    function setFeeRecipient(address _newFeeRecipient) public onlyRole(TREASURE_MARKETPLACE_ADMIN_ROLE) {\n        require(_newFeeRecipient != address(0), \"TreasureMarketplace: cannot set 0x0 address\");\n        feeReceipient = _newFeeRecipient;\n        emit UpdateFeeRecipient(_newFeeRecipient);\n    }\n\n    /// @notice Sets a token as an approved kind of NFT or as ineligible for trading\n    /// @dev    This is callable only by the owner.\n    /// @param  _nft    address of the NFT to be approved\n    /// @param  _status the kind of NFT approved, or NOT_APPROVED to remove approval\n    function setTokenApprovalStatus(address _nft, TokenApprovalStatus _status, address _paymentToken) external onlyRole(TREASURE_MARKETPLACE_ADMIN_ROLE) {\n        if (_status == TokenApprovalStatus.ERC_721_APPROVED) {\n            require(IERC165Upgradeable(_nft).supportsInterface(INTERFACE_ID_ERC721), \"TreasureMarketplace: not an ERC721 contract\");\n        } else if (_status == TokenApprovalStatus.ERC_1155_APPROVED) {\n            require(IERC165Upgradeable(_nft).supportsInterface(INTERFACE_ID_ERC1155), \"TreasureMarketplace: not an ERC1155 contract\");\n        }\n\n        require(_paymentToken != address(0) && (_paymentToken == address(weth) || _paymentToken == address(paymentToken)), \"TreasureMarketplace: Payment token not supported\");\n\n        tokenApprovals[_nft] = _status;\n\n        collectionToPaymentToken[_nft] = _paymentToken;\n        emit TokenApprovalStatusUpdated(_nft, _status, _paymentToken);\n    }\n\n    function setWeth(address _wethAddress) external onlyRole(TREASURE_MARKETPLACE_ADMIN_ROLE) {\n        // require(address(weth) == address(0), \"WETH address already set\");\n\n        weth = IERC20Upgradeable(_wethAddress);\n    }\n\n    /// @notice Updates the fee recipient which receives fees during sales\n    /// @dev    This is callable only by the owner.\n    /// @param  _priceTrackerAddress the wallet to receive fees\n    function setPriceTracker(address _priceTrackerAddress) public onlyRole(TREASURE_MARKETPLACE_ADMIN_ROLE) {\n        require(_priceTrackerAddress != address(0), \"TreasureMarketplace: cannot set 0x0 address\");\n        priceTrackerAddress = _priceTrackerAddress;\n        emit UpdateSalesTracker(_priceTrackerAddress);\n    }\n\n    function toggleAreBidsActive() external onlyRole(TREASURE_MARKETPLACE_ADMIN_ROLE) {\n        areBidsActive = !areBidsActive;\n    }\n\n    /// @notice Pauses the marketplace, creatisgn and executing listings is paused\n    /// @dev    This is callable only by the owner. Canceling listings is not paused.\n    function pause() external onlyRole(TREASURE_MARKETPLACE_ADMIN_ROLE) {\n        _pause();\n    }\n\n    /// @notice Unpauses the marketplace, all functionality is restored\n    /// @dev    This is callable only by the owner.\n    function unpause() external onlyRole(TREASURE_MARKETPLACE_ADMIN_ROLE) {\n        _unpause();\n    }\n\n    modifier whenBiddingActive() {\n        require(areBidsActive, \"TreasureMarketplace: Bidding is not active\");\n\n        _;\n    }\n}\n\nstruct BuyItemParams {\n    /// which token contract holds the offered token\n    address nftAddress;\n    /// the identifier for the token to be bought\n    uint256 tokenId;\n    /// current owner of the item(s) to be bought\n    address owner;\n    /// how many of this token identifier to be bought (or 1 for a ERC-721 token)\n    uint64 quantity;\n    /// the maximum price (in units of the paymentToken) for each token offered\n    uint128 maxPricePerItem;\n    /// the payment token to be used\n    address paymentToken;\n    /// indicates if the user is purchasing this item with eth.\n    bool usingEth;\n}\n\nstruct AcceptBidParams {\n    // Which token contract holds the given tokens\n    address nftAddress;\n    // The token id being given\n    uint256 tokenId;\n    // The user who created the bid initially\n    address bidder;\n    // The quantity of items being supplied to the bidder\n    uint64 quantity;\n    // The price per item that the bidder is offering\n    uint128 pricePerItem;\n    /// the payment token to be used\n    address paymentToken;\n}\n\nstruct CancelBidParams {\n    BidType bidType;\n    address nftAddress;\n    uint256 tokenId;\n}\n\nenum BidType {\n    TOKEN,\n    COLLECTION\n}\n"
    },
    "contracts/interfaces/ITreasureNFTPriceTracker.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\ninterface ITreasureNFTPriceTracker {\n    event AveragePriceUpdated(\n        address indexed _collection,\n        FloorType indexed _floorType,\n        uint256 _oldAverage,\n        uint256 _salePrice,\n        uint256 _newAverage\n    );\n\n    // Saves the given sale of a token in a collection if it meets the saving criteria.\n    function recordSale(address _collection, uint256 _tokenId, uint256 _salePrice) external;\n    // Returns the average price for the given collection in the floor type category.\n    // Can return 0 if asking for a FloorType that isn't being tracked for that given collection\n    function getAveragePriceForCollection(address _collection, FloorType _floorType) external view returns (uint256);\n}\n\n// Allows for customization within tracking floor prices\n// Ex: Tracking legion genesis commons could be subfloor1, genesis uncommons subfloor2, etc\nenum FloorType {\n    FLOOR,\n    SUBFLOOR1,\n    SUBFLOOR2,\n    SUBFLOOR3\n}"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165Upgradeable.sol\";\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal onlyInitializing {\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}